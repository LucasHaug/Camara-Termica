ARM GAS  /tmp/ccELT73R.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_ADC_Init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_ADC_Init:
  24              	.LFB37:
  25              		.file 1 "cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"
   1:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
   2:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
   3:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @file    stm32f0xx_hal_adc.c
   4:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          peripheral:
   8:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Operation functions
  11:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Control functions
  14:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + State functions
  17:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  20:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          "stm32f0xx_hal_adc_ex.c".
  21:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  22:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   @verbatim
  23:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  24:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  26:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   [..]
  27:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  28:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  29:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  30:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  32:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/ccELT73R.s 			page 2


  34:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  35:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  36:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  38:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  39:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  40:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  41:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  42:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  44:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  46:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC calibration
  47:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  48:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  49:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       slower speed.
  50:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  51:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  52:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  53:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  54:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  55:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### How to use this driver #####
  56:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  57:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
  58:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  59:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  60:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
  61:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
  62:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  63:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Enable the ADC interface
  64:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  65:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            Caution: On STM32F0, ADC clock frequency max is 14MHz (refer
  66:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     to device datasheet).
  67:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  68:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  69:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     this maximum frequency.
  70:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  71:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  72:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  73:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  74:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  75:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  76:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  77:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    14MHz.
  78:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSI14State" must be set either:
  79:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ADC_CONTROL" to let the ADC control 
  80:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      the HSI14 oscillator enable/disable (if not used to supply the main 
  81:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      system clock): feature used if ADC mode LowPowerAutoPowerOff is 
  82:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      enabled.
  83:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ON" to maintain the HSI14 oscillator
  84:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  85:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  86:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
  87:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  88:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
  89:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                         (mandatory)
  90:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccELT73R.s 			page 3


  91:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                HI14 enable or let under control of ADC:           (optional: if asynchronous clock 
  92:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  93:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
  94:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
  95:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_ADC_CONTROL;
  96:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  97:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  98:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  99:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
 100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ADCx_IRQHandler().
 114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ================================================================
 126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_Init().
 131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         monitored, thresholds, ...)
 138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ====================================
 142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         conversion accuracy
 146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccELT73R.s 			page 4


 148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         transfer by DMA.
 150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by polling:
 152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (this function must be implemented in user program)
 167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 destination variable address.
 180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
 193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Disable the ADC interface
 196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock disable
 200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
 202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
 204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
ARM GAS  /tmp/ccELT73R.s 			page 5


 205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
 206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Deinitialize the DMA
 218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     @endverbatim
 225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
 226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @attention
 227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      without specific prior written permission.
 240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************  
 253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #include "stm32f0xx_hal.h"
 257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @addtogroup STM32F0xx_HAL_Driver
 259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccELT73R.s 			page 6


 262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC ADC
 263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief ADC HAL module driver
 264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* settling time.                                                           */
 277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clock frequency,       */
 278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: ms                                                                 */
 282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT             ( 2U)
 283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT            ( 2U)
 284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STOP_CONVERSION_TIMEOUT    ( 2U)
 285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ( 1U)
 290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
ARM GAS  /tmp/ccELT73R.s 			page 7


 319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim    
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) De-initialize the ADC
 332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 339:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 340:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         depending on both possible clock sources: APB clock of HSI clock.
 341:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 343:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 344:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 346:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 347:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 348:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 349:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 350:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 351:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 352:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 354:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 355:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 356:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 358:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 359:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
  26              		.loc 1 360 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 84B0     		sub	sp, sp, #16
  35              		.cfi_def_cfa_offset 24
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
 361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  39              		.loc 1 361 0
ARM GAS  /tmp/ccELT73R.s 			page 8


  40 0008 0F23     		movs	r3, #15
  41 000a FB18     		adds	r3, r7, r3
  42 000c 0022     		movs	r2, #0
  43 000e 1A70     		strb	r2, [r3]
 362:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
  44              		.loc 1 362 0
  45 0010 0023     		movs	r3, #0
  46 0012 BB60     		str	r3, [r7, #8]
 363:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 364:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
  47              		.loc 1 365 0
  48 0014 7B68     		ldr	r3, [r7, #4]
  49 0016 002B     		cmp	r3, #0
  50 0018 01D1     		bne	.L2
 366:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     return HAL_ERROR;
  51              		.loc 1 367 0
  52 001a 0123     		movs	r3, #1
  53 001c 24E1     		b	.L3
  54              	.L2:
 368:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 369:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 370:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 371:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 372:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 373:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 374:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 375:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 376:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 377:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 378:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 380:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 381:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 382:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 383:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 384:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 385:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 386:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 389:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 390:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 391:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 392:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 393:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  55              		.loc 1 394 0
  56 001e 7B68     		ldr	r3, [r7, #4]
  57 0020 5B6C     		ldr	r3, [r3, #68]
  58 0022 002B     		cmp	r3, #0
  59 0024 0AD1     		bne	.L4
 395:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Initialize ADC error code */
 397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  60              		.loc 1 397 0
ARM GAS  /tmp/ccELT73R.s 			page 9


  61 0026 7B68     		ldr	r3, [r7, #4]
  62 0028 0022     		movs	r2, #0
  63 002a 9A64     		str	r2, [r3, #72]
 398:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 399:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  64              		.loc 1 400 0
  65 002c 7B68     		ldr	r3, [r7, #4]
  66 002e 4022     		movs	r2, #64
  67 0030 0021     		movs	r1, #0
  68 0032 9954     		strb	r1, [r3, r2]
 401:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 402:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the low level hardware */
 403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  69              		.loc 1 403 0
  70 0034 7B68     		ldr	r3, [r7, #4]
  71 0036 1800     		movs	r0, r3
  72 0038 FFF7FEFF 		bl	HAL_ADC_MspInit
  73              	.L4:
 404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 405:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 406:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 408:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */ 
 409:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on the fly).                                                             */
 411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  74              		.loc 1 411 0
  75 003c 7B68     		ldr	r3, [r7, #4]
  76 003e 5B6C     		ldr	r3, [r3, #68]
  77 0040 1022     		movs	r2, #16
  78 0042 1340     		ands	r3, r2
  79 0044 00D0     		beq	.LCB48
  80 0046 02E1     		b	.L5	@long jump
  81              	.LCB48:
  82              		.loc 1 411 0 is_stmt 0 discriminator 1
  83 0048 0F23     		movs	r3, #15
  84 004a FB18     		adds	r3, r7, r3
  85 004c 1B78     		ldrb	r3, [r3]
  86 004e 002B     		cmp	r3, #0
  87 0050 00D0     		beq	.LCB53
  88 0052 FCE0     		b	.L5	@long jump
  89              	.LCB53:
 412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  90              		.loc 1 413 0 is_stmt 1
  91 0054 7B68     		ldr	r3, [r7, #4]
  92 0056 1B68     		ldr	r3, [r3]
  93 0058 9B68     		ldr	r3, [r3, #8]
  94 005a 0422     		movs	r2, #4
  95 005c 1340     		ands	r3, r2
 412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
  96              		.loc 1 412 0
  97 005e 00D0     		beq	.LCB60
  98 0060 F5E0     		b	.L5	@long jump
  99              	.LCB60:
 414:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
ARM GAS  /tmp/ccELT73R.s 			page 10


 415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 100              		.loc 1 416 0
 101 0062 7B68     		ldr	r3, [r7, #4]
 102 0064 5B6C     		ldr	r3, [r3, #68]
 103 0066 824A     		ldr	r2, .L22
 104 0068 1340     		ands	r3, r2
 105 006a 0222     		movs	r2, #2
 106 006c 1A43     		orrs	r2, r3
 107 006e 7B68     		ldr	r3, [r7, #4]
 108 0070 5A64     		str	r2, [r3, #68]
 417:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 418:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 420:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 421:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 422:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock mode                                                      */
 423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock prescaler                                                 */
 424:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC resolution                                                      */
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_IS_ENABLE(hadc) == RESET)
 109              		.loc 1 425 0
 110 0072 7B68     		ldr	r3, [r7, #4]
 111 0074 1B68     		ldr	r3, [r3]
 112 0076 9B68     		ldr	r3, [r3, #8]
 113 0078 0322     		movs	r2, #3
 114 007a 1340     		ands	r3, r2
 115 007c 012B     		cmp	r3, #1
 116 007e 12D1     		bne	.L6
 117              		.loc 1 425 0 is_stmt 0 discriminator 1
 118 0080 7B68     		ldr	r3, [r7, #4]
 119 0082 1B68     		ldr	r3, [r3]
 120 0084 1B68     		ldr	r3, [r3]
 121 0086 0122     		movs	r2, #1
 122 0088 1340     		ands	r3, r2
 123 008a 012B     		cmp	r3, #1
 124 008c 09D0     		beq	.L7
 125              		.loc 1 425 0 discriminator 4
 126 008e 7B68     		ldr	r3, [r7, #4]
 127 0090 1B68     		ldr	r3, [r3]
 128 0092 DA68     		ldr	r2, [r3, #12]
 129 0094 8023     		movs	r3, #128
 130 0096 1B02     		lsls	r3, r3, #8
 131 0098 1A40     		ands	r2, r3
 132 009a 8023     		movs	r3, #128
 133 009c 1B02     		lsls	r3, r3, #8
 134 009e 9A42     		cmp	r2, r3
 135 00a0 01D1     		bne	.L6
 136              	.L7:
 137              		.loc 1 425 0 discriminator 5
 138 00a2 0123     		movs	r3, #1
 139 00a4 00E0     		b	.L8
 140              	.L6:
 141              		.loc 1 425 0 discriminator 6
 142 00a6 0023     		movs	r3, #0
 143              	.L8:
 144              		.loc 1 425 0 discriminator 8
 145 00a8 002B     		cmp	r3, #0
ARM GAS  /tmp/ccELT73R.s 			page 11


 146 00aa 16D1     		bne	.L9
 426:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 427:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 428:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 430:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 431:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameters):                                                         */
 432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 433:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
 434:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 435:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC resolution                                      */
 436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 147              		.loc 1 436 0 is_stmt 1
 148 00ac 7B68     		ldr	r3, [r7, #4]
 149 00ae 1B68     		ldr	r3, [r3]
 150 00b0 DB68     		ldr	r3, [r3, #12]
 151 00b2 1822     		movs	r2, #24
 152 00b4 9343     		bics	r3, r2
 153 00b6 1900     		movs	r1, r3
 154 00b8 7B68     		ldr	r3, [r7, #4]
 155 00ba 9A68     		ldr	r2, [r3, #8]
 156 00bc 7B68     		ldr	r3, [r7, #4]
 157 00be 1B68     		ldr	r3, [r3]
 158 00c0 0A43     		orrs	r2, r1
 159 00c2 DA60     		str	r2, [r3, #12]
 437:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 438:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.Resolution );
 439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 440:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC clock mode: clock source AHB or HSI with        */
 441:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* selectable prescaler                                                 */
 442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2    ,
 160              		.loc 1 442 0
 161 00c4 7B68     		ldr	r3, [r7, #4]
 162 00c6 1B68     		ldr	r3, [r3]
 163 00c8 1B69     		ldr	r3, [r3, #16]
 164 00ca 9B00     		lsls	r3, r3, #2
 165 00cc 9908     		lsrs	r1, r3, #2
 166 00ce 7B68     		ldr	r3, [r7, #4]
 167 00d0 5A68     		ldr	r2, [r3, #4]
 168 00d2 7B68     		ldr	r3, [r7, #4]
 169 00d4 1B68     		ldr	r3, [r3]
 170 00d6 0A43     		orrs	r2, r1
 171 00d8 1A61     		str	r2, [r3, #16]
 172              	.L9:
 443:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 444:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.ClockPrescaler );
 445:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 446:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 447:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 448:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 449:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 450:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 452:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - overrun                                                             */
 453:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 454:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 455:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - data alignment                                                      */
ARM GAS  /tmp/ccELT73R.s 			page 12


 456:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - resolution                                                          */
 457:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - scan direction                                                      */
 458:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 173              		.loc 1 459 0
 174 00da 7B68     		ldr	r3, [r7, #4]
 175 00dc 1B68     		ldr	r3, [r3]
 176 00de DA68     		ldr	r2, [r3, #12]
 177 00e0 7B68     		ldr	r3, [r7, #4]
 178 00e2 1B68     		ldr	r3, [r3]
 179 00e4 6349     		ldr	r1, .L22+4
 180 00e6 0A40     		ands	r2, r1
 181 00e8 DA60     		str	r2, [r3, #12]
 460:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 461:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTDLY  |
 462:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_CONT    |
 463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_OVRMOD  |
 464:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTSEL  |
 465:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTEN   |
 466:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_ALIGN   |
 467:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_SCANDIR |
 468:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_DMACFG   );
 469:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 182              		.loc 1 470 0
 183 00ea 7B68     		ldr	r3, [r7, #4]
 184 00ec 9B69     		ldr	r3, [r3, #24]
 185 00ee 9A03     		lsls	r2, r3, #14
 471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 186              		.loc 1 471 0
 187 00f0 7B68     		ldr	r3, [r7, #4]
 188 00f2 DB69     		ldr	r3, [r3, #28]
 189 00f4 DB03     		lsls	r3, r3, #15
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 190              		.loc 1 470 0
 191 00f6 1A43     		orrs	r2, r3
 472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 192              		.loc 1 472 0
 193 00f8 7B68     		ldr	r3, [r7, #4]
 194 00fa 1B6A     		ldr	r3, [r3, #32]
 195 00fc 5B03     		lsls	r3, r3, #13
 471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 196              		.loc 1 471 0
 197 00fe 1A43     		orrs	r2, r3
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 198              		.loc 1 473 0
 199 0100 7B68     		ldr	r3, [r7, #4]
 200 0102 5B6B     		ldr	r3, [r3, #52]
 201 0104 012B     		cmp	r3, #1
 202 0106 02D0     		beq	.L10
 203              		.loc 1 473 0 is_stmt 0 discriminator 1
 204 0108 8023     		movs	r3, #128
 205 010a 5B01     		lsls	r3, r3, #5
 206 010c 00E0     		b	.L11
 207              	.L10:
 208              		.loc 1 473 0 discriminator 2
 209 010e 0023     		movs	r3, #0
ARM GAS  /tmp/ccELT73R.s 			page 13


 210              	.L11:
 472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 211              		.loc 1 472 0 is_stmt 1
 212 0110 1A43     		orrs	r2, r3
 474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 213              		.loc 1 474 0
 214 0112 7B68     		ldr	r3, [r7, #4]
 215 0114 DB68     		ldr	r3, [r3, #12]
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 216              		.loc 1 473 0
 217 0116 1A43     		orrs	r2, r3
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 218              		.loc 1 475 0
 219 0118 7B68     		ldr	r3, [r7, #4]
 220 011a 1B69     		ldr	r3, [r3, #16]
 221 011c 022B     		cmp	r3, #2
 222 011e 01D1     		bne	.L12
 223              		.loc 1 475 0 is_stmt 0 discriminator 1
 224 0120 0423     		movs	r3, #4
 225 0122 00E0     		b	.L13
 226              	.L12:
 227              		.loc 1 475 0 discriminator 2
 228 0124 0023     		movs	r3, #0
 229              	.L13:
 474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 230              		.loc 1 474 0 is_stmt 1
 231 0126 1A43     		orrs	r2, r3
 476:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 232              		.loc 1 476 0
 233 0128 7B68     		ldr	r3, [r7, #4]
 234 012a 1B6B     		ldr	r3, [r3, #48]
 235 012c 5B00     		lsls	r3, r3, #1
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 236              		.loc 1 475 0
 237 012e 1343     		orrs	r3, r2
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 238              		.loc 1 470 0
 239 0130 BA68     		ldr	r2, [r7, #8]
 240 0132 1343     		orrs	r3, r2
 241 0134 BB60     		str	r3, [r7, #8]
 477:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 479:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 242              		.loc 1 479 0
 243 0136 7B68     		ldr	r3, [r7, #4]
 244 0138 5B6A     		ldr	r3, [r3, #36]
 245 013a 012B     		cmp	r3, #1
 246 013c 15D1     		bne	.L14
 480:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 481:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 247              		.loc 1 481 0
 248 013e 7B68     		ldr	r3, [r7, #4]
 249 0140 1B6A     		ldr	r3, [r3, #32]
 250 0142 002B     		cmp	r3, #0
 251 0144 05D1     		bne	.L15
 482:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 483:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Enable the selected ADC group regular discontinuous mode */
ARM GAS  /tmp/ccELT73R.s 			page 14


 484:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         tmpCFGR1 |= ADC_CFGR1_DISCEN;
 252              		.loc 1 484 0
 253 0146 BB68     		ldr	r3, [r7, #8]
 254 0148 8022     		movs	r2, #128
 255 014a 5202     		lsls	r2, r2, #9
 256 014c 1343     		orrs	r3, r2
 257 014e BB60     		str	r3, [r7, #8]
 258 0150 0BE0     		b	.L14
 259              	.L15:
 485:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 487:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 488:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 489:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 490:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                  */
 491:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 492:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
 493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 260              		.loc 1 493 0
 261 0152 7B68     		ldr	r3, [r7, #4]
 262 0154 5B6C     		ldr	r3, [r3, #68]
 263 0156 2022     		movs	r2, #32
 264 0158 1A43     		orrs	r2, r3
 265 015a 7B68     		ldr	r3, [r7, #4]
 266 015c 5A64     		str	r2, [r3, #68]
 494:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 495:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 267              		.loc 1 496 0
 268 015e 7B68     		ldr	r3, [r7, #4]
 269 0160 9B6C     		ldr	r3, [r3, #72]
 270 0162 0122     		movs	r2, #1
 271 0164 1A43     		orrs	r2, r3
 272 0166 7B68     		ldr	r3, [r7, #4]
 273 0168 9A64     		str	r2, [r3, #72]
 274              	.L14:
 497:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 498:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 499:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 500:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 501:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* start.                                                                 */
 502:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 503:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 504:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       software start.                                                  */
 505:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 275              		.loc 1 505 0
 276 016a 7B68     		ldr	r3, [r7, #4]
 277 016c 9A6A     		ldr	r2, [r3, #40]
 278 016e C223     		movs	r3, #194
 279 0170 FF33     		adds	r3, r3, #255
 280 0172 9A42     		cmp	r2, r3
 281 0174 07D0     		beq	.L16
 506:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 282              		.loc 1 507 0
 283 0176 7B68     		ldr	r3, [r7, #4]
 284 0178 9A6A     		ldr	r2, [r3, #40]
ARM GAS  /tmp/ccELT73R.s 			page 15


 508:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 285              		.loc 1 508 0
 286 017a 7B68     		ldr	r3, [r7, #4]
 287 017c DB6A     		ldr	r3, [r3, #44]
 507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 288              		.loc 1 507 0
 289 017e 1343     		orrs	r3, r2
 290 0180 BA68     		ldr	r2, [r7, #8]
 291 0182 1343     		orrs	r3, r2
 292 0184 BB60     		str	r3, [r7, #8]
 293              	.L16:
 509:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 510:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 511:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC configuration register with previous settings */
 512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= tmpCFGR1;
 294              		.loc 1 512 0
 295 0186 7B68     		ldr	r3, [r7, #4]
 296 0188 1B68     		ldr	r3, [r3]
 297 018a D968     		ldr	r1, [r3, #12]
 298 018c 7B68     		ldr	r3, [r7, #4]
 299 018e 1B68     		ldr	r3, [r3]
 300 0190 BA68     		ldr	r2, [r7, #8]
 301 0192 0A43     		orrs	r2, r1
 302 0194 DA60     		str	r2, [r3, #12]
 513:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 514:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Channel sampling time configuration */
 515:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
 516:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (obsolete): sampling time set in this function if parameter            */
 517:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
 518:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Otherwise, sampling time is set into ADC channel initialization        */
 519:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* structure with parameter "SamplingTime" (obsolete).                    */
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 303              		.loc 1 520 0
 304 0196 7B68     		ldr	r3, [r7, #4]
 305 0198 9A6B     		ldr	r2, [r3, #56]
 306 019a 8023     		movs	r3, #128
 307 019c 5B05     		lsls	r3, r3, #21
 308 019e 9A42     		cmp	r2, r3
 309 01a0 1BD0     		beq	.L17
 310              		.loc 1 520 0 is_stmt 0 discriminator 1
 311 01a2 7B68     		ldr	r3, [r7, #4]
 312 01a4 9B6B     		ldr	r3, [r3, #56]
 313 01a6 012B     		cmp	r3, #1
 314 01a8 17D0     		beq	.L17
 315              		.loc 1 520 0 discriminator 2
 316 01aa 7B68     		ldr	r3, [r7, #4]
 317 01ac 9B6B     		ldr	r3, [r3, #56]
 318 01ae 022B     		cmp	r3, #2
 319 01b0 13D0     		beq	.L17
 320              		.loc 1 520 0 discriminator 3
 321 01b2 7B68     		ldr	r3, [r7, #4]
 322 01b4 9B6B     		ldr	r3, [r3, #56]
 323 01b6 032B     		cmp	r3, #3
 324 01b8 0FD0     		beq	.L17
 325              		.loc 1 520 0 discriminator 4
 326 01ba 7B68     		ldr	r3, [r7, #4]
 327 01bc 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/ccELT73R.s 			page 16


 328 01be 042B     		cmp	r3, #4
 329 01c0 0BD0     		beq	.L17
 330              		.loc 1 520 0 discriminator 5
 331 01c2 7B68     		ldr	r3, [r7, #4]
 332 01c4 9B6B     		ldr	r3, [r3, #56]
 333 01c6 052B     		cmp	r3, #5
 334 01c8 07D0     		beq	.L17
 335              		.loc 1 520 0 discriminator 6
 336 01ca 7B68     		ldr	r3, [r7, #4]
 337 01cc 9B6B     		ldr	r3, [r3, #56]
 338 01ce 062B     		cmp	r3, #6
 339 01d0 03D0     		beq	.L17
 340              		.loc 1 520 0 discriminator 7
 341 01d2 7B68     		ldr	r3, [r7, #4]
 342 01d4 9B6B     		ldr	r3, [r3, #56]
 343 01d6 072B     		cmp	r3, #7
 344 01d8 12D1     		bne	.L18
 345              	.L17:
 521:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 522:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
 523:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear the old sample time */
 524:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 346              		.loc 1 524 0 is_stmt 1
 347 01da 7B68     		ldr	r3, [r7, #4]
 348 01dc 1B68     		ldr	r3, [r3]
 349 01de 5A69     		ldr	r2, [r3, #20]
 350 01e0 7B68     		ldr	r3, [r7, #4]
 351 01e2 1B68     		ldr	r3, [r3]
 352 01e4 0721     		movs	r1, #7
 353 01e6 8A43     		bics	r2, r1
 354 01e8 5A61     		str	r2, [r3, #20]
 525:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 526:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the new sample time */
 527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 355              		.loc 1 527 0
 356 01ea 7B68     		ldr	r3, [r7, #4]
 357 01ec 1B68     		ldr	r3, [r3]
 358 01ee 5969     		ldr	r1, [r3, #20]
 359 01f0 7B68     		ldr	r3, [r7, #4]
 360 01f2 9B6B     		ldr	r3, [r3, #56]
 361 01f4 0722     		movs	r2, #7
 362 01f6 1A40     		ands	r2, r3
 363 01f8 7B68     		ldr	r3, [r7, #4]
 364 01fa 1B68     		ldr	r3, [r3]
 365 01fc 0A43     		orrs	r2, r1
 366 01fe 5A61     		str	r2, [r3, #20]
 367              	.L18:
 528:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 529:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 530:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 531:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 532:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check through register CFGR1 (excluding analog watchdog configuration: */
 533:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* set into separate dedicated function, and bits of ADC resolution set   */
 534:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* out of temporary variable 'tmpCFGR1').                                 */
 535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1
 368              		.loc 1 535 0
 369 0200 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccELT73R.s 			page 17


 370 0202 1B68     		ldr	r3, [r3]
 371 0204 DB68     		ldr	r3, [r3, #12]
 372 0206 1C4A     		ldr	r2, .L22+8
 373 0208 1340     		ands	r3, r2
 374 020a BA68     		ldr	r2, [r7, #8]
 375 020c 9A42     		cmp	r2, r3
 376 020e 0BD1     		bne	.L19
 536:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 537:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 538:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to none */
 539:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 377              		.loc 1 539 0
 378 0210 7B68     		ldr	r3, [r7, #4]
 379 0212 0022     		movs	r2, #0
 380 0214 9A64     		str	r2, [r3, #72]
 540:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 541:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the ADC state */
 542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 381              		.loc 1 542 0
 382 0216 7B68     		ldr	r3, [r7, #4]
 383 0218 5B6C     		ldr	r3, [r3, #68]
 384 021a 0322     		movs	r2, #3
 385 021c 9343     		bics	r3, r2
 386 021e 0122     		movs	r2, #1
 387 0220 1A43     		orrs	r2, r3
 388 0222 7B68     		ldr	r3, [r7, #4]
 389 0224 5A64     		str	r2, [r3, #68]
 535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 390              		.loc 1 535 0
 391 0226 1CE0     		b	.L21
 392              	.L19:
 543:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 544:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 545:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 546:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 547:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 548:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 393              		.loc 1 549 0
 394 0228 7B68     		ldr	r3, [r7, #4]
 395 022a 5B6C     		ldr	r3, [r3, #68]
 396 022c 1222     		movs	r2, #18
 397 022e 9343     		bics	r3, r2
 398 0230 1022     		movs	r2, #16
 399 0232 1A43     		orrs	r2, r3
 400 0234 7B68     		ldr	r3, [r7, #4]
 401 0236 5A64     		str	r2, [r3, #68]
 550:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 551:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 552:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 553:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 554:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 402              		.loc 1 554 0
 403 0238 7B68     		ldr	r3, [r7, #4]
 404 023a 9B6C     		ldr	r3, [r3, #72]
 405 023c 0122     		movs	r2, #1
 406 023e 1A43     		orrs	r2, r3
ARM GAS  /tmp/ccELT73R.s 			page 18


 407 0240 7B68     		ldr	r3, [r7, #4]
 408 0242 9A64     		str	r2, [r3, #72]
 555:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 556:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 409              		.loc 1 556 0
 410 0244 0F23     		movs	r3, #15
 411 0246 FB18     		adds	r3, r7, r3
 412 0248 0122     		movs	r2, #1
 413 024a 1A70     		strb	r2, [r3]
 535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 414              		.loc 1 535 0
 415 024c 09E0     		b	.L21
 416              	.L5:
 557:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 558:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 559:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 560:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 561:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 562:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
 563:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 417              		.loc 1 563 0
 418 024e 7B68     		ldr	r3, [r7, #4]
 419 0250 5B6C     		ldr	r3, [r3, #68]
 420 0252 1022     		movs	r2, #16
 421 0254 1A43     		orrs	r2, r3
 422 0256 7B68     		ldr	r3, [r7, #4]
 423 0258 5A64     		str	r2, [r3, #68]
 564:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 424              		.loc 1 565 0
 425 025a 0F23     		movs	r3, #15
 426 025c FB18     		adds	r3, r7, r3
 427 025e 0122     		movs	r2, #1
 428 0260 1A70     		strb	r2, [r3]
 429              	.L21:
 566:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 567:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 568:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 569:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 430              		.loc 1 569 0
 431 0262 0F23     		movs	r3, #15
 432 0264 FB18     		adds	r3, r7, r3
 433 0266 1B78     		ldrb	r3, [r3]
 434              	.L3:
 570:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 435              		.loc 1 570 0
 436 0268 1800     		movs	r0, r3
 437 026a BD46     		mov	sp, r7
 438 026c 04B0     		add	sp, sp, #16
 439              		@ sp needed
 440 026e 80BD     		pop	{r7, pc}
 441              	.L23:
 442              		.align	2
 443              	.L22:
 444 0270 FDFEFFFF 		.word	-259
 445 0274 1902FEFF 		.word	-130535
 446 0278 E7FF3F83 		.word	-2092957721
ARM GAS  /tmp/ccELT73R.s 			page 19


 447              		.cfi_endproc
 448              	.LFE37:
 450              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 451              		.align	1
 452              		.global	HAL_ADC_DeInit
 453              		.syntax unified
 454              		.code	16
 455              		.thumb_func
 456              		.fpu softvfp
 458              	HAL_ADC_DeInit:
 459              	.LFB38:
 571:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 572:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 573:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 574:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 575:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 576:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 577:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 578:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 579:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 580:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 581:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         common group is still running.
 582:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 583:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 584:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 585:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 586:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 460              		.loc 1 586 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 16
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464 0000 B0B5     		push	{r4, r5, r7, lr}
 465              		.cfi_def_cfa_offset 16
 466              		.cfi_offset 4, -16
 467              		.cfi_offset 5, -12
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 84B0     		sub	sp, sp, #16
 471              		.cfi_def_cfa_offset 32
 472 0004 00AF     		add	r7, sp, #0
 473              		.cfi_def_cfa_register 7
 474 0006 7860     		str	r0, [r7, #4]
 587:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 475              		.loc 1 587 0
 476 0008 0F23     		movs	r3, #15
 477 000a FB18     		adds	r3, r7, r3
 478 000c 0022     		movs	r2, #0
 479 000e 1A70     		strb	r2, [r3]
 588:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 589:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 590:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 480              		.loc 1 590 0
 481 0010 7B68     		ldr	r3, [r7, #4]
 482 0012 002B     		cmp	r3, #0
 483 0014 01D1     		bne	.L25
 591:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 592:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      return HAL_ERROR;
ARM GAS  /tmp/ccELT73R.s 			page 20


 484              		.loc 1 592 0
 485 0016 0123     		movs	r3, #1
 486 0018 70E0     		b	.L26
 487              	.L25:
 593:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 594:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 595:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 596:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 597:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 598:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
 599:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 488              		.loc 1 599 0
 489 001a 7B68     		ldr	r3, [r7, #4]
 490 001c 5B6C     		ldr	r3, [r3, #68]
 491 001e 0222     		movs	r2, #2
 492 0020 1A43     		orrs	r2, r3
 493 0022 7B68     		ldr	r3, [r7, #4]
 494 0024 5A64     		str	r2, [r3, #68]
 600:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 601:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 602:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 495              		.loc 1 602 0
 496 0026 0F25     		movs	r5, #15
 497 0028 7C19     		adds	r4, r7, r5
 498 002a 7B68     		ldr	r3, [r7, #4]
 499 002c 1800     		movs	r0, r3
 500 002e FFF7FEFF 		bl	ADC_ConversionStop
 501 0032 0300     		movs	r3, r0
 502 0034 2370     		strb	r3, [r4]
 603:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 604:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 605:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 503              		.loc 1 605 0
 504 0036 7B19     		adds	r3, r7, r5
 505 0038 1B78     		ldrb	r3, [r3]
 506 003a 002B     		cmp	r3, #0
 507 003c 0ED1     		bne	.L27
 606:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 607:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 608:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 508              		.loc 1 608 0
 509 003e 0F25     		movs	r5, #15
 510 0040 7C19     		adds	r4, r7, r5
 511 0042 7B68     		ldr	r3, [r7, #4]
 512 0044 1800     		movs	r0, r3
 513 0046 FFF7FEFF 		bl	ADC_Disable
 514 004a 0300     		movs	r3, r0
 515 004c 2370     		strb	r3, [r4]
 609:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 610:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 611:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 516              		.loc 1 611 0
 517 004e 7B19     		adds	r3, r7, r5
 518 0050 1B78     		ldrb	r3, [r3]
 519 0052 012B     		cmp	r3, #1
 520 0054 02D0     		beq	.L27
 612:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccELT73R.s 			page 21


 613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Change ADC state */
 614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 521              		.loc 1 614 0
 522 0056 7B68     		ldr	r3, [r7, #4]
 523 0058 0122     		movs	r2, #1
 524 005a 5A64     		str	r2, [r3, #68]
 525              	.L27:
 615:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 616:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 617:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 618:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 619:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 620:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 526              		.loc 1 621 0
 527 005c 0F23     		movs	r3, #15
 528 005e FB18     		adds	r3, r7, r3
 529 0060 1B78     		ldrb	r3, [r3]
 530 0062 012B     		cmp	r3, #1
 531 0064 43D0     		beq	.L28
 622:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 623:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 624:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 625:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register IER */
 626:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 532              		.loc 1 626 0
 533 0066 7B68     		ldr	r3, [r7, #4]
 534 0068 1B68     		ldr	r3, [r3]
 535 006a 5A68     		ldr	r2, [r3, #4]
 536 006c 7B68     		ldr	r3, [r7, #4]
 537 006e 1B68     		ldr	r3, [r3]
 538 0070 9F21     		movs	r1, #159
 539 0072 8A43     		bics	r2, r1
 540 0074 5A60     		str	r2, [r3, #4]
 627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 628:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOSMP | ADC_IT_RDY   ) );
 629:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 630:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register ISR */
 631:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 541              		.loc 1 631 0
 542 0076 7B68     		ldr	r3, [r7, #4]
 543 0078 1B68     		ldr	r3, [r3]
 544 007a 9F22     		movs	r2, #159
 545 007c 1A60     		str	r2, [r3]
 632:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 633:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOSMP | ADC_FLAG_RDY   ) );
 634:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 635:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CR */
 636:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 637:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* "read-set": no direct reset applicable.                                */
 638:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 639:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR1 */
 640:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_
 546              		.loc 1 640 0
 547 007e 7B68     		ldr	r3, [r7, #4]
 548 0080 1B68     		ldr	r3, [r3]
 549 0082 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccELT73R.s 			page 22


 550 0084 7B68     		ldr	r3, [r7, #4]
 551 0086 1B68     		ldr	r3, [r3]
 552 0088 1E49     		ldr	r1, .L29
 553 008a 0A40     		ands	r2, r1
 554 008c DA60     		str	r2, [r3, #12]
 641:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 642:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_
 643:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN              
 644:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 645:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR2 */
 646:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 647:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       already done above.                                              */
 648:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 555              		.loc 1 648 0
 556 008e 7B68     		ldr	r3, [r7, #4]
 557 0090 1B68     		ldr	r3, [r3]
 558 0092 1A69     		ldr	r2, [r3, #16]
 559 0094 7B68     		ldr	r3, [r7, #4]
 560 0096 1B68     		ldr	r3, [r3]
 561 0098 9200     		lsls	r2, r2, #2
 562 009a 9208     		lsrs	r2, r2, #2
 563 009c 1A61     		str	r2, [r3, #16]
 649:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register SMPR */
 651:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 564              		.loc 1 651 0
 565 009e 7B68     		ldr	r3, [r7, #4]
 566 00a0 1B68     		ldr	r3, [r3]
 567 00a2 5A69     		ldr	r2, [r3, #20]
 568 00a4 7B68     		ldr	r3, [r7, #4]
 569 00a6 1B68     		ldr	r3, [r3]
 570 00a8 0721     		movs	r1, #7
 571 00aa 8A43     		bics	r2, r1
 572 00ac 5A61     		str	r2, [r3, #20]
 652:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 653:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register TR1 */
 654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 573              		.loc 1 654 0
 574 00ae 7B68     		ldr	r3, [r7, #4]
 575 00b0 1B68     		ldr	r3, [r3]
 576 00b2 1A6A     		ldr	r2, [r3, #32]
 577 00b4 7B68     		ldr	r3, [r7, #4]
 578 00b6 1B68     		ldr	r3, [r3]
 579 00b8 1349     		ldr	r1, .L29+4
 580 00ba 0A40     		ands	r2, r1
 581 00bc 1A62     		str	r2, [r3, #32]
 655:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 656:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CHSELR */
 657:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 582              		.loc 1 657 0
 583 00be 7B68     		ldr	r3, [r7, #4]
 584 00c0 1B68     		ldr	r3, [r3]
 585 00c2 9A6A     		ldr	r2, [r3, #40]
 586 00c4 7B68     		ldr	r3, [r7, #4]
 587 00c6 1B68     		ldr	r3, [r3]
 588 00c8 D20C     		lsrs	r2, r2, #19
 589 00ca D204     		lsls	r2, r2, #19
ARM GAS  /tmp/ccELT73R.s 			page 23


 590 00cc 9A62     		str	r2, [r3, #40]
 658:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 659:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL11 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL9  | ADC_
 660:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL7  | ADC_CHSELR_CHSEL6  | ADC_CHSELR_CHSEL5  | ADC_
 661:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL3  | ADC_CHSELR_CHSEL2  | ADC_CHSELR_CHSEL1  | ADC_
 662:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 663:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register DR */
 664:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 665:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 666:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CCR */
 667:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC->CCR &= ~(ADC_CCR_ALL);
 591              		.loc 1 667 0
 592 00ce 0F4B     		ldr	r3, .L29+8
 593 00d0 1A68     		ldr	r2, [r3]
 594 00d2 0E4B     		ldr	r3, .L29+8
 595 00d4 0E49     		ldr	r1, .L29+12
 596 00d6 0A40     		ands	r2, r1
 597 00d8 1A60     		str	r2, [r3]
 668:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 669:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 670:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 671:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 672:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 673:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 674:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*                                                                        */
 675:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 677:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 678:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* DeInit the low level hardware */
 679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 598              		.loc 1 679 0
 599 00da 7B68     		ldr	r3, [r7, #4]
 600 00dc 1800     		movs	r0, r3
 601 00de FFF7FEFF 		bl	HAL_ADC_MspDeInit
 680:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 681:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC error code to none */
 682:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 602              		.loc 1 682 0
 603 00e2 7B68     		ldr	r3, [r7, #4]
 604 00e4 0022     		movs	r2, #0
 605 00e6 9A64     		str	r2, [r3, #72]
 683:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 685:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 606              		.loc 1 685 0
 607 00e8 7B68     		ldr	r3, [r7, #4]
 608 00ea 0022     		movs	r2, #0
 609 00ec 5A64     		str	r2, [r3, #68]
 610              	.L28:
 686:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 687:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 688:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 689:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 611              		.loc 1 689 0
 612 00ee 7B68     		ldr	r3, [r7, #4]
 613 00f0 4022     		movs	r2, #64
 614 00f2 0021     		movs	r1, #0
ARM GAS  /tmp/ccELT73R.s 			page 24


 615 00f4 9954     		strb	r1, [r3, r2]
 690:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 691:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 692:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 616              		.loc 1 692 0
 617 00f6 0F23     		movs	r3, #15
 618 00f8 FB18     		adds	r3, r7, r3
 619 00fa 1B78     		ldrb	r3, [r3]
 620              	.L26:
 693:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 621              		.loc 1 693 0
 622 00fc 1800     		movs	r0, r3
 623 00fe BD46     		mov	sp, r7
 624 0100 04B0     		add	sp, sp, #16
 625              		@ sp needed
 626 0102 B0BD     		pop	{r4, r5, r7, pc}
 627              	.L30:
 628              		.align	2
 629              	.L29:
 630 0104 00023E83 		.word	-2093088256
 631 0108 00F000F0 		.word	-268374016
 632 010c 08270140 		.word	1073817352
 633 0110 FFFF3FFE 		.word	-29360129
 634              		.cfi_endproc
 635              	.LFE38:
 637              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 638              		.align	1
 639              		.weak	HAL_ADC_MspInit
 640              		.syntax unified
 641              		.code	16
 642              		.thumb_func
 643              		.fpu softvfp
 645              	HAL_ADC_MspInit:
 646              	.LFB39:
 694:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 695:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 696:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 697:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 698:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 699:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 700:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 701:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 702:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 647              		.loc 1 702 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 8
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651 0000 80B5     		push	{r7, lr}
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0002 82B0     		sub	sp, sp, #8
 656              		.cfi_def_cfa_offset 16
 657 0004 00AF     		add	r7, sp, #0
 658              		.cfi_def_cfa_register 7
 659 0006 7860     		str	r0, [r7, #4]
 703:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccELT73R.s 			page 25


 704:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 706:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 707:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 708:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 709:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 660              		.loc 1 709 0
 661 0008 C046     		nop
 662 000a BD46     		mov	sp, r7
 663 000c 02B0     		add	sp, sp, #8
 664              		@ sp needed
 665 000e 80BD     		pop	{r7, pc}
 666              		.cfi_endproc
 667              	.LFE39:
 669              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 670              		.align	1
 671              		.weak	HAL_ADC_MspDeInit
 672              		.syntax unified
 673              		.code	16
 674              		.thumb_func
 675              		.fpu softvfp
 677              	HAL_ADC_MspDeInit:
 678              	.LFB40:
 710:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 711:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 712:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 713:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 714:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 715:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 716:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 679              		.loc 1 717 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 8
 682              		@ frame_needed = 1, uses_anonymous_args = 0
 683 0000 80B5     		push	{r7, lr}
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 7, -8
 686              		.cfi_offset 14, -4
 687 0002 82B0     		sub	sp, sp, #8
 688              		.cfi_def_cfa_offset 16
 689 0004 00AF     		add	r7, sp, #0
 690              		.cfi_def_cfa_register 7
 691 0006 7860     		str	r0, [r7, #4]
 718:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 719:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 720:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 721:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 722:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 723:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 724:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 692              		.loc 1 724 0
 693 0008 C046     		nop
 694 000a BD46     		mov	sp, r7
 695 000c 02B0     		add	sp, sp, #8
 696              		@ sp needed
 697 000e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccELT73R.s 			page 26


 698              		.cfi_endproc
 699              	.LFE40:
 701              		.section	.text.HAL_ADC_Start,"ax",%progbits
 702              		.align	1
 703              		.global	HAL_ADC_Start
 704              		.syntax unified
 705              		.code	16
 706              		.thumb_func
 707              		.fpu softvfp
 709              	HAL_ADC_Start:
 710              	.LFB41:
 725:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 726:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 727:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
 728:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 729:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 730:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 731:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    IO operation functions 
 732:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 733:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
 734:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 735:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       ##### IO operation functions #####
 736:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
 737:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 738:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group.
 739:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 740:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 741:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion event.
 742:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 743:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 744:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 745:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 747:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 748:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 749:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 750:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 751:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 752:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 753:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 754:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 755:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 756:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 757:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 758:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 759:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 711              		.loc 1 759 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 16
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0000 90B5     		push	{r4, r7, lr}
 716              		.cfi_def_cfa_offset 12
 717              		.cfi_offset 4, -12
 718              		.cfi_offset 7, -8
 719              		.cfi_offset 14, -4
 720 0002 85B0     		sub	sp, sp, #20
 721              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccELT73R.s 			page 27


 722 0004 00AF     		add	r7, sp, #0
 723              		.cfi_def_cfa_register 7
 724 0006 7860     		str	r0, [r7, #4]
 760:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 725              		.loc 1 760 0
 726 0008 0F23     		movs	r3, #15
 727 000a FB18     		adds	r3, r7, r3
 728 000c 0022     		movs	r2, #0
 729 000e 1A70     		strb	r2, [r3]
 761:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 762:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 763:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 764:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 765:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 730              		.loc 1 766 0
 731 0010 7B68     		ldr	r3, [r7, #4]
 732 0012 1B68     		ldr	r3, [r3]
 733 0014 9B68     		ldr	r3, [r3, #8]
 734 0016 0422     		movs	r2, #4
 735 0018 1340     		ands	r3, r2
 736 001a 38D1     		bne	.L34
 767:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 768:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
 769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 737              		.loc 1 769 0
 738 001c 7B68     		ldr	r3, [r7, #4]
 739 001e 4022     		movs	r2, #64
 740 0020 9B5C     		ldrb	r3, [r3, r2]
 741 0022 012B     		cmp	r3, #1
 742 0024 01D1     		bne	.L35
 743              		.loc 1 769 0 is_stmt 0 discriminator 1
 744 0026 0223     		movs	r3, #2
 745 0028 38E0     		b	.L36
 746              	.L35:
 747              		.loc 1 769 0 discriminator 2
 748 002a 7B68     		ldr	r3, [r7, #4]
 749 002c 4022     		movs	r2, #64
 750 002e 0121     		movs	r1, #1
 751 0030 9954     		strb	r1, [r3, r2]
 770:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 771:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 772:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 773:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 774:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 752              		.loc 1 774 0 is_stmt 1 discriminator 2
 753 0032 7B68     		ldr	r3, [r7, #4]
 754 0034 DB69     		ldr	r3, [r3, #28]
 755 0036 012B     		cmp	r3, #1
 756 0038 07D0     		beq	.L37
 775:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 776:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 757              		.loc 1 776 0
 758 003a 0F23     		movs	r3, #15
 759 003c FC18     		adds	r4, r7, r3
 760 003e 7B68     		ldr	r3, [r7, #4]
 761 0040 1800     		movs	r0, r3
ARM GAS  /tmp/ccELT73R.s 			page 28


 762 0042 FFF7FEFF 		bl	ADC_Enable
 763 0046 0300     		movs	r3, r0
 764 0048 2370     		strb	r3, [r4]
 765              	.L37:
 777:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 778:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 779:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 766              		.loc 1 780 0
 767 004a 0F23     		movs	r3, #15
 768 004c FB18     		adds	r3, r7, r3
 769 004e 1B78     		ldrb	r3, [r3]
 770 0050 002B     		cmp	r3, #0
 771 0052 20D1     		bne	.L39
 781:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 782:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
 783:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 772              		.loc 1 785 0
 773 0054 7B68     		ldr	r3, [r7, #4]
 774 0056 5B6C     		ldr	r3, [r3, #68]
 775 0058 124A     		ldr	r2, .L40
 776 005a 1340     		ands	r3, r2
 777 005c 8022     		movs	r2, #128
 778 005e 5200     		lsls	r2, r2, #1
 779 0060 1A43     		orrs	r2, r3
 780 0062 7B68     		ldr	r3, [r7, #4]
 781 0064 5A64     		str	r2, [r3, #68]
 786:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 787:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 788:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 789:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 782              		.loc 1 790 0
 783 0066 7B68     		ldr	r3, [r7, #4]
 784 0068 0022     		movs	r2, #0
 785 006a 9A64     		str	r2, [r3, #72]
 791:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 792:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 793:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 794:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 795:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 786              		.loc 1 795 0
 787 006c 7B68     		ldr	r3, [r7, #4]
 788 006e 4022     		movs	r2, #64
 789 0070 0021     		movs	r1, #0
 790 0072 9954     		strb	r1, [r3, r2]
 796:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 797:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 798:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 799:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
 800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 791              		.loc 1 800 0
 792 0074 7B68     		ldr	r3, [r7, #4]
 793 0076 1B68     		ldr	r3, [r3]
 794 0078 1C22     		movs	r2, #28
ARM GAS  /tmp/ccELT73R.s 			page 29


 795 007a 1A60     		str	r2, [r3]
 801:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 802:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 803:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 804:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 805:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
 806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 796              		.loc 1 806 0
 797 007c 7B68     		ldr	r3, [r7, #4]
 798 007e 1B68     		ldr	r3, [r3]
 799 0080 9A68     		ldr	r2, [r3, #8]
 800 0082 7B68     		ldr	r3, [r7, #4]
 801 0084 1B68     		ldr	r3, [r3]
 802 0086 0421     		movs	r1, #4
 803 0088 0A43     		orrs	r2, r1
 804 008a 9A60     		str	r2, [r3, #8]
 805 008c 03E0     		b	.L39
 806              	.L34:
 807:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 808:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 809:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 810:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 807              		.loc 1 811 0
 808 008e 0F23     		movs	r3, #15
 809 0090 FB18     		adds	r3, r7, r3
 810 0092 0222     		movs	r2, #2
 811 0094 1A70     		strb	r2, [r3]
 812              	.L39:
 812:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 813:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 814:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 815:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 813              		.loc 1 815 0
 814 0096 0F23     		movs	r3, #15
 815 0098 FB18     		adds	r3, r7, r3
 816 009a 1B78     		ldrb	r3, [r3]
 817              	.L36:
 816:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 818              		.loc 1 816 0
 819 009c 1800     		movs	r0, r3
 820 009e BD46     		mov	sp, r7
 821 00a0 05B0     		add	sp, sp, #20
 822              		@ sp needed
 823 00a2 90BD     		pop	{r4, r7, pc}
 824              	.L41:
 825              		.align	2
 826              	.L40:
 827 00a4 FEF0FFFF 		.word	-3842
 828              		.cfi_endproc
 829              	.LFE41:
 831              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 832              		.align	1
 833              		.global	HAL_ADC_Stop
 834              		.syntax unified
 835              		.code	16
 836              		.thumb_func
ARM GAS  /tmp/ccELT73R.s 			page 30


 837              		.fpu softvfp
 839              	HAL_ADC_Stop:
 840              	.LFB42:
 817:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 818:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 819:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
 820:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 821:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
 822:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 823:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 824:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** { 
 841              		.loc 1 824 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 16
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845 0000 B0B5     		push	{r4, r5, r7, lr}
 846              		.cfi_def_cfa_offset 16
 847              		.cfi_offset 4, -16
 848              		.cfi_offset 5, -12
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 14, -4
 851 0002 84B0     		sub	sp, sp, #16
 852              		.cfi_def_cfa_offset 32
 853 0004 00AF     		add	r7, sp, #0
 854              		.cfi_def_cfa_register 7
 855 0006 7860     		str	r0, [r7, #4]
 825:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 856              		.loc 1 825 0
 857 0008 0F23     		movs	r3, #15
 858 000a FB18     		adds	r3, r7, r3
 859 000c 0022     		movs	r2, #0
 860 000e 1A70     		strb	r2, [r3]
 826:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 827:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 828:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 829:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 830:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
 831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 861              		.loc 1 831 0
 862 0010 7B68     		ldr	r3, [r7, #4]
 863 0012 4022     		movs	r2, #64
 864 0014 9B5C     		ldrb	r3, [r3, r2]
 865 0016 012B     		cmp	r3, #1
 866 0018 01D1     		bne	.L43
 867              		.loc 1 831 0 is_stmt 0 discriminator 1
 868 001a 0223     		movs	r3, #2
 869 001c 2AE0     		b	.L44
 870              	.L43:
 871              		.loc 1 831 0 discriminator 2
 872 001e 7B68     		ldr	r3, [r7, #4]
 873 0020 4022     		movs	r2, #64
 874 0022 0121     		movs	r1, #1
 875 0024 9954     		strb	r1, [r3, r2]
 832:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 833:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
 834:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 876              		.loc 1 834 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/ccELT73R.s 			page 31


 877 0026 0F25     		movs	r5, #15
 878 0028 7C19     		adds	r4, r7, r5
 879 002a 7B68     		ldr	r3, [r7, #4]
 880 002c 1800     		movs	r0, r3
 881 002e FFF7FEFF 		bl	ADC_ConversionStop
 882 0032 0300     		movs	r3, r0
 883 0034 2370     		strb	r3, [r4]
 835:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 836:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 837:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 884              		.loc 1 837 0 discriminator 2
 885 0036 7B19     		adds	r3, r7, r5
 886 0038 1B78     		ldrb	r3, [r3]
 887 003a 002B     		cmp	r3, #0
 888 003c 13D1     		bne	.L45
 838:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 839:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 840:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 889              		.loc 1 840 0
 890 003e 0F25     		movs	r5, #15
 891 0040 7C19     		adds	r4, r7, r5
 892 0042 7B68     		ldr	r3, [r7, #4]
 893 0044 1800     		movs	r0, r3
 894 0046 FFF7FEFF 		bl	ADC_Disable
 895 004a 0300     		movs	r3, r0
 896 004c 2370     		strb	r3, [r4]
 841:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 842:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 843:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 897              		.loc 1 843 0
 898 004e 7B19     		adds	r3, r7, r5
 899 0050 1B78     		ldrb	r3, [r3]
 900 0052 002B     		cmp	r3, #0
 901 0054 07D1     		bne	.L45
 844:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 845:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
 846:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 902              		.loc 1 846 0
 903 0056 7B68     		ldr	r3, [r7, #4]
 904 0058 5B6C     		ldr	r3, [r3, #68]
 905 005a 084A     		ldr	r2, .L46
 906 005c 1340     		ands	r3, r2
 907 005e 0122     		movs	r2, #1
 908 0060 1A43     		orrs	r2, r3
 909 0062 7B68     		ldr	r3, [r7, #4]
 910 0064 5A64     		str	r2, [r3, #68]
 911              	.L45:
 847:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 848:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 849:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 850:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 851:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 852:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 853:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 912              		.loc 1 853 0
 913 0066 7B68     		ldr	r3, [r7, #4]
 914 0068 4022     		movs	r2, #64
ARM GAS  /tmp/ccELT73R.s 			page 32


 915 006a 0021     		movs	r1, #0
 916 006c 9954     		strb	r1, [r3, r2]
 854:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 855:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 856:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 917              		.loc 1 856 0
 918 006e 0F23     		movs	r3, #15
 919 0070 FB18     		adds	r3, r7, r3
 920 0072 1B78     		ldrb	r3, [r3]
 921              	.L44:
 857:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 922              		.loc 1 857 0
 923 0074 1800     		movs	r0, r3
 924 0076 BD46     		mov	sp, r7
 925 0078 04B0     		add	sp, sp, #16
 926              		@ sp needed
 927 007a B0BD     		pop	{r4, r5, r7, pc}
 928              	.L47:
 929              		.align	2
 930              	.L46:
 931 007c FEFEFFFF 		.word	-258
 932              		.cfi_endproc
 933              	.LFE42:
 935              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 936              		.align	1
 937              		.global	HAL_ADC_PollForConversion
 938              		.syntax unified
 939              		.code	16
 940              		.thumb_func
 941              		.fpu softvfp
 943              	HAL_ADC_PollForConversion:
 944              	.LFB43:
 858:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 859:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 860:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 861:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 862:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 863:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 864:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 865:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 866:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 867:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 868:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 869:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 870:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 871:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 872:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 873:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 874:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 875:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 876:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 877:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 878:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 945              		.loc 1 878 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 16
 948              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccELT73R.s 			page 33


 949 0000 80B5     		push	{r7, lr}
 950              		.cfi_def_cfa_offset 8
 951              		.cfi_offset 7, -8
 952              		.cfi_offset 14, -4
 953 0002 84B0     		sub	sp, sp, #16
 954              		.cfi_def_cfa_offset 24
 955 0004 00AF     		add	r7, sp, #0
 956              		.cfi_def_cfa_register 7
 957 0006 7860     		str	r0, [r7, #4]
 958 0008 3960     		str	r1, [r7]
 879:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 880:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC;
 881:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  
 882:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 883:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 884:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 885:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence */
 886:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 959              		.loc 1 886 0
 960 000a 7B68     		ldr	r3, [r7, #4]
 961 000c 5B69     		ldr	r3, [r3, #20]
 962 000e 082B     		cmp	r3, #8
 963 0010 02D1     		bne	.L49
 887:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 888:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 964              		.loc 1 888 0
 965 0012 0823     		movs	r3, #8
 966 0014 FB60     		str	r3, [r7, #12]
 967 0016 13E0     		b	.L50
 968              	.L49:
 889:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 890:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of each conversion */
 891:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 892:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 893:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 894:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* each conversion:                                                       */
 895:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 896:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 897:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 898:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 899:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 969              		.loc 1 899 0
 970 0018 7B68     		ldr	r3, [r7, #4]
 971 001a 1B68     		ldr	r3, [r3]
 972 001c DB68     		ldr	r3, [r3, #12]
 973 001e 0122     		movs	r2, #1
 974 0020 1340     		ands	r3, r2
 975 0022 0BD0     		beq	.L51
 900:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 901:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 902:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 976              		.loc 1 902 0
 977 0024 7B68     		ldr	r3, [r7, #4]
 978 0026 5B6C     		ldr	r3, [r3, #68]
 979 0028 2022     		movs	r2, #32
 980 002a 1A43     		orrs	r2, r3
 981 002c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccELT73R.s 			page 34


 982 002e 5A64     		str	r2, [r3, #68]
 903:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 904:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 905:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 983              		.loc 1 905 0
 984 0030 7B68     		ldr	r3, [r7, #4]
 985 0032 4022     		movs	r2, #64
 986 0034 0021     		movs	r1, #0
 987 0036 9954     		strb	r1, [r3, r2]
 906:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 907:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 988              		.loc 1 907 0
 989 0038 0123     		movs	r3, #1
 990 003a 6BE0     		b	.L52
 991              	.L51:
 908:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 909:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 910:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 911:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 992              		.loc 1 911 0
 993 003c 0C23     		movs	r3, #12
 994 003e FB60     		str	r3, [r7, #12]
 995              	.L50:
 912:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 913:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 914:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 915:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
 916:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 996              		.loc 1 916 0
 997 0040 FFF7FEFF 		bl	HAL_GetTick
 998 0044 0300     		movs	r3, r0
 999 0046 BB60     		str	r3, [r7, #8]
 917:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 918:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
 919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1000              		.loc 1 919 0
 1001 0048 19E0     		b	.L53
 1002              	.L55:
 920:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 921:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 922:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1003              		.loc 1 922 0
 1004 004a 3B68     		ldr	r3, [r7]
 1005 004c 0133     		adds	r3, r3, #1
 1006 004e 16D0     		beq	.L53
 923:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 924:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 1007              		.loc 1 924 0
 1008 0050 3B68     		ldr	r3, [r7]
 1009 0052 002B     		cmp	r3, #0
 1010 0054 07D0     		beq	.L54
 1011              		.loc 1 924 0 is_stmt 0 discriminator 1
 1012 0056 FFF7FEFF 		bl	HAL_GetTick
 1013 005a 0200     		movs	r2, r0
 1014 005c BB68     		ldr	r3, [r7, #8]
 1015 005e D31A     		subs	r3, r2, r3
 1016 0060 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccELT73R.s 			page 35


 1017 0062 9A42     		cmp	r2, r3
 1018 0064 0BD2     		bcs	.L53
 1019              	.L54:
 925:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 926:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 927:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1020              		.loc 1 927 0 is_stmt 1
 1021 0066 7B68     		ldr	r3, [r7, #4]
 1022 0068 5B6C     		ldr	r3, [r3, #68]
 1023 006a 0422     		movs	r2, #4
 1024 006c 1A43     		orrs	r2, r3
 1025 006e 7B68     		ldr	r3, [r7, #4]
 1026 0070 5A64     		str	r2, [r3, #68]
 928:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 929:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
 930:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1027              		.loc 1 930 0
 1028 0072 7B68     		ldr	r3, [r7, #4]
 1029 0074 4022     		movs	r2, #64
 1030 0076 0021     		movs	r1, #0
 1031 0078 9954     		strb	r1, [r3, r2]
 931:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 932:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
 1032              		.loc 1 932 0
 1033 007a 0323     		movs	r3, #3
 1034 007c 4AE0     		b	.L52
 1035              	.L53:
 919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1036              		.loc 1 919 0
 1037 007e 7B68     		ldr	r3, [r7, #4]
 1038 0080 1B68     		ldr	r3, [r3]
 1039 0082 1B68     		ldr	r3, [r3]
 1040 0084 FA68     		ldr	r2, [r7, #12]
 1041 0086 1340     		ands	r3, r2
 1042 0088 DFD0     		beq	.L55
 933:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 934:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 935:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 936:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 937:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update ADC state machine */
 938:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1043              		.loc 1 938 0
 1044 008a 7B68     		ldr	r3, [r7, #4]
 1045 008c 5B6C     		ldr	r3, [r3, #68]
 1046 008e 8022     		movs	r2, #128
 1047 0090 9200     		lsls	r2, r2, #2
 1048 0092 1A43     		orrs	r2, r3
 1049 0094 7B68     		ldr	r3, [r7, #4]
 1050 0096 5A64     		str	r2, [r3, #68]
 939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 940:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 941:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1051              		.loc 1 942 0
 1052 0098 7B68     		ldr	r3, [r7, #4]
 1053 009a 1B68     		ldr	r3, [r3]
 1054 009c DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccELT73R.s 			page 36


 1055 009e C023     		movs	r3, #192
 1056 00a0 1B01     		lsls	r3, r3, #4
 1057 00a2 1340     		ands	r3, r2
 1058 00a4 2DD1     		bne	.L56
 943:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1059              		.loc 1 943 0 discriminator 1
 1060 00a6 7B68     		ldr	r3, [r7, #4]
 1061 00a8 1B6A     		ldr	r3, [r3, #32]
 942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1062              		.loc 1 942 0 discriminator 1
 1063 00aa 002B     		cmp	r3, #0
 1064 00ac 29D1     		bne	.L56
 944:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 945:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 946:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1065              		.loc 1 946 0
 1066 00ae 7B68     		ldr	r3, [r7, #4]
 1067 00b0 1B68     		ldr	r3, [r3]
 1068 00b2 1B68     		ldr	r3, [r3]
 1069 00b4 0822     		movs	r2, #8
 1070 00b6 1340     		ands	r3, r2
 1071 00b8 082B     		cmp	r3, #8
 1072 00ba 22D1     		bne	.L56
 947:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 948:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 949:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 950:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1073              		.loc 1 950 0
 1074 00bc 7B68     		ldr	r3, [r7, #4]
 1075 00be 1B68     		ldr	r3, [r3]
 1076 00c0 9B68     		ldr	r3, [r3, #8]
 1077 00c2 0422     		movs	r2, #4
 1078 00c4 1340     		ands	r3, r2
 1079 00c6 10D1     		bne	.L57
 951:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 952:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 953:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 954:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 955:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 956:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 1080              		.loc 1 956 0
 1081 00c8 7B68     		ldr	r3, [r7, #4]
 1082 00ca 1B68     		ldr	r3, [r3]
 1083 00cc 5A68     		ldr	r2, [r3, #4]
 1084 00ce 7B68     		ldr	r3, [r7, #4]
 1085 00d0 1B68     		ldr	r3, [r3]
 1086 00d2 0C21     		movs	r1, #12
 1087 00d4 8A43     		bics	r2, r1
 1088 00d6 5A60     		str	r2, [r3, #4]
 957:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 958:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC state */
 959:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 1089              		.loc 1 959 0
 1090 00d8 7B68     		ldr	r3, [r7, #4]
 1091 00da 5B6C     		ldr	r3, [r3, #68]
 1092 00dc 0F4A     		ldr	r2, .L59
 1093 00de 1340     		ands	r3, r2
ARM GAS  /tmp/ccELT73R.s 			page 37


 1094 00e0 0122     		movs	r2, #1
 1095 00e2 1A43     		orrs	r2, r3
 1096 00e4 7B68     		ldr	r3, [r7, #4]
 1097 00e6 5A64     		str	r2, [r3, #68]
 1098 00e8 0BE0     		b	.L56
 1099              	.L57:
 960:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 961:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 962:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 963:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 964:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 965:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Change ADC state to error state */
 966:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1100              		.loc 1 966 0
 1101 00ea 7B68     		ldr	r3, [r7, #4]
 1102 00ec 5B6C     		ldr	r3, [r3, #68]
 1103 00ee 2022     		movs	r2, #32
 1104 00f0 1A43     		orrs	r2, r3
 1105 00f2 7B68     		ldr	r3, [r7, #4]
 1106 00f4 5A64     		str	r2, [r3, #68]
 967:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 968:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 969:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 1107              		.loc 1 969 0
 1108 00f6 7B68     		ldr	r3, [r7, #4]
 1109 00f8 9B6C     		ldr	r3, [r3, #72]
 1110 00fa 0122     		movs	r2, #1
 1111 00fc 1A43     		orrs	r2, r3
 1112 00fe 7B68     		ldr	r3, [r7, #4]
 1113 0100 9A64     		str	r2, [r3, #72]
 1114              	.L56:
 970:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 971:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 972:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 973:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 974:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 975:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 976:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 977:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 1115              		.loc 1 977 0
 1116 0102 7B68     		ldr	r3, [r7, #4]
 1117 0104 9B69     		ldr	r3, [r3, #24]
 1118 0106 002B     		cmp	r3, #0
 1119 0108 03D1     		bne	.L58
 978:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 979:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 980:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 1120              		.loc 1 980 0
 1121 010a 7B68     		ldr	r3, [r7, #4]
 1122 010c 1B68     		ldr	r3, [r3]
 1123 010e 0C22     		movs	r2, #12
 1124 0110 1A60     		str	r2, [r3]
 1125              	.L58:
 981:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 983:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
 984:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
ARM GAS  /tmp/ccELT73R.s 			page 38


 1126              		.loc 1 984 0
 1127 0112 0023     		movs	r3, #0
 1128              	.L52:
 985:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1129              		.loc 1 985 0
 1130 0114 1800     		movs	r0, r3
 1131 0116 BD46     		mov	sp, r7
 1132 0118 04B0     		add	sp, sp, #16
 1133              		@ sp needed
 1134 011a 80BD     		pop	{r7, pc}
 1135              	.L60:
 1136              		.align	2
 1137              	.L59:
 1138 011c FEFEFFFF 		.word	-258
 1139              		.cfi_endproc
 1140              	.LFE43:
 1142              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1143              		.align	1
 1144              		.global	HAL_ADC_PollForEvent
 1145              		.syntax unified
 1146              		.code	16
 1147              		.thumb_func
 1148              		.fpu softvfp
 1150              	HAL_ADC_PollForEvent:
 1151              	.LFB44:
 986:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 987:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 988:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Poll for conversion event.
 989:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 990:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  EventType the ADC event type.
 991:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          This parameter can be one of the following values:
 992:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
 993:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
 994:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 995:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 996:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 997:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1152              		.loc 1 998 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 24
 1155              		@ frame_needed = 1, uses_anonymous_args = 0
 1156 0000 80B5     		push	{r7, lr}
 1157              		.cfi_def_cfa_offset 8
 1158              		.cfi_offset 7, -8
 1159              		.cfi_offset 14, -4
 1160 0002 86B0     		sub	sp, sp, #24
 1161              		.cfi_def_cfa_offset 32
 1162 0004 00AF     		add	r7, sp, #0
 1163              		.cfi_def_cfa_register 7
 1164 0006 F860     		str	r0, [r7, #12]
 1165 0008 B960     		str	r1, [r7, #8]
 1166 000a 7A60     		str	r2, [r7, #4]
 999:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
 1167              		.loc 1 999 0
 1168 000c 0023     		movs	r3, #0
 1169 000e 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccELT73R.s 			page 39


1000:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1001:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1002:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1003:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1004:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1005:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
1006:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();   
 1170              		.loc 1 1006 0
 1171 0010 FFF7FEFF 		bl	HAL_GetTick
 1172 0014 0300     		movs	r3, r0
 1173 0016 7B61     		str	r3, [r7, #20]
1007:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1008:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check selected event flag */
1009:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1174              		.loc 1 1009 0
 1175 0018 19E0     		b	.L62
 1176              	.L65:
1010:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1011:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1012:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1177              		.loc 1 1012 0
 1178 001a 7B68     		ldr	r3, [r7, #4]
 1179 001c 0133     		adds	r3, r3, #1
 1180 001e 16D0     		beq	.L62
1013:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1014:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 1181              		.loc 1 1014 0
 1182 0020 7B68     		ldr	r3, [r7, #4]
 1183 0022 002B     		cmp	r3, #0
 1184 0024 07D0     		beq	.L63
 1185              		.loc 1 1014 0 is_stmt 0 discriminator 1
 1186 0026 FFF7FEFF 		bl	HAL_GetTick
 1187 002a 0200     		movs	r2, r0
 1188 002c 7B69     		ldr	r3, [r7, #20]
 1189 002e D31A     		subs	r3, r2, r3
 1190 0030 7A68     		ldr	r2, [r7, #4]
 1191 0032 9A42     		cmp	r2, r3
 1192 0034 0BD2     		bcs	.L62
 1193              	.L63:
1015:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1016:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1017:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1194              		.loc 1 1017 0 is_stmt 1
 1195 0036 FB68     		ldr	r3, [r7, #12]
 1196 0038 5B6C     		ldr	r3, [r3, #68]
 1197 003a 0422     		movs	r2, #4
 1198 003c 1A43     		orrs	r2, r3
 1199 003e FB68     		ldr	r3, [r7, #12]
 1200 0040 5A64     		str	r2, [r3, #68]
1018:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1019:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
1020:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1201              		.loc 1 1020 0
 1202 0042 FB68     		ldr	r3, [r7, #12]
 1203 0044 4022     		movs	r2, #64
 1204 0046 0021     		movs	r1, #0
 1205 0048 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/ccELT73R.s 			page 40


1021:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1022:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
 1206              		.loc 1 1022 0
 1207 004a 0323     		movs	r3, #3
 1208 004c 2DE0     		b	.L64
 1209              	.L62:
1009:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1210              		.loc 1 1009 0
 1211 004e FB68     		ldr	r3, [r7, #12]
 1212 0050 1B68     		ldr	r3, [r3]
 1213 0052 1B68     		ldr	r3, [r3]
 1214 0054 BA68     		ldr	r2, [r7, #8]
 1215 0056 1340     		ands	r3, r2
 1216 0058 BA68     		ldr	r2, [r7, #8]
 1217 005a 9A42     		cmp	r2, r3
 1218 005c DDD1     		bne	.L65
1023:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1024:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1025:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1026:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1027:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   switch(EventType)
 1219              		.loc 1 1027 0
 1220 005e BB68     		ldr	r3, [r7, #8]
 1221 0060 802B     		cmp	r3, #128
 1222 0062 0BD1     		bne	.L70
1028:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1029:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1030:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1031:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
1032:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1223              		.loc 1 1032 0
 1224 0064 FB68     		ldr	r3, [r7, #12]
 1225 0066 5B6C     		ldr	r3, [r3, #68]
 1226 0068 8022     		movs	r2, #128
 1227 006a 5202     		lsls	r2, r2, #9
 1228 006c 1A43     		orrs	r2, r3
 1229 006e FB68     		ldr	r3, [r7, #12]
 1230 0070 5A64     		str	r2, [r3, #68]
1033:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1034:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1035:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1231              		.loc 1 1035 0
 1232 0072 FB68     		ldr	r3, [r7, #12]
 1233 0074 1B68     		ldr	r3, [r3]
 1234 0076 8022     		movs	r2, #128
 1235 0078 1A60     		str	r2, [r3]
1036:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1236              		.loc 1 1036 0
 1237 007a 15E0     		b	.L68
 1238              	.L70:
1037:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1038:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Overrun event */
1039:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1040:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1041:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* considered as an error.                                                */
1042:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1043:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
ARM GAS  /tmp/ccELT73R.s 			page 41


1044:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 1239              		.loc 1 1044 0
 1240 007c FB68     		ldr	r3, [r7, #12]
 1241 007e 5B6B     		ldr	r3, [r3, #52]
 1242 0080 012B     		cmp	r3, #1
 1243 0082 0CD1     		bne	.L69
1045:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1046:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1047:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 1244              		.loc 1 1047 0
 1245 0084 FB68     		ldr	r3, [r7, #12]
 1246 0086 5B6C     		ldr	r3, [r3, #68]
 1247 0088 8022     		movs	r2, #128
 1248 008a D200     		lsls	r2, r2, #3
 1249 008c 1A43     		orrs	r2, r3
 1250 008e FB68     		ldr	r3, [r7, #12]
 1251 0090 5A64     		str	r2, [r3, #68]
1048:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1049:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1050:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 1252              		.loc 1 1050 0
 1253 0092 FB68     		ldr	r3, [r7, #12]
 1254 0094 9B6C     		ldr	r3, [r3, #72]
 1255 0096 0222     		movs	r2, #2
 1256 0098 1A43     		orrs	r2, r3
 1257 009a FB68     		ldr	r3, [r7, #12]
 1258 009c 9A64     		str	r2, [r3, #72]
 1259              	.L69:
1051:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1052:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1053:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1054:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 1260              		.loc 1 1054 0
 1261 009e FB68     		ldr	r3, [r7, #12]
 1262 00a0 1B68     		ldr	r3, [r3]
 1263 00a2 1022     		movs	r2, #16
 1264 00a4 1A60     		str	r2, [r3]
1055:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1265              		.loc 1 1055 0
 1266 00a6 C046     		nop
 1267              	.L68:
1056:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1057:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1058:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1059:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 1268              		.loc 1 1059 0
 1269 00a8 0023     		movs	r3, #0
 1270              	.L64:
1060:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1271              		.loc 1 1060 0
 1272 00aa 1800     		movs	r0, r3
 1273 00ac BD46     		mov	sp, r7
 1274 00ae 06B0     		add	sp, sp, #24
 1275              		@ sp needed
 1276 00b0 80BD     		pop	{r7, pc}
 1277              		.cfi_endproc
 1278              	.LFE44:
ARM GAS  /tmp/ccELT73R.s 			page 42


 1280              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1281              		.align	1
 1282              		.global	HAL_ADC_Start_IT
 1283              		.syntax unified
 1284              		.code	16
 1285              		.thumb_func
 1286              		.fpu softvfp
 1288              	HAL_ADC_Start_IT:
 1289              	.LFB45:
1061:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1062:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1063:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1064:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1065:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - EOC (end of conversion of regular group) or EOS (end of 
1066:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence of regular group) depending on ADC initialization 
1067:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            parameter "EOCSelection"
1068:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun (if available)
1069:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1070:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1071:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1072:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1073:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1074:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1290              		.loc 1 1074 0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 16
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294 0000 90B5     		push	{r4, r7, lr}
 1295              		.cfi_def_cfa_offset 12
 1296              		.cfi_offset 4, -12
 1297              		.cfi_offset 7, -8
 1298              		.cfi_offset 14, -4
 1299 0002 85B0     		sub	sp, sp, #20
 1300              		.cfi_def_cfa_offset 32
 1301 0004 00AF     		add	r7, sp, #0
 1302              		.cfi_def_cfa_register 7
 1303 0006 7860     		str	r0, [r7, #4]
1075:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1304              		.loc 1 1075 0
 1305 0008 0F23     		movs	r3, #15
 1306 000a FB18     		adds	r3, r7, r3
 1307 000c 0022     		movs	r2, #0
 1308 000e 1A70     		strb	r2, [r3]
1076:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1077:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1078:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1079:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1080:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1081:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1309              		.loc 1 1081 0
 1310 0010 7B68     		ldr	r3, [r7, #4]
 1311 0012 1B68     		ldr	r3, [r3]
 1312 0014 9B68     		ldr	r3, [r3, #8]
 1313 0016 0422     		movs	r2, #4
 1314 0018 1340     		ands	r3, r2
 1315 001a 56D1     		bne	.L72
1082:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
ARM GAS  /tmp/ccELT73R.s 			page 43


1083:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1316              		.loc 1 1084 0
 1317 001c 7B68     		ldr	r3, [r7, #4]
 1318 001e 4022     		movs	r2, #64
 1319 0020 9B5C     		ldrb	r3, [r3, r2]
 1320 0022 012B     		cmp	r3, #1
 1321 0024 01D1     		bne	.L73
 1322              		.loc 1 1084 0 is_stmt 0 discriminator 1
 1323 0026 0223     		movs	r3, #2
 1324 0028 56E0     		b	.L74
 1325              	.L73:
 1326              		.loc 1 1084 0 discriminator 2
 1327 002a 7B68     		ldr	r3, [r7, #4]
 1328 002c 4022     		movs	r2, #64
 1329 002e 0121     		movs	r1, #1
 1330 0030 9954     		strb	r1, [r3, r2]
1085:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
1086:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1087:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1088:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1089:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 1331              		.loc 1 1089 0 is_stmt 1 discriminator 2
 1332 0032 7B68     		ldr	r3, [r7, #4]
 1333 0034 DB69     		ldr	r3, [r3, #28]
 1334 0036 012B     		cmp	r3, #1
 1335 0038 07D0     		beq	.L75
1090:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1091:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 1336              		.loc 1 1091 0
 1337 003a 0F23     		movs	r3, #15
 1338 003c FC18     		adds	r4, r7, r3
 1339 003e 7B68     		ldr	r3, [r7, #4]
 1340 0040 1800     		movs	r0, r3
 1341 0042 FFF7FEFF 		bl	ADC_Enable
 1342 0046 0300     		movs	r3, r0
 1343 0048 2370     		strb	r3, [r4]
 1344              	.L75:
1092:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1093:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1094:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1095:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1345              		.loc 1 1095 0
 1346 004a 0F23     		movs	r3, #15
 1347 004c FB18     		adds	r3, r7, r3
 1348 004e 1B78     		ldrb	r3, [r3]
 1349 0050 002B     		cmp	r3, #0
 1350 0052 3ED1     		bne	.L80
1096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1097:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1098:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1099:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1351              		.loc 1 1100 0
 1352 0054 7B68     		ldr	r3, [r7, #4]
 1353 0056 5B6C     		ldr	r3, [r3, #68]
 1354 0058 214A     		ldr	r2, .L82
ARM GAS  /tmp/ccELT73R.s 			page 44


 1355 005a 1340     		ands	r3, r2
 1356 005c 8022     		movs	r2, #128
 1357 005e 5200     		lsls	r2, r2, #1
 1358 0060 1A43     		orrs	r2, r3
 1359 0062 7B68     		ldr	r3, [r7, #4]
 1360 0064 5A64     		str	r2, [r3, #68]
1101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1361              		.loc 1 1105 0
 1362 0066 7B68     		ldr	r3, [r7, #4]
 1363 0068 0022     		movs	r2, #0
 1364 006a 9A64     		str	r2, [r3, #72]
1106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1365              		.loc 1 1110 0
 1366 006c 7B68     		ldr	r3, [r7, #4]
 1367 006e 4022     		movs	r2, #64
 1368 0070 0021     		movs	r1, #0
 1369 0072 9954     		strb	r1, [r3, r2]
1111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1370              		.loc 1 1115 0
 1371 0074 7B68     		ldr	r3, [r7, #4]
 1372 0076 1B68     		ldr	r3, [r3]
 1373 0078 1C22     		movs	r2, #28
 1374 007a 1A60     		str	r2, [r3]
1116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
 1375              		.loc 1 1119 0
 1376 007c 7B68     		ldr	r3, [r7, #4]
 1377 007e 5B69     		ldr	r3, [r3, #20]
 1378 0080 082B     		cmp	r3, #8
 1379 0082 10D1     		bne	.L81
1120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1380              		.loc 1 1122 0
 1381 0084 7B68     		ldr	r3, [r7, #4]
 1382 0086 1B68     		ldr	r3, [r3]
 1383 0088 5A68     		ldr	r2, [r3, #4]
 1384 008a 7B68     		ldr	r3, [r7, #4]
 1385 008c 1B68     		ldr	r3, [r3]
 1386 008e 0421     		movs	r1, #4
 1387 0090 8A43     		bics	r2, r1
 1388 0092 5A60     		str	r2, [r3, #4]
1123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
ARM GAS  /tmp/ccELT73R.s 			page 45


 1389              		.loc 1 1123 0
 1390 0094 7B68     		ldr	r3, [r7, #4]
 1391 0096 1B68     		ldr	r3, [r3]
 1392 0098 5A68     		ldr	r2, [r3, #4]
 1393 009a 7B68     		ldr	r3, [r7, #4]
 1394 009c 1B68     		ldr	r3, [r3]
 1395 009e 1821     		movs	r1, #24
 1396 00a0 0A43     		orrs	r2, r1
 1397 00a2 5A60     		str	r2, [r3, #4]
1124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1398              		.loc 1 1124 0
 1399 00a4 08E0     		b	.L79
 1400              	.L81:
1125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         default:
1127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 1401              		.loc 1 1127 0
 1402 00a6 7B68     		ldr	r3, [r7, #4]
 1403 00a8 1B68     		ldr	r3, [r3]
 1404 00aa 5A68     		ldr	r2, [r3, #4]
 1405 00ac 7B68     		ldr	r3, [r7, #4]
 1406 00ae 1B68     		ldr	r3, [r3]
 1407 00b0 1C21     		movs	r1, #28
 1408 00b2 0A43     		orrs	r2, r1
 1409 00b4 5A60     		str	r2, [r3, #4]
1128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1410              		.loc 1 1128 0
 1411 00b6 C046     		nop
 1412              	.L79:
1129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 1413              		.loc 1 1135 0
 1414 00b8 7B68     		ldr	r3, [r7, #4]
 1415 00ba 1B68     		ldr	r3, [r3]
 1416 00bc 9A68     		ldr	r2, [r3, #8]
 1417 00be 7B68     		ldr	r3, [r7, #4]
 1418 00c0 1B68     		ldr	r3, [r3]
 1419 00c2 0421     		movs	r1, #4
 1420 00c4 0A43     		orrs	r2, r1
 1421 00c6 9A60     		str	r2, [r3, #8]
 1422 00c8 03E0     		b	.L80
 1423              	.L72:
1136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1424              		.loc 1 1140 0
 1425 00ca 0F23     		movs	r3, #15
 1426 00cc FB18     		adds	r3, r7, r3
 1427 00ce 0222     		movs	r2, #2
 1428 00d0 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccELT73R.s 			page 46


 1429              	.L80:
1141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
1142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1430              		.loc 1 1144 0
 1431 00d2 0F23     		movs	r3, #15
 1432 00d4 FB18     		adds	r3, r7, r3
 1433 00d6 1B78     		ldrb	r3, [r3]
 1434              	.L74:
1145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1435              		.loc 1 1145 0
 1436 00d8 1800     		movs	r0, r3
 1437 00da BD46     		mov	sp, r7
 1438 00dc 05B0     		add	sp, sp, #20
 1439              		@ sp needed
 1440 00de 90BD     		pop	{r4, r7, pc}
 1441              	.L83:
 1442              		.align	2
 1443              	.L82:
 1444 00e0 FEF0FFFF 		.word	-3842
 1445              		.cfi_endproc
 1446              	.LFE45:
 1448              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1449              		.align	1
 1450              		.global	HAL_ADC_Stop_IT
 1451              		.syntax unified
 1452              		.code	16
 1453              		.thumb_func
 1454              		.fpu softvfp
 1456              	HAL_ADC_Stop_IT:
 1457              	.LFB46:
1146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable interruption of 
1150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1458              		.loc 1 1155 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 16
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462 0000 B0B5     		push	{r4, r5, r7, lr}
 1463              		.cfi_def_cfa_offset 16
 1464              		.cfi_offset 4, -16
 1465              		.cfi_offset 5, -12
 1466              		.cfi_offset 7, -8
 1467              		.cfi_offset 14, -4
 1468 0002 84B0     		sub	sp, sp, #16
 1469              		.cfi_def_cfa_offset 32
 1470 0004 00AF     		add	r7, sp, #0
 1471              		.cfi_def_cfa_register 7
 1472 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccELT73R.s 			page 47


1156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1473              		.loc 1 1156 0
 1474 0008 0F23     		movs	r3, #15
 1475 000a FB18     		adds	r3, r7, r3
 1476 000c 0022     		movs	r2, #0
 1477 000e 1A70     		strb	r2, [r3]
1157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1478              		.loc 1 1162 0
 1479 0010 7B68     		ldr	r3, [r7, #4]
 1480 0012 4022     		movs	r2, #64
 1481 0014 9B5C     		ldrb	r3, [r3, r2]
 1482 0016 012B     		cmp	r3, #1
 1483 0018 01D1     		bne	.L85
 1484              		.loc 1 1162 0 is_stmt 0 discriminator 1
 1485 001a 0223     		movs	r3, #2
 1486 001c 32E0     		b	.L86
 1487              	.L85:
 1488              		.loc 1 1162 0 discriminator 2
 1489 001e 7B68     		ldr	r3, [r7, #4]
 1490 0020 4022     		movs	r2, #64
 1491 0022 0121     		movs	r1, #1
 1492 0024 9954     		strb	r1, [r3, r2]
1163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1493              		.loc 1 1165 0 is_stmt 1 discriminator 2
 1494 0026 0F25     		movs	r5, #15
 1495 0028 7C19     		adds	r4, r7, r5
 1496 002a 7B68     		ldr	r3, [r7, #4]
 1497 002c 1800     		movs	r0, r3
 1498 002e FFF7FEFF 		bl	ADC_ConversionStop
 1499 0032 0300     		movs	r3, r0
 1500 0034 2370     		strb	r3, [r4]
1166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1501              		.loc 1 1168 0 discriminator 2
 1502 0036 7B19     		adds	r3, r7, r5
 1503 0038 1B78     		ldrb	r3, [r3]
 1504 003a 002B     		cmp	r3, #0
 1505 003c 1BD1     		bne	.L87
1169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 1506              		.loc 1 1172 0
 1507 003e 7B68     		ldr	r3, [r7, #4]
 1508 0040 1B68     		ldr	r3, [r3]
 1509 0042 5A68     		ldr	r2, [r3, #4]
 1510 0044 7B68     		ldr	r3, [r7, #4]
 1511 0046 1B68     		ldr	r3, [r3]
 1512 0048 1C21     		movs	r1, #28
ARM GAS  /tmp/ccELT73R.s 			page 48


 1513 004a 8A43     		bics	r2, r1
 1514 004c 5A60     		str	r2, [r3, #4]
1173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 1515              		.loc 1 1175 0
 1516 004e 0F25     		movs	r5, #15
 1517 0050 7C19     		adds	r4, r7, r5
 1518 0052 7B68     		ldr	r3, [r7, #4]
 1519 0054 1800     		movs	r0, r3
 1520 0056 FFF7FEFF 		bl	ADC_Disable
 1521 005a 0300     		movs	r3, r0
 1522 005c 2370     		strb	r3, [r4]
1176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1523              		.loc 1 1178 0
 1524 005e 7B19     		adds	r3, r7, r5
 1525 0060 1B78     		ldrb	r3, [r3]
 1526 0062 002B     		cmp	r3, #0
 1527 0064 07D1     		bne	.L87
1179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1528              		.loc 1 1181 0
 1529 0066 7B68     		ldr	r3, [r7, #4]
 1530 0068 5B6C     		ldr	r3, [r3, #68]
 1531 006a 084A     		ldr	r2, .L88
 1532 006c 1340     		ands	r3, r2
 1533 006e 0122     		movs	r2, #1
 1534 0070 1A43     		orrs	r2, r3
 1535 0072 7B68     		ldr	r3, [r7, #4]
 1536 0074 5A64     		str	r2, [r3, #68]
 1537              	.L87:
1182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1538              		.loc 1 1188 0
 1539 0076 7B68     		ldr	r3, [r7, #4]
 1540 0078 4022     		movs	r2, #64
 1541 007a 0021     		movs	r1, #0
 1542 007c 9954     		strb	r1, [r3, r2]
1189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1543              		.loc 1 1191 0
 1544 007e 0F23     		movs	r3, #15
 1545 0080 FB18     		adds	r3, r7, r3
 1546 0082 1B78     		ldrb	r3, [r3]
 1547              	.L86:
1192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1548              		.loc 1 1192 0
 1549 0084 1800     		movs	r0, r3
ARM GAS  /tmp/ccELT73R.s 			page 49


 1550 0086 BD46     		mov	sp, r7
 1551 0088 04B0     		add	sp, sp, #16
 1552              		@ sp needed
 1553 008a B0BD     		pop	{r4, r5, r7, pc}
 1554              	.L89:
 1555              		.align	2
 1556              	.L88:
 1557 008c FEFEFFFF 		.word	-258
 1558              		.cfi_endproc
 1559              	.LFE46:
 1561              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1562              		.align	1
 1563              		.global	HAL_ADC_Start_DMA
 1564              		.syntax unified
 1565              		.code	16
 1566              		.thumb_func
 1567              		.fpu softvfp
 1569              	HAL_ADC_Start_DMA:
 1570              	.LFB47:
1193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         through DMA.
1197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA transfer complete
1199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA half transfer
1200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun
1201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1571              		.loc 1 1208 0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 24
 1574              		@ frame_needed = 1, uses_anonymous_args = 0
 1575 0000 90B5     		push	{r4, r7, lr}
 1576              		.cfi_def_cfa_offset 12
 1577              		.cfi_offset 4, -12
 1578              		.cfi_offset 7, -8
 1579              		.cfi_offset 14, -4
 1580 0002 87B0     		sub	sp, sp, #28
 1581              		.cfi_def_cfa_offset 40
 1582 0004 00AF     		add	r7, sp, #0
 1583              		.cfi_def_cfa_register 7
 1584 0006 F860     		str	r0, [r7, #12]
 1585 0008 B960     		str	r1, [r7, #8]
 1586 000a 7A60     		str	r2, [r7, #4]
1209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1587              		.loc 1 1209 0
 1588 000c 1723     		movs	r3, #23
 1589 000e FB18     		adds	r3, r7, r3
 1590 0010 0022     		movs	r2, #0
 1591 0012 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccELT73R.s 			page 50


1210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1592              		.loc 1 1215 0
 1593 0014 FB68     		ldr	r3, [r7, #12]
 1594 0016 1B68     		ldr	r3, [r3]
 1595 0018 9B68     		ldr	r3, [r3, #8]
 1596 001a 0422     		movs	r2, #4
 1597 001c 1340     		ands	r3, r2
 1598 001e 5ED1     		bne	.L91
1216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1599              		.loc 1 1218 0
 1600 0020 FB68     		ldr	r3, [r7, #12]
 1601 0022 4022     		movs	r2, #64
 1602 0024 9B5C     		ldrb	r3, [r3, r2]
 1603 0026 012B     		cmp	r3, #1
 1604 0028 01D1     		bne	.L92
 1605              		.loc 1 1218 0 is_stmt 0 discriminator 1
 1606 002a 0223     		movs	r3, #2
 1607 002c 5EE0     		b	.L93
 1608              	.L92:
 1609              		.loc 1 1218 0 discriminator 2
 1610 002e FB68     		ldr	r3, [r7, #12]
 1611 0030 4022     		movs	r2, #64
 1612 0032 0121     		movs	r1, #1
 1613 0034 9954     		strb	r1, [r3, r2]
1219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 1614              		.loc 1 1223 0 is_stmt 1 discriminator 2
 1615 0036 FB68     		ldr	r3, [r7, #12]
 1616 0038 DB69     		ldr	r3, [r3, #28]
 1617 003a 012B     		cmp	r3, #1
 1618 003c 07D0     		beq	.L94
1224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 1619              		.loc 1 1225 0
 1620 003e 1723     		movs	r3, #23
 1621 0040 FC18     		adds	r4, r7, r3
 1622 0042 FB68     		ldr	r3, [r7, #12]
 1623 0044 1800     		movs	r0, r3
 1624 0046 FFF7FEFF 		bl	ADC_Enable
 1625 004a 0300     		movs	r3, r0
 1626 004c 2370     		strb	r3, [r4]
 1627              	.L94:
1226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1628              		.loc 1 1229 0
ARM GAS  /tmp/ccELT73R.s 			page 51


 1629 004e 1723     		movs	r3, #23
 1630 0050 FB18     		adds	r3, r7, r3
 1631 0052 1B78     		ldrb	r3, [r3]
 1632 0054 002B     		cmp	r3, #0
 1633 0056 46D1     		bne	.L96
1230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1634              		.loc 1 1234 0
 1635 0058 FB68     		ldr	r3, [r7, #12]
 1636 005a 5B6C     		ldr	r3, [r3, #68]
 1637 005c 254A     		ldr	r2, .L97
 1638 005e 1340     		ands	r3, r2
 1639 0060 8022     		movs	r2, #128
 1640 0062 5200     		lsls	r2, r2, #1
 1641 0064 1A43     		orrs	r2, r3
 1642 0066 FB68     		ldr	r3, [r7, #12]
 1643 0068 5A64     		str	r2, [r3, #68]
1235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1644              		.loc 1 1239 0
 1645 006a FB68     		ldr	r3, [r7, #12]
 1646 006c 0022     		movs	r2, #0
 1647 006e 9A64     		str	r2, [r3, #72]
1240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1648              		.loc 1 1244 0
 1649 0070 FB68     		ldr	r3, [r7, #12]
 1650 0072 4022     		movs	r2, #64
 1651 0074 0021     		movs	r1, #0
 1652 0076 9954     		strb	r1, [r3, r2]
1245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1653              		.loc 1 1247 0
 1654 0078 FB68     		ldr	r3, [r7, #12]
 1655 007a DB6B     		ldr	r3, [r3, #60]
 1656 007c 1E4A     		ldr	r2, .L97+4
 1657 007e 9A62     		str	r2, [r3, #40]
1248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1658              		.loc 1 1250 0
 1659 0080 FB68     		ldr	r3, [r7, #12]
 1660 0082 DB6B     		ldr	r3, [r3, #60]
 1661 0084 1D4A     		ldr	r2, .L97+8
 1662 0086 DA62     		str	r2, [r3, #44]
1251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA error callback */
ARM GAS  /tmp/ccELT73R.s 			page 52


1253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1663              		.loc 1 1253 0
 1664 0088 FB68     		ldr	r3, [r7, #12]
 1665 008a DB6B     		ldr	r3, [r3, #60]
 1666 008c 1C4A     		ldr	r2, .L97+12
 1667 008e 1A63     		str	r2, [r3, #48]
1254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1668              		.loc 1 1262 0
 1669 0090 FB68     		ldr	r3, [r7, #12]
 1670 0092 1B68     		ldr	r3, [r3]
 1671 0094 1C22     		movs	r2, #28
 1672 0096 1A60     		str	r2, [r3]
1263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 1673              		.loc 1 1265 0
 1674 0098 FB68     		ldr	r3, [r7, #12]
 1675 009a 1B68     		ldr	r3, [r3]
 1676 009c 5A68     		ldr	r2, [r3, #4]
 1677 009e FB68     		ldr	r3, [r7, #12]
 1678 00a0 1B68     		ldr	r3, [r3]
 1679 00a2 1021     		movs	r1, #16
 1680 00a4 0A43     		orrs	r2, r1
 1681 00a6 5A60     		str	r2, [r3, #4]
1266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 1682              		.loc 1 1268 0
 1683 00a8 FB68     		ldr	r3, [r7, #12]
 1684 00aa 1B68     		ldr	r3, [r3]
 1685 00ac DA68     		ldr	r2, [r3, #12]
 1686 00ae FB68     		ldr	r3, [r7, #12]
 1687 00b0 1B68     		ldr	r3, [r3]
 1688 00b2 0121     		movs	r1, #1
 1689 00b4 0A43     		orrs	r2, r1
 1690 00b6 DA60     		str	r2, [r3, #12]
1269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Start the DMA channel */
1271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1691              		.loc 1 1271 0
 1692 00b8 FB68     		ldr	r3, [r7, #12]
 1693 00ba D86B     		ldr	r0, [r3, #60]
 1694 00bc FB68     		ldr	r3, [r7, #12]
 1695 00be 1B68     		ldr	r3, [r3]
 1696 00c0 4033     		adds	r3, r3, #64
 1697 00c2 1900     		movs	r1, r3
 1698 00c4 BA68     		ldr	r2, [r7, #8]
 1699 00c6 7B68     		ldr	r3, [r7, #4]
 1700 00c8 FFF7FEFF 		bl	HAL_DMA_Start_IT
ARM GAS  /tmp/ccELT73R.s 			page 53


1272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
1273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 1701              		.loc 1 1277 0
 1702 00cc FB68     		ldr	r3, [r7, #12]
 1703 00ce 1B68     		ldr	r3, [r3]
 1704 00d0 9A68     		ldr	r2, [r3, #8]
 1705 00d2 FB68     		ldr	r3, [r7, #12]
 1706 00d4 1B68     		ldr	r3, [r3]
 1707 00d6 0421     		movs	r1, #4
 1708 00d8 0A43     		orrs	r2, r1
 1709 00da 9A60     		str	r2, [r3, #8]
 1710 00dc 03E0     		b	.L96
 1711              	.L91:
1278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1712              		.loc 1 1282 0
 1713 00de 1723     		movs	r3, #23
 1714 00e0 FB18     		adds	r3, r7, r3
 1715 00e2 0222     		movs	r2, #2
 1716 00e4 1A70     		strb	r2, [r3]
 1717              	.L96:
1283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1718              		.loc 1 1286 0
 1719 00e6 1723     		movs	r3, #23
 1720 00e8 FB18     		adds	r3, r7, r3
 1721 00ea 1B78     		ldrb	r3, [r3]
 1722              	.L93:
1287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1723              		.loc 1 1287 0
 1724 00ec 1800     		movs	r0, r3
 1725 00ee BD46     		mov	sp, r7
 1726 00f0 07B0     		add	sp, sp, #28
 1727              		@ sp needed
 1728 00f2 90BD     		pop	{r4, r7, pc}
 1729              	.L98:
 1730              		.align	2
 1731              	.L97:
 1732 00f4 FEF0FFFF 		.word	-3842
 1733 00f8 00000000 		.word	ADC_DMAConvCplt
 1734 00fc 00000000 		.word	ADC_DMAHalfConvCplt
 1735 0100 00000000 		.word	ADC_DMAError
 1736              		.cfi_endproc
 1737              	.LFE47:
 1739              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1740              		.align	1
 1741              		.global	HAL_ADC_Stop_DMA
 1742              		.syntax unified
ARM GAS  /tmp/ccELT73R.s 			page 54


 1743              		.code	16
 1744              		.thumb_func
 1745              		.fpu softvfp
 1747              	HAL_ADC_Stop_DMA:
 1748              	.LFB48:
1288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC DMA transfer, disable 
1291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC peripheral.
1292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {  
 1749              		.loc 1 1297 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 16
 1752              		@ frame_needed = 1, uses_anonymous_args = 0
 1753 0000 B0B5     		push	{r4, r5, r7, lr}
 1754              		.cfi_def_cfa_offset 16
 1755              		.cfi_offset 4, -16
 1756              		.cfi_offset 5, -12
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 84B0     		sub	sp, sp, #16
 1760              		.cfi_def_cfa_offset 32
 1761 0004 00AF     		add	r7, sp, #0
 1762              		.cfi_def_cfa_register 7
 1763 0006 7860     		str	r0, [r7, #4]
1298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1764              		.loc 1 1298 0
 1765 0008 0F23     		movs	r3, #15
 1766 000a FB18     		adds	r3, r7, r3
 1767 000c 0022     		movs	r2, #0
 1768 000e 1A70     		strb	r2, [r3]
1299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1769              		.loc 1 1304 0
 1770 0010 7B68     		ldr	r3, [r7, #4]
 1771 0012 4022     		movs	r2, #64
 1772 0014 9B5C     		ldrb	r3, [r3, r2]
 1773 0016 012B     		cmp	r3, #1
 1774 0018 01D1     		bne	.L100
 1775              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1776 001a 0223     		movs	r3, #2
 1777 001c 58E0     		b	.L101
 1778              	.L100:
 1779              		.loc 1 1304 0 discriminator 2
 1780 001e 7B68     		ldr	r3, [r7, #4]
 1781 0020 4022     		movs	r2, #64
 1782 0022 0121     		movs	r1, #1
 1783 0024 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/ccELT73R.s 			page 55


1305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1784              		.loc 1 1307 0 is_stmt 1 discriminator 2
 1785 0026 0F25     		movs	r5, #15
 1786 0028 7C19     		adds	r4, r7, r5
 1787 002a 7B68     		ldr	r3, [r7, #4]
 1788 002c 1800     		movs	r0, r3
 1789 002e FFF7FEFF 		bl	ADC_ConversionStop
 1790 0032 0300     		movs	r3, r0
 1791 0034 2370     		strb	r3, [r4]
1308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1792              		.loc 1 1310 0 discriminator 2
 1793 0036 7B19     		adds	r3, r7, r5
 1794 0038 1B78     		ldrb	r3, [r3]
 1795 003a 002B     		cmp	r3, #0
 1796 003c 41D1     		bne	.L102
1311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 1797              		.loc 1 1313 0
 1798 003e 7B68     		ldr	r3, [r7, #4]
 1799 0040 1B68     		ldr	r3, [r3]
 1800 0042 DA68     		ldr	r2, [r3, #12]
 1801 0044 7B68     		ldr	r3, [r7, #4]
 1802 0046 1B68     		ldr	r3, [r3]
 1803 0048 0121     		movs	r1, #1
 1804 004a 8A43     		bics	r2, r1
 1805 004c DA60     		str	r2, [r3, #12]
1314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 1806              		.loc 1 1317 0
 1807 004e 7B68     		ldr	r3, [r7, #4]
 1808 0050 DB6B     		ldr	r3, [r3, #60]
 1809 0052 0F25     		movs	r5, #15
 1810 0054 7C19     		adds	r4, r7, r5
 1811 0056 1800     		movs	r0, r3
 1812 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 1813 005c 0300     		movs	r3, r0
 1814 005e 2370     		strb	r3, [r4]
1318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
 1815              		.loc 1 1320 0
 1816 0060 7B19     		adds	r3, r7, r5
 1817 0062 1B78     		ldrb	r3, [r3]
 1818 0064 002B     		cmp	r3, #0
 1819 0066 05D0     		beq	.L103
1321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1820              		.loc 1 1323 0
 1821 0068 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccELT73R.s 			page 56


 1822 006a 5B6C     		ldr	r3, [r3, #68]
 1823 006c 4022     		movs	r2, #64
 1824 006e 1A43     		orrs	r2, r3
 1825 0070 7B68     		ldr	r3, [r7, #4]
 1826 0072 5A64     		str	r2, [r3, #68]
 1827              	.L103:
1324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 1828              		.loc 1 1327 0
 1829 0074 7B68     		ldr	r3, [r7, #4]
 1830 0076 1B68     		ldr	r3, [r3]
 1831 0078 5A68     		ldr	r2, [r3, #4]
 1832 007a 7B68     		ldr	r3, [r7, #4]
 1833 007c 1B68     		ldr	r3, [r3]
 1834 007e 1021     		movs	r1, #16
 1835 0080 8A43     		bics	r2, r1
 1836 0082 5A60     		str	r2, [r3, #4]
1328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1837              		.loc 1 1332 0
 1838 0084 0F23     		movs	r3, #15
 1839 0086 FB18     		adds	r3, r7, r3
 1840 0088 1B78     		ldrb	r3, [r3]
 1841 008a 002B     		cmp	r3, #0
 1842 008c 08D1     		bne	.L104
1333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
 1843              		.loc 1 1334 0
 1844 008e 0F23     		movs	r3, #15
 1845 0090 FC18     		adds	r4, r7, r3
 1846 0092 7B68     		ldr	r3, [r7, #4]
 1847 0094 1800     		movs	r0, r3
 1848 0096 FFF7FEFF 		bl	ADC_Disable
 1849 009a 0300     		movs	r3, r0
 1850 009c 2370     		strb	r3, [r4]
 1851 009e 03E0     		b	.L105
 1852              	.L104:
1335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_Disable(hadc);
 1853              		.loc 1 1338 0
 1854 00a0 7B68     		ldr	r3, [r7, #4]
 1855 00a2 1800     		movs	r0, r3
 1856 00a4 FFF7FEFF 		bl	ADC_Disable
 1857              	.L105:
1339:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1340:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1341:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1858              		.loc 1 1342 0
 1859 00a8 0F23     		movs	r3, #15
ARM GAS  /tmp/ccELT73R.s 			page 57


 1860 00aa FB18     		adds	r3, r7, r3
 1861 00ac 1B78     		ldrb	r3, [r3]
 1862 00ae 002B     		cmp	r3, #0
 1863 00b0 07D1     		bne	.L102
1343:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1344:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1864              		.loc 1 1345 0
 1865 00b2 7B68     		ldr	r3, [r7, #4]
 1866 00b4 5B6C     		ldr	r3, [r3, #68]
 1867 00b6 084A     		ldr	r2, .L106
 1868 00b8 1340     		ands	r3, r2
 1869 00ba 0122     		movs	r2, #1
 1870 00bc 1A43     		orrs	r2, r3
 1871 00be 7B68     		ldr	r3, [r7, #4]
 1872 00c0 5A64     		str	r2, [r3, #68]
 1873              	.L102:
1346:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1347:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1348:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1349:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1350:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1351:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1352:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1874              		.loc 1 1353 0
 1875 00c2 7B68     		ldr	r3, [r7, #4]
 1876 00c4 4022     		movs	r2, #64
 1877 00c6 0021     		movs	r1, #0
 1878 00c8 9954     		strb	r1, [r3, r2]
1354:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1355:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1356:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1879              		.loc 1 1356 0
 1880 00ca 0F23     		movs	r3, #15
 1881 00cc FB18     		adds	r3, r7, r3
 1882 00ce 1B78     		ldrb	r3, [r3]
 1883              	.L101:
1357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1884              		.loc 1 1357 0
 1885 00d0 1800     		movs	r0, r3
 1886 00d2 BD46     		mov	sp, r7
 1887 00d4 04B0     		add	sp, sp, #16
 1888              		@ sp needed
 1889 00d6 B0BD     		pop	{r4, r5, r7, pc}
 1890              	.L107:
 1891              		.align	2
 1892              	.L106:
 1893 00d8 FEFEFFFF 		.word	-258
 1894              		.cfi_endproc
 1895              	.LFE48:
 1897              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1898              		.align	1
 1899              		.global	HAL_ADC_GetValue
 1900              		.syntax unified
 1901              		.code	16
 1902              		.thumb_func
ARM GAS  /tmp/ccELT73R.s 			page 58


 1903              		.fpu softvfp
 1905              	HAL_ADC_GetValue:
 1906              	.LFB49:
1358:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1359:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1362:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1363:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1364:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1366:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            to flag EOC.
1368:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1369:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1370:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1371:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         To clear this flag, either use function: 
1372:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1373:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1374:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1375:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1376:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1377:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1378:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1907              		.loc 1 1379 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 8
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911 0000 80B5     		push	{r7, lr}
 1912              		.cfi_def_cfa_offset 8
 1913              		.cfi_offset 7, -8
 1914              		.cfi_offset 14, -4
 1915 0002 82B0     		sub	sp, sp, #8
 1916              		.cfi_def_cfa_offset 16
 1917 0004 00AF     		add	r7, sp, #0
 1918              		.cfi_def_cfa_register 7
 1919 0006 7860     		str	r0, [r7, #4]
1380:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1381:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1382:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1383:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1384:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1385:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1386:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC converted value */ 
1387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->Instance->DR;
 1920              		.loc 1 1387 0
 1921 0008 7B68     		ldr	r3, [r7, #4]
 1922 000a 1B68     		ldr	r3, [r3]
 1923 000c 1B6C     		ldr	r3, [r3, #64]
1388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1924              		.loc 1 1388 0
 1925 000e 1800     		movs	r0, r3
 1926 0010 BD46     		mov	sp, r7
 1927 0012 02B0     		add	sp, sp, #8
 1928              		@ sp needed
 1929 0014 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccELT73R.s 			page 59


 1930              		.cfi_endproc
 1931              	.LFE49:
 1933              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1934              		.align	1
 1935              		.global	HAL_ADC_IRQHandler
 1936              		.syntax unified
 1937              		.code	16
 1938              		.thumb_func
 1939              		.fpu softvfp
 1941              	HAL_ADC_IRQHandler:
 1942              	.LFB50:
1389:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1390:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1391:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Handles ADC interrupt request.  
1392:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1393:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1395:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1943              		.loc 1 1396 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 8
 1946              		@ frame_needed = 1, uses_anonymous_args = 0
 1947 0000 80B5     		push	{r7, lr}
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 7, -8
 1950              		.cfi_offset 14, -4
 1951 0002 82B0     		sub	sp, sp, #8
 1952              		.cfi_def_cfa_offset 16
 1953 0004 00AF     		add	r7, sp, #0
 1954              		.cfi_def_cfa_register 7
 1955 0006 7860     		str	r0, [r7, #4]
1397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1398:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1399:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1401:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1402:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 1956              		.loc 1 1403 0
 1957 0008 7B68     		ldr	r3, [r7, #4]
 1958 000a 1B68     		ldr	r3, [r3]
 1959 000c 1B68     		ldr	r3, [r3]
 1960 000e 0422     		movs	r2, #4
 1961 0010 1340     		ands	r3, r2
 1962 0012 042B     		cmp	r3, #4
 1963 0014 06D1     		bne	.L111
 1964              		.loc 1 1403 0 is_stmt 0 discriminator 1
 1965 0016 7B68     		ldr	r3, [r7, #4]
 1966 0018 1B68     		ldr	r3, [r3]
 1967 001a 5B68     		ldr	r3, [r3, #4]
 1968 001c 0422     		movs	r2, #4
 1969 001e 1340     		ands	r3, r2
 1970 0020 042B     		cmp	r3, #4
 1971 0022 0DD0     		beq	.L112
 1972              	.L111:
1404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
ARM GAS  /tmp/ccELT73R.s 			page 60


 1973              		.loc 1 1404 0 is_stmt 1 discriminator 3
 1974 0024 7B68     		ldr	r3, [r7, #4]
 1975 0026 1B68     		ldr	r3, [r3]
 1976 0028 1B68     		ldr	r3, [r3]
 1977 002a 0822     		movs	r2, #8
 1978 002c 1340     		ands	r3, r2
1403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 1979              		.loc 1 1403 0 discriminator 3
 1980 002e 082B     		cmp	r3, #8
 1981 0030 4FD1     		bne	.L113
 1982              		.loc 1 1404 0
 1983 0032 7B68     		ldr	r3, [r7, #4]
 1984 0034 1B68     		ldr	r3, [r3]
 1985 0036 5B68     		ldr	r3, [r3, #4]
 1986 0038 0822     		movs	r2, #8
 1987 003a 1340     		ands	r3, r2
 1988 003c 082B     		cmp	r3, #8
 1989 003e 48D1     		bne	.L113
 1990              	.L112:
1405:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1406:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 1991              		.loc 1 1407 0
 1992 0040 7B68     		ldr	r3, [r7, #4]
 1993 0042 5B6C     		ldr	r3, [r3, #68]
 1994 0044 1022     		movs	r2, #16
 1995 0046 1340     		ands	r3, r2
 1996 0048 06D1     		bne	.L114
1408:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1409:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 1997              		.loc 1 1410 0
 1998 004a 7B68     		ldr	r3, [r7, #4]
 1999 004c 5B6C     		ldr	r3, [r3, #68]
 2000 004e 8022     		movs	r2, #128
 2001 0050 9200     		lsls	r2, r2, #2
 2002 0052 1A43     		orrs	r2, r3
 2003 0054 7B68     		ldr	r3, [r7, #4]
 2004 0056 5A64     		str	r2, [r3, #68]
 2005              	.L114:
1411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1414:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2006              		.loc 1 1415 0
 2007 0058 7B68     		ldr	r3, [r7, #4]
 2008 005a 1B68     		ldr	r3, [r3]
 2009 005c DA68     		ldr	r2, [r3, #12]
 2010 005e C023     		movs	r3, #192
 2011 0060 1B01     		lsls	r3, r3, #4
 2012 0062 1340     		ands	r3, r2
 2013 0064 2DD1     		bne	.L115
1416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2014              		.loc 1 1416 0 discriminator 1
 2015 0066 7B68     		ldr	r3, [r7, #4]
 2016 0068 1B6A     		ldr	r3, [r3, #32]
ARM GAS  /tmp/ccELT73R.s 			page 61


1415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2017              		.loc 1 1415 0 discriminator 1
 2018 006a 002B     		cmp	r3, #0
 2019 006c 29D1     		bne	.L115
1417:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1418:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 2020              		.loc 1 1419 0
 2021 006e 7B68     		ldr	r3, [r7, #4]
 2022 0070 1B68     		ldr	r3, [r3]
 2023 0072 1B68     		ldr	r3, [r3]
 2024 0074 0822     		movs	r2, #8
 2025 0076 1340     		ands	r3, r2
 2026 0078 082B     		cmp	r3, #8
 2027 007a 22D1     		bne	.L115
1420:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1421:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1422:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2028              		.loc 1 1423 0
 2029 007c 7B68     		ldr	r3, [r7, #4]
 2030 007e 1B68     		ldr	r3, [r3]
 2031 0080 9B68     		ldr	r3, [r3, #8]
 2032 0082 0422     		movs	r2, #4
 2033 0084 1340     		ands	r3, r2
 2034 0086 10D1     		bne	.L116
1424:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1426:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1427:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1428:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 2035              		.loc 1 1429 0
 2036 0088 7B68     		ldr	r3, [r7, #4]
 2037 008a 1B68     		ldr	r3, [r3]
 2038 008c 5A68     		ldr	r2, [r3, #4]
 2039 008e 7B68     		ldr	r3, [r7, #4]
 2040 0090 1B68     		ldr	r3, [r3]
 2041 0092 0C21     		movs	r1, #12
 2042 0094 8A43     		bics	r2, r1
 2043 0096 5A60     		str	r2, [r3, #4]
1430:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1431:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
1432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 2044              		.loc 1 1432 0
 2045 0098 7B68     		ldr	r3, [r7, #4]
 2046 009a 5B6C     		ldr	r3, [r3, #68]
 2047 009c 324A     		ldr	r2, .L122
 2048 009e 1340     		ands	r3, r2
 2049 00a0 0122     		movs	r2, #1
 2050 00a2 1A43     		orrs	r2, r3
 2051 00a4 7B68     		ldr	r3, [r7, #4]
 2052 00a6 5A64     		str	r2, [r3, #68]
 2053 00a8 0BE0     		b	.L115
 2054              	.L116:
1433:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1434:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
ARM GAS  /tmp/ccELT73R.s 			page 62


1435:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
1437:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1438:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
1439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2055              		.loc 1 1439 0
 2056 00aa 7B68     		ldr	r3, [r7, #4]
 2057 00ac 5B6C     		ldr	r3, [r3, #68]
 2058 00ae 2022     		movs	r2, #32
 2059 00b0 1A43     		orrs	r2, r3
 2060 00b2 7B68     		ldr	r3, [r7, #4]
 2061 00b4 5A64     		str	r2, [r3, #68]
1440:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1441:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2062              		.loc 1 1442 0
 2063 00b6 7B68     		ldr	r3, [r7, #4]
 2064 00b8 9B6C     		ldr	r3, [r3, #72]
 2065 00ba 0122     		movs	r2, #1
 2066 00bc 1A43     		orrs	r2, r3
 2067 00be 7B68     		ldr	r3, [r7, #4]
 2068 00c0 9A64     		str	r2, [r3, #72]
 2069              	.L115:
1443:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1444:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1445:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1446:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1447:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
1448:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1449:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1450:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2070              		.loc 1 1451 0
 2071 00c2 7B68     		ldr	r3, [r7, #4]
 2072 00c4 1800     		movs	r0, r3
 2073 00c6 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1452:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1453:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1454:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1455:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1456:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1457:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1458:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 2074              		.loc 1 1459 0
 2075 00ca 7B68     		ldr	r3, [r7, #4]
 2076 00cc 1B68     		ldr	r3, [r3]
 2077 00ce 0C22     		movs	r2, #12
 2078 00d0 1A60     		str	r2, [r3]
 2079              	.L113:
1460:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1461:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1462:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2080              		.loc 1 1463 0
 2081 00d2 7B68     		ldr	r3, [r7, #4]
 2082 00d4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccELT73R.s 			page 63


 2083 00d6 1B68     		ldr	r3, [r3]
 2084 00d8 8022     		movs	r2, #128
 2085 00da 1340     		ands	r3, r2
 2086 00dc 802B     		cmp	r3, #128
 2087 00de 15D1     		bne	.L117
 2088              		.loc 1 1463 0 is_stmt 0 discriminator 1
 2089 00e0 7B68     		ldr	r3, [r7, #4]
 2090 00e2 1B68     		ldr	r3, [r3]
 2091 00e4 5B68     		ldr	r3, [r3, #4]
 2092 00e6 8022     		movs	r2, #128
 2093 00e8 1340     		ands	r3, r2
 2094 00ea 802B     		cmp	r3, #128
 2095 00ec 0ED1     		bne	.L117
1464:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1465:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1466:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2096              		.loc 1 1466 0 is_stmt 1
 2097 00ee 7B68     		ldr	r3, [r7, #4]
 2098 00f0 5B6C     		ldr	r3, [r3, #68]
 2099 00f2 8022     		movs	r2, #128
 2100 00f4 5202     		lsls	r2, r2, #9
 2101 00f6 1A43     		orrs	r2, r3
 2102 00f8 7B68     		ldr	r3, [r7, #4]
 2103 00fa 5A64     		str	r2, [r3, #68]
1467:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1468:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Level out of window callback */ 
1469:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 2104              		.loc 1 1469 0
 2105 00fc 7B68     		ldr	r3, [r7, #4]
 2106 00fe 1800     		movs	r0, r3
 2107 0100 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2108              		.loc 1 1472 0
 2109 0104 7B68     		ldr	r3, [r7, #4]
 2110 0106 1B68     		ldr	r3, [r3]
 2111 0108 8022     		movs	r2, #128
 2112 010a 1A60     		str	r2, [r3]
 2113              	.L117:
1473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1476:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1477:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 2114              		.loc 1 1478 0
 2115 010c 7B68     		ldr	r3, [r7, #4]
 2116 010e 1B68     		ldr	r3, [r3]
 2117 0110 1B68     		ldr	r3, [r3]
 2118 0112 1022     		movs	r2, #16
 2119 0114 1340     		ands	r3, r2
 2120 0116 102B     		cmp	r3, #16
 2121 0118 22D1     		bne	.L121
 2122              		.loc 1 1478 0 is_stmt 0 discriminator 1
 2123 011a 7B68     		ldr	r3, [r7, #4]
 2124 011c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccELT73R.s 			page 64


 2125 011e 5B68     		ldr	r3, [r3, #4]
 2126 0120 1022     		movs	r2, #16
 2127 0122 1340     		ands	r3, r2
 2128 0124 102B     		cmp	r3, #16
 2129 0126 1BD1     		bne	.L121
1479:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1480:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1481:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1482:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1483:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1484:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1485:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* error.                                                                 */
1486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 2130              		.loc 1 1486 0 is_stmt 1
 2131 0128 7B68     		ldr	r3, [r7, #4]
 2132 012a 5B6B     		ldr	r3, [r3, #52]
 2133 012c 012B     		cmp	r3, #1
 2134 012e 05D0     		beq	.L119
1487:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2135              		.loc 1 1487 0 discriminator 1
 2136 0130 7B68     		ldr	r3, [r7, #4]
 2137 0132 1B68     		ldr	r3, [r3]
 2138 0134 DB68     		ldr	r3, [r3, #12]
 2139 0136 0122     		movs	r2, #1
 2140 0138 1340     		ands	r3, r2
1486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2141              		.loc 1 1486 0 discriminator 1
 2142 013a 0DD0     		beq	.L120
 2143              	.L119:
1488:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1489:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1490:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 2144              		.loc 1 1490 0
 2145 013c 7B68     		ldr	r3, [r7, #4]
 2146 013e 9B6C     		ldr	r3, [r3, #72]
 2147 0140 0222     		movs	r2, #2
 2148 0142 1A43     		orrs	r2, r3
 2149 0144 7B68     		ldr	r3, [r7, #4]
 2150 0146 9A64     		str	r2, [r3, #72]
1491:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1492:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 2151              		.loc 1 1493 0
 2152 0148 7B68     		ldr	r3, [r7, #4]
 2153 014a 1B68     		ldr	r3, [r3]
 2154 014c 1022     		movs	r2, #16
 2155 014e 1A60     		str	r2, [r3]
1494:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1495:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Error callback */ 
1496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
 2156              		.loc 1 1496 0
 2157 0150 7B68     		ldr	r3, [r7, #4]
 2158 0152 1800     		movs	r0, r3
 2159 0154 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2160              	.L120:
1497:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1498:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccELT73R.s 			page 65


1499:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the Overrun flag */
1500:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 2161              		.loc 1 1500 0
 2162 0158 7B68     		ldr	r3, [r7, #4]
 2163 015a 1B68     		ldr	r3, [r3]
 2164 015c 1022     		movs	r2, #16
 2165 015e 1A60     		str	r2, [r3]
 2166              	.L121:
1501:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1502:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1503:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2167              		.loc 1 1503 0
 2168 0160 C046     		nop
 2169 0162 BD46     		mov	sp, r7
 2170 0164 02B0     		add	sp, sp, #8
 2171              		@ sp needed
 2172 0166 80BD     		pop	{r7, pc}
 2173              	.L123:
 2174              		.align	2
 2175              	.L122:
 2176 0168 FEFEFFFF 		.word	-258
 2177              		.cfi_endproc
 2178              	.LFE50:
 2180              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2181              		.align	1
 2182              		.weak	HAL_ADC_ConvCpltCallback
 2183              		.syntax unified
 2184              		.code	16
 2185              		.thumb_func
 2186              		.fpu softvfp
 2188              	HAL_ADC_ConvCpltCallback:
 2189              	.LFB51:
1504:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1505:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1506:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1508:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1509:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1510:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1511:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2190              		.loc 1 1512 0
 2191              		.cfi_startproc
 2192              		@ args = 0, pretend = 0, frame = 8
 2193              		@ frame_needed = 1, uses_anonymous_args = 0
 2194 0000 80B5     		push	{r7, lr}
 2195              		.cfi_def_cfa_offset 8
 2196              		.cfi_offset 7, -8
 2197              		.cfi_offset 14, -4
 2198 0002 82B0     		sub	sp, sp, #8
 2199              		.cfi_def_cfa_offset 16
 2200 0004 00AF     		add	r7, sp, #0
 2201              		.cfi_def_cfa_register 7
 2202 0006 7860     		str	r0, [r7, #4]
1513:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1514:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1515:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccELT73R.s 			page 66


1516:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1517:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1518:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */
1519:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2203              		.loc 1 1519 0
 2204 0008 C046     		nop
 2205 000a BD46     		mov	sp, r7
 2206 000c 02B0     		add	sp, sp, #8
 2207              		@ sp needed
 2208 000e 80BD     		pop	{r7, pc}
 2209              		.cfi_endproc
 2210              	.LFE51:
 2212              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2213              		.align	1
 2214              		.weak	HAL_ADC_ConvHalfCpltCallback
 2215              		.syntax unified
 2216              		.code	16
 2217              		.thumb_func
 2218              		.fpu softvfp
 2220              	HAL_ADC_ConvHalfCpltCallback:
 2221              	.LFB52:
1520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1521:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1522:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1523:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1524:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1525:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1526:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2222              		.loc 1 1527 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 8
 2225              		@ frame_needed = 1, uses_anonymous_args = 0
 2226 0000 80B5     		push	{r7, lr}
 2227              		.cfi_def_cfa_offset 8
 2228              		.cfi_offset 7, -8
 2229              		.cfi_offset 14, -4
 2230 0002 82B0     		sub	sp, sp, #8
 2231              		.cfi_def_cfa_offset 16
 2232 0004 00AF     		add	r7, sp, #0
 2233              		.cfi_def_cfa_register 7
 2234 0006 7860     		str	r0, [r7, #4]
1528:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1529:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1530:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1531:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1532:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1533:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1534:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2235              		.loc 1 1534 0
 2236 0008 C046     		nop
 2237 000a BD46     		mov	sp, r7
 2238 000c 02B0     		add	sp, sp, #8
 2239              		@ sp needed
 2240 000e 80BD     		pop	{r7, pc}
 2241              		.cfi_endproc
 2242              	.LFE52:
ARM GAS  /tmp/ccELT73R.s 			page 67


 2244              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2245              		.align	1
 2246              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2247              		.syntax unified
 2248              		.code	16
 2249              		.thumb_func
 2250              		.fpu softvfp
 2252              	HAL_ADC_LevelOutOfWindowCallback:
 2253              	.LFB53:
1535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1536:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1537:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1538:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1539:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1540:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1541:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2254              		.loc 1 1542 0
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 8
 2257              		@ frame_needed = 1, uses_anonymous_args = 0
 2258 0000 80B5     		push	{r7, lr}
 2259              		.cfi_def_cfa_offset 8
 2260              		.cfi_offset 7, -8
 2261              		.cfi_offset 14, -4
 2262 0002 82B0     		sub	sp, sp, #8
 2263              		.cfi_def_cfa_offset 16
 2264 0004 00AF     		add	r7, sp, #0
 2265              		.cfi_def_cfa_register 7
 2266 0006 7860     		str	r0, [r7, #4]
1543:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1544:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1545:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1546:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1547:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
1548:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2267              		.loc 1 1549 0
 2268 0008 C046     		nop
 2269 000a BD46     		mov	sp, r7
 2270 000c 02B0     		add	sp, sp, #8
 2271              		@ sp needed
 2272 000e 80BD     		pop	{r7, pc}
 2273              		.cfi_endproc
 2274              	.LFE53:
 2276              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2277              		.align	1
 2278              		.weak	HAL_ADC_ErrorCallback
 2279              		.syntax unified
 2280              		.code	16
 2281              		.thumb_func
 2282              		.fpu softvfp
 2284              	HAL_ADC_ErrorCallback:
 2285              	.LFB54:
1550:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1551:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1552:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
ARM GAS  /tmp/ccELT73R.s 			page 68


1553:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1554:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1555:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1556:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1557:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1558:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2286              		.loc 1 1558 0
 2287              		.cfi_startproc
 2288              		@ args = 0, pretend = 0, frame = 8
 2289              		@ frame_needed = 1, uses_anonymous_args = 0
 2290 0000 80B5     		push	{r7, lr}
 2291              		.cfi_def_cfa_offset 8
 2292              		.cfi_offset 7, -8
 2293              		.cfi_offset 14, -4
 2294 0002 82B0     		sub	sp, sp, #8
 2295              		.cfi_def_cfa_offset 16
 2296 0004 00AF     		add	r7, sp, #0
 2297              		.cfi_def_cfa_register 7
 2298 0006 7860     		str	r0, [r7, #4]
1559:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1560:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1561:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1562:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1563:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1564:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2299              		.loc 1 1565 0
 2300 0008 C046     		nop
 2301 000a BD46     		mov	sp, r7
 2302 000c 02B0     		add	sp, sp, #8
 2303              		@ sp needed
 2304 000e 80BD     		pop	{r7, pc}
 2305              		.cfi_endproc
 2306              	.LFE54:
 2308              		.global	__aeabi_uidiv
 2309              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2310              		.align	1
 2311              		.global	HAL_ADC_ConfigChannel
 2312              		.syntax unified
 2313              		.code	16
 2314              		.thumb_func
 2315              		.fpu softvfp
 2317              	HAL_ADC_ConfigChannel:
 2318              	.LFB55:
1566:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1567:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1568:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1569:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1570:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1571:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1572:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1573:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1574:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1575:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
1576:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1577:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1578:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
ARM GAS  /tmp/ccELT73R.s 			page 69


1579:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1580:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure channels on regular group
1581:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure the analog watchdog
1582:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1583:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1584:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1585:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1586:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1587:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1588:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1589:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         group.
1590:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1591:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         VrefInt/Vbat/TempSensor.
1592:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1593:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1594:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         setting).
1595:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1596:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         TS_vbat, TS_temp (values rough order: 5us to 17us).
1597:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1598:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1599:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1600:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1601:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1602:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1603:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1604:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1605:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1606:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1607:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1608:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel for regular group.
1609:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1610:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1611:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1612:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2319              		.loc 1 1612 0
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 16
 2322              		@ frame_needed = 1, uses_anonymous_args = 0
 2323 0000 80B5     		push	{r7, lr}
 2324              		.cfi_def_cfa_offset 8
 2325              		.cfi_offset 7, -8
 2326              		.cfi_offset 14, -4
 2327 0002 84B0     		sub	sp, sp, #16
 2328              		.cfi_def_cfa_offset 24
 2329 0004 00AF     		add	r7, sp, #0
 2330              		.cfi_def_cfa_register 7
 2331 0006 7860     		str	r0, [r7, #4]
 2332 0008 3960     		str	r1, [r7]
1613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2333              		.loc 1 1613 0
 2334 000a 0F23     		movs	r3, #15
 2335 000c FB18     		adds	r3, r7, r3
 2336 000e 0022     		movs	r2, #0
 2337 0010 1A70     		strb	r2, [r3]
1614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2338              		.loc 1 1614 0
 2339 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccELT73R.s 			page 70


 2340 0014 BB60     		str	r3, [r7, #8]
1615:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1616:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1617:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1618:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1619:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1620:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 2341              		.loc 1 1621 0
 2342 0016 7B68     		ldr	r3, [r7, #4]
 2343 0018 9A6B     		ldr	r2, [r3, #56]
 2344 001a 8023     		movs	r3, #128
 2345 001c 5B05     		lsls	r3, r3, #21
 2346 001e 9A42     		cmp	r2, r3
 2347 0020 11D0     		beq	.L129
 2348              		.loc 1 1621 0 is_stmt 0 discriminator 1
 2349 0022 7B68     		ldr	r3, [r7, #4]
 2350 0024 9B6B     		ldr	r3, [r3, #56]
 2351 0026 012B     		cmp	r3, #1
 2352 0028 0DD0     		beq	.L129
 2353              		.loc 1 1621 0 discriminator 2
 2354 002a 7B68     		ldr	r3, [r7, #4]
 2355 002c 9B6B     		ldr	r3, [r3, #56]
 2356 002e 022B     		cmp	r3, #2
 2357 0030 09D0     		beq	.L129
 2358              		.loc 1 1621 0 discriminator 3
 2359 0032 7B68     		ldr	r3, [r7, #4]
 2360 0034 9B6B     		ldr	r3, [r3, #56]
 2361 0036 032B     		cmp	r3, #3
 2362 0038 05D0     		beq	.L129
 2363              		.loc 1 1621 0 discriminator 4
 2364 003a 7B68     		ldr	r3, [r7, #4]
 2365 003c 9B6B     		ldr	r3, [r3, #56]
 2366 003e 042B     		cmp	r3, #4
 2367 0040 01D0     		beq	.L129
 2368              		.loc 1 1621 0 discriminator 5
 2369 0042 7B68     		ldr	r3, [r7, #4]
 2370 0044 9B6B     		ldr	r3, [r3, #56]
 2371              	.L129:
1622:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1623:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1624:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1625:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1626:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2372              		.loc 1 1627 0 is_stmt 1
 2373 0046 7B68     		ldr	r3, [r7, #4]
 2374 0048 4022     		movs	r2, #64
 2375 004a 9B5C     		ldrb	r3, [r3, r2]
 2376 004c 012B     		cmp	r3, #1
 2377 004e 01D1     		bne	.L130
 2378              		.loc 1 1627 0 is_stmt 0 discriminator 1
 2379 0050 0223     		movs	r3, #2
 2380 0052 D0E0     		b	.L131
 2381              	.L130:
 2382              		.loc 1 1627 0 discriminator 2
 2383 0054 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccELT73R.s 			page 71


 2384 0056 4022     		movs	r2, #64
 2385 0058 0121     		movs	r1, #1
 2386 005a 9954     		strb	r1, [r3, r2]
1628:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1629:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1630:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1631:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1632:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel number                                                        */
1633:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel sampling time                                                 */
1634:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
1635:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2387              		.loc 1 1635 0 is_stmt 1 discriminator 2
 2388 005c 7B68     		ldr	r3, [r7, #4]
 2389 005e 1B68     		ldr	r3, [r3]
 2390 0060 9B68     		ldr	r3, [r3, #8]
 2391 0062 0422     		movs	r2, #4
 2392 0064 1340     		ands	r3, r2
 2393 0066 00D0     		beq	.LCB2086
 2394 0068 B4E0     		b	.L132	@long jump
 2395              	.LCB2086:
1636:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1637:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
1638:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC conversion sequencer.                                              */
1639:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (sConfig->Rank != ADC_RANK_NONE)
 2396              		.loc 1 1639 0
 2397 006a 3B68     		ldr	r3, [r7]
 2398 006c 5B68     		ldr	r3, [r3, #4]
 2399 006e 644A     		ldr	r2, .L149
 2400 0070 9342     		cmp	r3, r2
 2401 0072 00D1     		bne	.LCB2091
 2402 0074 82E0     		b	.L133	@long jump
 2403              	.LCB2091:
1640:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1641:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1642:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the channel selection register from the selected channel */
1643:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 2404              		.loc 1 1643 0
 2405 0076 7B68     		ldr	r3, [r7, #4]
 2406 0078 1B68     		ldr	r3, [r3]
 2407 007a 996A     		ldr	r1, [r3, #40]
 2408 007c 3B68     		ldr	r3, [r7]
 2409 007e 1B68     		ldr	r3, [r3]
 2410 0080 0122     		movs	r2, #1
 2411 0082 9A40     		lsls	r2, r2, r3
 2412 0084 7B68     		ldr	r3, [r7, #4]
 2413 0086 1B68     		ldr	r3, [r3]
 2414 0088 0A43     		orrs	r2, r1
 2415 008a 9A62     		str	r2, [r3, #40]
1644:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1645:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
1646:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
1647:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (obsolete): sampling time set in this function with                  */
1648:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameter "SamplingTime" (obsolete) only if not already set into     */
1649:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADC initialization structure with parameter "SamplingTimeCommon".    */
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 2416              		.loc 1 1650 0
 2417 008c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccELT73R.s 			page 72


 2418 008e 9A6B     		ldr	r2, [r3, #56]
 2419 0090 8023     		movs	r3, #128
 2420 0092 5B05     		lsls	r3, r3, #21
 2421 0094 9A42     		cmp	r2, r3
 2422 0096 37D0     		beq	.L134
 2423              		.loc 1 1650 0 is_stmt 0 discriminator 1
 2424 0098 7B68     		ldr	r3, [r7, #4]
 2425 009a 9B6B     		ldr	r3, [r3, #56]
 2426 009c 012B     		cmp	r3, #1
 2427 009e 33D0     		beq	.L134
 2428              		.loc 1 1650 0 discriminator 2
 2429 00a0 7B68     		ldr	r3, [r7, #4]
 2430 00a2 9B6B     		ldr	r3, [r3, #56]
 2431 00a4 022B     		cmp	r3, #2
 2432 00a6 2FD0     		beq	.L134
 2433              		.loc 1 1650 0 discriminator 3
 2434 00a8 7B68     		ldr	r3, [r7, #4]
 2435 00aa 9B6B     		ldr	r3, [r3, #56]
 2436 00ac 032B     		cmp	r3, #3
 2437 00ae 2BD0     		beq	.L134
 2438              		.loc 1 1650 0 discriminator 4
 2439 00b0 7B68     		ldr	r3, [r7, #4]
 2440 00b2 9B6B     		ldr	r3, [r3, #56]
 2441 00b4 042B     		cmp	r3, #4
 2442 00b6 27D0     		beq	.L134
 2443              		.loc 1 1650 0 discriminator 5
 2444 00b8 7B68     		ldr	r3, [r7, #4]
 2445 00ba 9B6B     		ldr	r3, [r3, #56]
 2446 00bc 052B     		cmp	r3, #5
 2447 00be 23D0     		beq	.L134
 2448              		.loc 1 1650 0 discriminator 6
 2449 00c0 7B68     		ldr	r3, [r7, #4]
 2450 00c2 9B6B     		ldr	r3, [r3, #56]
 2451 00c4 062B     		cmp	r3, #6
 2452 00c6 1FD0     		beq	.L134
 2453              		.loc 1 1650 0 discriminator 7
 2454 00c8 7B68     		ldr	r3, [r7, #4]
 2455 00ca 9B6B     		ldr	r3, [r3, #56]
 2456 00cc 072B     		cmp	r3, #7
 2457 00ce 1BD0     		beq	.L134
1651:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1652:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Modify sampling time if needed (not needed in case of reoccurrence */
1653:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* for several channels programmed consecutively into the sequencer)  */
1654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 2458              		.loc 1 1654 0 is_stmt 1
 2459 00d0 3B68     		ldr	r3, [r7]
 2460 00d2 9A68     		ldr	r2, [r3, #8]
 2461 00d4 7B68     		ldr	r3, [r7, #4]
 2462 00d6 1B68     		ldr	r3, [r3]
 2463 00d8 5B69     		ldr	r3, [r3, #20]
 2464 00da 0721     		movs	r1, #7
 2465 00dc 0B40     		ands	r3, r1
 2466 00de 9A42     		cmp	r2, r3
 2467 00e0 12D0     		beq	.L134
1655:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1656:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Channel sampling time configuration */
1657:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Clear the old sample time */
ARM GAS  /tmp/ccELT73R.s 			page 73


1658:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 2468              		.loc 1 1658 0
 2469 00e2 7B68     		ldr	r3, [r7, #4]
 2470 00e4 1B68     		ldr	r3, [r3]
 2471 00e6 5A69     		ldr	r2, [r3, #20]
 2472 00e8 7B68     		ldr	r3, [r7, #4]
 2473 00ea 1B68     		ldr	r3, [r3]
 2474 00ec 0721     		movs	r1, #7
 2475 00ee 8A43     		bics	r2, r1
 2476 00f0 5A61     		str	r2, [r3, #20]
1659:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1660:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set the new sample time */
1661:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 2477              		.loc 1 1661 0
 2478 00f2 7B68     		ldr	r3, [r7, #4]
 2479 00f4 1B68     		ldr	r3, [r3]
 2480 00f6 5969     		ldr	r1, [r3, #20]
 2481 00f8 3B68     		ldr	r3, [r7]
 2482 00fa 9B68     		ldr	r3, [r3, #8]
 2483 00fc 0722     		movs	r2, #7
 2484 00fe 1A40     		ands	r2, r3
 2485 0100 7B68     		ldr	r3, [r7, #4]
 2486 0102 1B68     		ldr	r3, [r3]
 2487 0104 0A43     		orrs	r2, r1
 2488 0106 5A61     		str	r2, [r3, #20]
 2489              	.L134:
1662:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1663:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1664:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1665:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1666:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
1667:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
1668:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
1669:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
1670:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
1671:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 2490              		.loc 1 1671 0
 2491 0108 3B68     		ldr	r3, [r7]
 2492 010a 1B68     		ldr	r3, [r3]
 2493 010c 102B     		cmp	r3, #16
 2494 010e 07D0     		beq	.L135
 2495              		.loc 1 1671 0 is_stmt 0 discriminator 1
 2496 0110 3B68     		ldr	r3, [r7]
 2497 0112 1B68     		ldr	r3, [r3]
 2498 0114 112B     		cmp	r3, #17
 2499 0116 03D0     		beq	.L135
 2500              		.loc 1 1671 0 discriminator 2
 2501 0118 3B68     		ldr	r3, [r7]
 2502 011a 1B68     		ldr	r3, [r3]
 2503 011c 122B     		cmp	r3, #18
 2504 011e 63D1     		bne	.L148
 2505              	.L135:
1672:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1673:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path. */
1674:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, enable VREFINT measurement path. */
1675:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, enable VBAT measurement path. */
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
ARM GAS  /tmp/ccELT73R.s 			page 74


 2506              		.loc 1 1676 0 is_stmt 1
 2507 0120 384B     		ldr	r3, .L149+4
 2508 0122 1968     		ldr	r1, [r3]
 2509 0124 3B68     		ldr	r3, [r7]
 2510 0126 1B68     		ldr	r3, [r3]
 2511 0128 102B     		cmp	r3, #16
 2512 012a 09D0     		beq	.L137
 2513              		.loc 1 1676 0 is_stmt 0 discriminator 1
 2514 012c 3B68     		ldr	r3, [r7]
 2515 012e 1B68     		ldr	r3, [r3]
 2516 0130 112B     		cmp	r3, #17
 2517 0132 02D1     		bne	.L138
 2518              		.loc 1 1676 0 discriminator 3
 2519 0134 8023     		movs	r3, #128
 2520 0136 DB03     		lsls	r3, r3, #15
 2521 0138 04E0     		b	.L140
 2522              	.L138:
 2523              		.loc 1 1676 0 discriminator 4
 2524 013a 8023     		movs	r3, #128
 2525 013c 5B04     		lsls	r3, r3, #17
 2526 013e 01E0     		b	.L140
 2527              	.L137:
 2528              		.loc 1 1676 0 discriminator 2
 2529 0140 8023     		movs	r3, #128
 2530 0142 1B04     		lsls	r3, r3, #16
 2531              	.L140:
 2532              		.loc 1 1676 0 discriminator 8
 2533 0144 2F4A     		ldr	r2, .L149+4
 2534 0146 0B43     		orrs	r3, r1
 2535 0148 1360     		str	r3, [r2]
1677:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1678:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Temp. sensor is selected, wait for stabilization delay */
1679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 2536              		.loc 1 1679 0 is_stmt 1 discriminator 8
 2537 014a 3B68     		ldr	r3, [r7]
 2538 014c 1B68     		ldr	r3, [r3]
 2539 014e 102B     		cmp	r3, #16
 2540 0150 4AD1     		bne	.L148
1680:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1681:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1682:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1683:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2541              		.loc 1 1683 0
 2542 0152 2D4B     		ldr	r3, .L149+8
 2543 0154 1B68     		ldr	r3, [r3]
 2544 0156 2D49     		ldr	r1, .L149+12
 2545 0158 1800     		movs	r0, r3
 2546 015a FFF7FEFF 		bl	__aeabi_uidiv
 2547              	.LVL0:
 2548 015e 0300     		movs	r3, r0
 2549 0160 1A00     		movs	r2, r3
 2550 0162 1300     		movs	r3, r2
 2551 0164 9B00     		lsls	r3, r3, #2
 2552 0166 9B18     		adds	r3, r3, r2
 2553 0168 5B00     		lsls	r3, r3, #1
 2554 016a BB60     		str	r3, [r7, #8]
1684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
ARM GAS  /tmp/ccELT73R.s 			page 75


 2555              		.loc 1 1684 0
 2556 016c 02E0     		b	.L141
 2557              	.L142:
1685:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
1686:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             wait_loop_index--;
 2558              		.loc 1 1686 0
 2559 016e BB68     		ldr	r3, [r7, #8]
 2560 0170 013B     		subs	r3, r3, #1
 2561 0172 BB60     		str	r3, [r7, #8]
 2562              	.L141:
1684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2563              		.loc 1 1684 0
 2564 0174 BB68     		ldr	r3, [r7, #8]
 2565 0176 002B     		cmp	r3, #0
 2566 0178 F9D1     		bne	.L142
 2567 017a 35E0     		b	.L148
 2568              	.L133:
1687:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
1688:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1689:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1690:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1691:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1692:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1693:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1694:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset the channel selection register from the selected channel */
1695:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 2569              		.loc 1 1695 0
 2570 017c 7B68     		ldr	r3, [r7, #4]
 2571 017e 1B68     		ldr	r3, [r3]
 2572 0180 9A6A     		ldr	r2, [r3, #40]
 2573 0182 3B68     		ldr	r3, [r7]
 2574 0184 1B68     		ldr	r3, [r3]
 2575 0186 0121     		movs	r1, #1
 2576 0188 9940     		lsls	r1, r1, r3
 2577 018a 0B00     		movs	r3, r1
 2578 018c D943     		mvns	r1, r3
 2579 018e 7B68     		ldr	r3, [r7, #4]
 2580 0190 1B68     		ldr	r3, [r3]
 2581 0192 0A40     		ands	r2, r1
 2582 0194 9A62     		str	r2, [r3, #40]
1696:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1697:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1698:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths disable: If internal channel selected,    */
1699:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* disable dedicated internal buffers and path.                         */
1700:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 2583              		.loc 1 1700 0
 2584 0196 3B68     		ldr	r3, [r7]
 2585 0198 1B68     		ldr	r3, [r3]
 2586 019a 102B     		cmp	r3, #16
 2587 019c 07D0     		beq	.L143
 2588              		.loc 1 1700 0 is_stmt 0 discriminator 1
 2589 019e 3B68     		ldr	r3, [r7]
 2590 01a0 1B68     		ldr	r3, [r3]
 2591 01a2 112B     		cmp	r3, #17
 2592 01a4 03D0     		beq	.L143
 2593              		.loc 1 1700 0 discriminator 2
 2594 01a6 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccELT73R.s 			page 76


 2595 01a8 1B68     		ldr	r3, [r3]
 2596 01aa 122B     		cmp	r3, #18
 2597 01ac 1CD1     		bne	.L148
 2598              	.L143:
1701:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1702:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, disable Temp. sensor measurement path. */
1703:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, disable VREFINT measurement path. */
1704:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, disable VBAT measurement path. */
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 2599              		.loc 1 1705 0 is_stmt 1
 2600 01ae 154B     		ldr	r3, .L149+4
 2601 01b0 1968     		ldr	r1, [r3]
 2602 01b2 3B68     		ldr	r3, [r7]
 2603 01b4 1B68     		ldr	r3, [r3]
 2604 01b6 102B     		cmp	r3, #16
 2605 01b8 07D0     		beq	.L144
 2606              		.loc 1 1705 0 is_stmt 0 discriminator 1
 2607 01ba 3B68     		ldr	r3, [r7]
 2608 01bc 1B68     		ldr	r3, [r3]
 2609 01be 112B     		cmp	r3, #17
 2610 01c0 01D1     		bne	.L145
 2611              		.loc 1 1705 0 discriminator 3
 2612 01c2 134B     		ldr	r3, .L149+16
 2613 01c4 02E0     		b	.L147
 2614              	.L145:
 2615              		.loc 1 1705 0 discriminator 4
 2616 01c6 134B     		ldr	r3, .L149+20
 2617 01c8 00E0     		b	.L147
 2618              	.L144:
 2619              		.loc 1 1705 0 discriminator 2
 2620 01ca 134B     		ldr	r3, .L149+24
 2621              	.L147:
 2622              		.loc 1 1705 0 discriminator 8
 2623 01cc 0D4A     		ldr	r2, .L149+4
 2624 01ce 0B40     		ands	r3, r1
 2625 01d0 1360     		str	r3, [r2]
 2626 01d2 09E0     		b	.L148
 2627              	.L132:
1706:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1707:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1708:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1709:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1710:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1711:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
1712:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
1713:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* parameters.                                                              */
1714:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1715:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1716:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2628              		.loc 1 1717 0 is_stmt 1
 2629 01d4 7B68     		ldr	r3, [r7, #4]
 2630 01d6 5B6C     		ldr	r3, [r3, #68]
 2631 01d8 2022     		movs	r2, #32
 2632 01da 1A43     		orrs	r2, r3
 2633 01dc 7B68     		ldr	r3, [r7, #4]
 2634 01de 5A64     		str	r2, [r3, #68]
ARM GAS  /tmp/ccELT73R.s 			page 77


1718:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1719:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2635              		.loc 1 1719 0
 2636 01e0 0F23     		movs	r3, #15
 2637 01e2 FB18     		adds	r3, r7, r3
 2638 01e4 0122     		movs	r2, #1
 2639 01e6 1A70     		strb	r2, [r3]
 2640              	.L148:
1720:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1721:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1722:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1723:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2641              		.loc 1 1723 0
 2642 01e8 7B68     		ldr	r3, [r7, #4]
 2643 01ea 4022     		movs	r2, #64
 2644 01ec 0021     		movs	r1, #0
 2645 01ee 9954     		strb	r1, [r3, r2]
1724:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1725:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1726:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 2646              		.loc 1 1726 0
 2647 01f0 0F23     		movs	r3, #15
 2648 01f2 FB18     		adds	r3, r7, r3
 2649 01f4 1B78     		ldrb	r3, [r3]
 2650              	.L131:
1727:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2651              		.loc 1 1727 0
 2652 01f6 1800     		movs	r0, r3
 2653 01f8 BD46     		mov	sp, r7
 2654 01fa 04B0     		add	sp, sp, #16
 2655              		@ sp needed
 2656 01fc 80BD     		pop	{r7, pc}
 2657              	.L150:
 2658 01fe C046     		.align	2
 2659              	.L149:
 2660 0200 01100000 		.word	4097
 2661 0204 08270140 		.word	1073817352
 2662 0208 00000000 		.word	SystemCoreClock
 2663 020c 40420F00 		.word	1000000
 2664 0210 FFFFBFFF 		.word	-4194305
 2665 0214 FFFFFFFE 		.word	-16777217
 2666 0218 FFFF7FFF 		.word	-8388609
 2667              		.cfi_endproc
 2668              	.LFE55:
 2670              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2671              		.align	1
 2672              		.global	HAL_ADC_AnalogWDGConfig
 2673              		.syntax unified
 2674              		.code	16
 2675              		.thumb_func
 2676              		.fpu softvfp
 2678              	HAL_ADC_AnalogWDGConfig:
 2679              	.LFB56:
1728:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1729:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1730:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1731:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
ARM GAS  /tmp/ccELT73R.s 			page 78


1732:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1733:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, following  
1734:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1735:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without reseting 
1736:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1737:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1738:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1739:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1740:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1741:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
1742:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1743:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1744:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1745:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2680              		.loc 1 1745 0
 2681              		.cfi_startproc
 2682              		@ args = 0, pretend = 0, frame = 24
 2683              		@ frame_needed = 1, uses_anonymous_args = 0
 2684 0000 80B5     		push	{r7, lr}
 2685              		.cfi_def_cfa_offset 8
 2686              		.cfi_offset 7, -8
 2687              		.cfi_offset 14, -4
 2688 0002 86B0     		sub	sp, sp, #24
 2689              		.cfi_def_cfa_offset 32
 2690 0004 00AF     		add	r7, sp, #0
 2691              		.cfi_def_cfa_register 7
 2692 0006 7860     		str	r0, [r7, #4]
 2693 0008 3960     		str	r1, [r7]
1746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2694              		.loc 1 1746 0
 2695 000a 1723     		movs	r3, #23
 2696 000c FB18     		adds	r3, r7, r3
 2697 000e 0022     		movs	r2, #0
 2698 0010 1A70     		strb	r2, [r3]
1747:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1748:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1749:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1750:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1751:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1752:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1753:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1754:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1755:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1756:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1757:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1758:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1759:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1760:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1761:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1762:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1763:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1764:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1765:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2699              		.loc 1 1766 0
 2700 0012 7B68     		ldr	r3, [r7, #4]
 2701 0014 4022     		movs	r2, #64
ARM GAS  /tmp/ccELT73R.s 			page 79


 2702 0016 9B5C     		ldrb	r3, [r3, r2]
 2703 0018 012B     		cmp	r3, #1
 2704 001a 01D1     		bne	.L152
 2705              		.loc 1 1766 0 is_stmt 0 discriminator 1
 2706 001c 0223     		movs	r3, #2
 2707 001e 74E0     		b	.L153
 2708              	.L152:
 2709              		.loc 1 1766 0 discriminator 2
 2710 0020 7B68     		ldr	r3, [r7, #4]
 2711 0022 4022     		movs	r2, #64
 2712 0024 0121     		movs	r1, #1
 2713 0026 9954     		strb	r1, [r3, r2]
1767:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1768:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1770:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1771:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1772:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1773:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2714              		.loc 1 1773 0 is_stmt 1 discriminator 2
 2715 0028 7B68     		ldr	r3, [r7, #4]
 2716 002a 1B68     		ldr	r3, [r3]
 2717 002c 9B68     		ldr	r3, [r3, #8]
 2718 002e 0422     		movs	r2, #4
 2719 0030 1340     		ands	r3, r2
 2720 0032 59D1     		bne	.L154
1774:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1775:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                      */
1776:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the analog watchdog enable mode: one or overall group of        */
1777:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    channels.                                                           */
1778:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog            */
1779:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
1780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 2721              		.loc 1 1780 0
 2722 0034 7B68     		ldr	r3, [r7, #4]
 2723 0036 1B68     		ldr	r3, [r3]
 2724 0038 DA68     		ldr	r2, [r3, #12]
 2725 003a 7B68     		ldr	r3, [r7, #4]
 2726 003c 1B68     		ldr	r3, [r3]
 2727 003e 3549     		ldr	r1, .L158
 2728 0040 0A40     		ands	r2, r1
 2729 0042 DA60     		str	r2, [r3, #12]
1781:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
1782:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDCH   );
1783:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 2730              		.loc 1 1784 0
 2731 0044 7B68     		ldr	r3, [r7, #4]
 2732 0046 1B68     		ldr	r3, [r3]
 2733 0048 D968     		ldr	r1, [r3, #12]
 2734 004a 3B68     		ldr	r3, [r7]
 2735 004c 1A68     		ldr	r2, [r3]
1785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2736              		.loc 1 1785 0
 2737 004e 3B68     		ldr	r3, [r7]
 2738 0050 5B68     		ldr	r3, [r3, #4]
 2739 0052 9B06     		lsls	r3, r3, #26
ARM GAS  /tmp/ccELT73R.s 			page 80


1784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2740              		.loc 1 1784 0
 2741 0054 1A43     		orrs	r2, r3
 2742 0056 7B68     		ldr	r3, [r7, #4]
 2743 0058 1B68     		ldr	r3, [r3]
 2744 005a 0A43     		orrs	r2, r1
 2745 005c DA60     		str	r2, [r3, #12]
1786:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1787:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds*/
1788:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
1789:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
 2746              		.loc 1 1789 0
 2747 005e 3B68     		ldr	r3, [r7]
 2748 0060 DA68     		ldr	r2, [r3, #12]
 2749 0062 7B68     		ldr	r3, [r7, #4]
 2750 0064 1B68     		ldr	r3, [r3]
 2751 0066 DB68     		ldr	r3, [r3, #12]
 2752 0068 DB08     		lsrs	r3, r3, #3
 2753 006a 0321     		movs	r1, #3
 2754 006c 0B40     		ands	r3, r1
 2755 006e 5B00     		lsls	r3, r3, #1
 2756 0070 9A40     		lsls	r2, r2, r3
 2757 0072 1300     		movs	r3, r2
 2758 0074 3B61     		str	r3, [r7, #16]
1790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2759              		.loc 1 1790 0
 2760 0076 3B68     		ldr	r3, [r7]
 2761 0078 1A69     		ldr	r2, [r3, #16]
 2762 007a 7B68     		ldr	r3, [r7, #4]
 2763 007c 1B68     		ldr	r3, [r3]
 2764 007e DB68     		ldr	r3, [r3, #12]
 2765 0080 DB08     		lsrs	r3, r3, #3
 2766 0082 0321     		movs	r1, #3
 2767 0084 0B40     		ands	r3, r1
 2768 0086 5B00     		lsls	r3, r3, #1
 2769 0088 9A40     		lsls	r2, r2, r3
 2770 008a 1300     		movs	r3, r2
 2771 008c FB60     		str	r3, [r7, #12]
1791:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1792:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set the high and low thresholds */
1793:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 2772              		.loc 1 1793 0
 2773 008e 7B68     		ldr	r3, [r7, #4]
 2774 0090 1B68     		ldr	r3, [r3]
 2775 0092 1A6A     		ldr	r2, [r3, #32]
 2776 0094 7B68     		ldr	r3, [r7, #4]
 2777 0096 1B68     		ldr	r3, [r3]
 2778 0098 1F49     		ldr	r1, .L158+4
 2779 009a 0A40     		ands	r2, r1
 2780 009c 1A62     		str	r2, [r3, #32]
1794:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2781              		.loc 1 1794 0
 2782 009e 7B68     		ldr	r3, [r7, #4]
 2783 00a0 1B68     		ldr	r3, [r3]
 2784 00a2 196A     		ldr	r1, [r3, #32]
 2785 00a4 3B69     		ldr	r3, [r7, #16]
 2786 00a6 1A04     		lsls	r2, r3, #16
ARM GAS  /tmp/ccELT73R.s 			page 81


 2787 00a8 FB68     		ldr	r3, [r7, #12]
 2788 00aa 1A43     		orrs	r2, r3
 2789 00ac 7B68     		ldr	r3, [r7, #4]
 2790 00ae 1B68     		ldr	r3, [r3]
 2791 00b0 0A43     		orrs	r2, r1
 2792 00b2 1A62     		str	r2, [r3, #32]
1795:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
1796:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1797:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
1798:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
1799:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* or HAL_ADC_PollForEvent().                                             */
1800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
 2793              		.loc 1 1800 0
 2794 00b4 7B68     		ldr	r3, [r7, #4]
 2795 00b6 1B68     		ldr	r3, [r3]
 2796 00b8 8022     		movs	r2, #128
 2797 00ba 1A60     		str	r2, [r3]
1801:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1802:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1803:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
 2798              		.loc 1 1803 0
 2799 00bc 3B68     		ldr	r3, [r7]
 2800 00be 9B68     		ldr	r3, [r3, #8]
 2801 00c0 012B     		cmp	r3, #1
 2802 00c2 08D1     		bne	.L155
1804:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1805:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2803              		.loc 1 1806 0
 2804 00c4 7B68     		ldr	r3, [r7, #4]
 2805 00c6 1B68     		ldr	r3, [r3]
 2806 00c8 5A68     		ldr	r2, [r3, #4]
 2807 00ca 7B68     		ldr	r3, [r7, #4]
 2808 00cc 1B68     		ldr	r3, [r3]
 2809 00ce 8021     		movs	r1, #128
 2810 00d0 0A43     		orrs	r2, r1
 2811 00d2 5A60     		str	r2, [r3, #4]
 2812 00d4 12E0     		b	.L157
 2813              	.L155:
1807:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1808:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1809:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1810:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2814              		.loc 1 1811 0
 2815 00d6 7B68     		ldr	r3, [r7, #4]
 2816 00d8 1B68     		ldr	r3, [r3]
 2817 00da 5A68     		ldr	r2, [r3, #4]
 2818 00dc 7B68     		ldr	r3, [r7, #4]
 2819 00de 1B68     		ldr	r3, [r3]
 2820 00e0 8021     		movs	r1, #128
 2821 00e2 8A43     		bics	r2, r1
 2822 00e4 5A60     		str	r2, [r3, #4]
 2823 00e6 09E0     		b	.L157
 2824              	.L154:
1812:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1813:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccELT73R.s 			page 82


1814:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1815:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1816:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1817:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1818:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1819:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1820:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2825              		.loc 1 1820 0
 2826 00e8 7B68     		ldr	r3, [r7, #4]
 2827 00ea 5B6C     		ldr	r3, [r3, #68]
 2828 00ec 2022     		movs	r2, #32
 2829 00ee 1A43     		orrs	r2, r3
 2830 00f0 7B68     		ldr	r3, [r7, #4]
 2831 00f2 5A64     		str	r2, [r3, #68]
1821:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1822:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2832              		.loc 1 1822 0
 2833 00f4 1723     		movs	r3, #23
 2834 00f6 FB18     		adds	r3, r7, r3
 2835 00f8 0122     		movs	r2, #1
 2836 00fa 1A70     		strb	r2, [r3]
 2837              	.L157:
1823:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1824:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1825:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1826:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1827:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2838              		.loc 1 1827 0
 2839 00fc 7B68     		ldr	r3, [r7, #4]
 2840 00fe 4022     		movs	r2, #64
 2841 0100 0021     		movs	r1, #0
 2842 0102 9954     		strb	r1, [r3, r2]
1828:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1829:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1830:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 2843              		.loc 1 1830 0
 2844 0104 1723     		movs	r3, #23
 2845 0106 FB18     		adds	r3, r7, r3
 2846 0108 1B78     		ldrb	r3, [r3]
 2847              	.L153:
1831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2848              		.loc 1 1831 0
 2849 010a 1800     		movs	r0, r3
 2850 010c BD46     		mov	sp, r7
 2851 010e 06B0     		add	sp, sp, #24
 2852              		@ sp needed
 2853 0110 80BD     		pop	{r7, pc}
 2854              	.L159:
 2855 0112 C046     		.align	2
 2856              	.L158:
 2857 0114 FFFF3F83 		.word	-2092957697
 2858 0118 00F000F0 		.word	-268374016
 2859              		.cfi_endproc
 2860              	.LFE56:
 2862              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2863              		.align	1
 2864              		.global	HAL_ADC_GetState
ARM GAS  /tmp/ccELT73R.s 			page 83


 2865              		.syntax unified
 2866              		.code	16
 2867              		.thumb_func
 2868              		.fpu softvfp
 2870              	HAL_ADC_GetState:
 2871              	.LFB57:
1832:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1833:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1834:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1835:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1836:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1837:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1838:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1839:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1840:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral State functions
1841:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1842:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim
1843:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1844:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1845:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1846:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
1847:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1848:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     peripheral.
1849:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC state
1850:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC error code
1851:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1852:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1853:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1854:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1855:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1856:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1857:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC state
1858:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
1859:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         compared with states bits.
1860:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For example:                                                         
1861:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1862:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1863:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1864:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL state
1865:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1866:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1867:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2872              		.loc 1 1867 0
 2873              		.cfi_startproc
 2874              		@ args = 0, pretend = 0, frame = 8
 2875              		@ frame_needed = 1, uses_anonymous_args = 0
 2876 0000 80B5     		push	{r7, lr}
 2877              		.cfi_def_cfa_offset 8
 2878              		.cfi_offset 7, -8
 2879              		.cfi_offset 14, -4
 2880 0002 82B0     		sub	sp, sp, #8
 2881              		.cfi_def_cfa_offset 16
 2882 0004 00AF     		add	r7, sp, #0
 2883              		.cfi_def_cfa_register 7
 2884 0006 7860     		str	r0, [r7, #4]
1868:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1869:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccELT73R.s 			page 84


1870:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1871:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1872:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->State;
 2885              		.loc 1 1872 0
 2886 0008 7B68     		ldr	r3, [r7, #4]
 2887 000a 5B6C     		ldr	r3, [r3, #68]
1873:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2888              		.loc 1 1873 0
 2889 000c 1800     		movs	r0, r3
 2890 000e BD46     		mov	sp, r7
 2891 0010 02B0     		add	sp, sp, #8
 2892              		@ sp needed
 2893 0012 80BD     		pop	{r7, pc}
 2894              		.cfi_endproc
 2895              	.LFE57:
 2897              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2898              		.align	1
 2899              		.global	HAL_ADC_GetError
 2900              		.syntax unified
 2901              		.code	16
 2902              		.thumb_func
 2903              		.fpu softvfp
 2905              	HAL_ADC_GetError:
 2906              	.LFB58:
1874:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1875:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1876:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC error code
1877:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1878:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC Error Code
1879:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1880:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1881:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2907              		.loc 1 1881 0
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 8
 2910              		@ frame_needed = 1, uses_anonymous_args = 0
 2911 0000 80B5     		push	{r7, lr}
 2912              		.cfi_def_cfa_offset 8
 2913              		.cfi_offset 7, -8
 2914              		.cfi_offset 14, -4
 2915 0002 82B0     		sub	sp, sp, #8
 2916              		.cfi_def_cfa_offset 16
 2917 0004 00AF     		add	r7, sp, #0
 2918              		.cfi_def_cfa_register 7
 2919 0006 7860     		str	r0, [r7, #4]
1882:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
 2920              		.loc 1 1882 0
 2921 0008 7B68     		ldr	r3, [r7, #4]
 2922 000a 9B6C     		ldr	r3, [r3, #72]
1883:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2923              		.loc 1 1883 0
 2924 000c 1800     		movs	r0, r3
 2925 000e BD46     		mov	sp, r7
 2926 0010 02B0     		add	sp, sp, #8
 2927              		@ sp needed
 2928 0012 80BD     		pop	{r7, pc}
 2929              		.cfi_endproc
ARM GAS  /tmp/ccELT73R.s 			page 85


 2930              	.LFE58:
 2932              		.section	.text.ADC_Enable,"ax",%progbits
 2933              		.align	1
 2934              		.syntax unified
 2935              		.code	16
 2936              		.thumb_func
 2937              		.fpu softvfp
 2939              	ADC_Enable:
 2940              	.LFB59:
1884:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1885:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1886:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1887:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */  
1888:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1889:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1890:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1891:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1892:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1893:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1894:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1895:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1896:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1897:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1898:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1899:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1900:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1901:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1902:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed automatically by hardware.
1903:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1904:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1905:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1906:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
1907:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1908:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1909:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1910:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1911:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2941              		.loc 1 1911 0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 16
 2944              		@ frame_needed = 1, uses_anonymous_args = 0
 2945 0000 80B5     		push	{r7, lr}
 2946              		.cfi_def_cfa_offset 8
 2947              		.cfi_offset 7, -8
 2948              		.cfi_offset 14, -4
 2949 0002 84B0     		sub	sp, sp, #16
 2950              		.cfi_def_cfa_offset 24
 2951 0004 00AF     		add	r7, sp, #0
 2952              		.cfi_def_cfa_register 7
 2953 0006 7860     		str	r0, [r7, #4]
1912:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 2954              		.loc 1 1912 0
 2955 0008 0023     		movs	r3, #0
 2956 000a FB60     		str	r3, [r7, #12]
1913:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2957              		.loc 1 1913 0
 2958 000c 0023     		movs	r3, #0
ARM GAS  /tmp/ccELT73R.s 			page 86


 2959 000e BB60     		str	r3, [r7, #8]
1914:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1915:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1916:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1917:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1918:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 2960              		.loc 1 1919 0
 2961 0010 7B68     		ldr	r3, [r7, #4]
 2962 0012 1B68     		ldr	r3, [r3]
 2963 0014 9B68     		ldr	r3, [r3, #8]
 2964 0016 0322     		movs	r2, #3
 2965 0018 1340     		ands	r3, r2
 2966 001a 012B     		cmp	r3, #1
 2967 001c 12D1     		bne	.L165
 2968              		.loc 1 1919 0 is_stmt 0 discriminator 1
 2969 001e 7B68     		ldr	r3, [r7, #4]
 2970 0020 1B68     		ldr	r3, [r3]
 2971 0022 1B68     		ldr	r3, [r3]
 2972 0024 0122     		movs	r2, #1
 2973 0026 1340     		ands	r3, r2
 2974 0028 012B     		cmp	r3, #1
 2975 002a 09D0     		beq	.L166
 2976              		.loc 1 1919 0 discriminator 4
 2977 002c 7B68     		ldr	r3, [r7, #4]
 2978 002e 1B68     		ldr	r3, [r3]
 2979 0030 DA68     		ldr	r2, [r3, #12]
 2980 0032 8023     		movs	r3, #128
 2981 0034 1B02     		lsls	r3, r3, #8
 2982 0036 1A40     		ands	r2, r3
 2983 0038 8023     		movs	r3, #128
 2984 003a 1B02     		lsls	r3, r3, #8
 2985 003c 9A42     		cmp	r2, r3
 2986 003e 01D1     		bne	.L165
 2987              	.L166:
 2988              		.loc 1 1919 0 discriminator 5
 2989 0040 0123     		movs	r3, #1
 2990 0042 00E0     		b	.L167
 2991              	.L165:
 2992              		.loc 1 1919 0 discriminator 6
 2993 0044 0023     		movs	r3, #0
 2994              	.L167:
 2995              		.loc 1 1919 0 discriminator 8
 2996 0046 002B     		cmp	r3, #0
 2997 0048 4BD1     		bne	.L168
1920:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1921:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1922:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 2998              		.loc 1 1922 0 is_stmt 1
 2999 004a 7B68     		ldr	r3, [r7, #4]
 3000 004c 1B68     		ldr	r3, [r3]
 3001 004e 9B68     		ldr	r3, [r3, #8]
 3002 0050 264A     		ldr	r2, .L175
 3003 0052 1340     		ands	r3, r2
 3004 0054 0DD0     		beq	.L169
1923:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1924:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
ARM GAS  /tmp/ccELT73R.s 			page 87


1925:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3005              		.loc 1 1925 0
 3006 0056 7B68     		ldr	r3, [r7, #4]
 3007 0058 5B6C     		ldr	r3, [r3, #68]
 3008 005a 1022     		movs	r2, #16
 3009 005c 1A43     		orrs	r2, r3
 3010 005e 7B68     		ldr	r3, [r7, #4]
 3011 0060 5A64     		str	r2, [r3, #68]
1926:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1927:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1928:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3012              		.loc 1 1928 0
 3013 0062 7B68     		ldr	r3, [r7, #4]
 3014 0064 9B6C     		ldr	r3, [r3, #72]
 3015 0066 0122     		movs	r2, #1
 3016 0068 1A43     		orrs	r2, r3
 3017 006a 7B68     		ldr	r3, [r7, #4]
 3018 006c 9A64     		str	r2, [r3, #72]
1929:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1930:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 3019              		.loc 1 1930 0
 3020 006e 0123     		movs	r3, #1
 3021 0070 38E0     		b	.L170
 3022              	.L169:
1931:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1932:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1933:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1934:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3023              		.loc 1 1934 0
 3024 0072 7B68     		ldr	r3, [r7, #4]
 3025 0074 1B68     		ldr	r3, [r3]
 3026 0076 9A68     		ldr	r2, [r3, #8]
 3027 0078 7B68     		ldr	r3, [r7, #4]
 3028 007a 1B68     		ldr	r3, [r3]
 3029 007c 0121     		movs	r1, #1
 3030 007e 0A43     		orrs	r2, r1
 3031 0080 9A60     		str	r2, [r3, #8]
1935:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1936:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1937:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1938:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 3032              		.loc 1 1938 0
 3033 0082 1B4B     		ldr	r3, .L175+4
 3034 0084 1B68     		ldr	r3, [r3]
 3035 0086 1B49     		ldr	r1, .L175+8
 3036 0088 1800     		movs	r0, r3
 3037 008a FFF7FEFF 		bl	__aeabi_uidiv
 3038              	.LVL1:
 3039 008e 0300     		movs	r3, r0
 3040 0090 BB60     		str	r3, [r7, #8]
1939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3041              		.loc 1 1939 0
 3042 0092 02E0     		b	.L171
 3043              	.L172:
1940:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1941:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       wait_loop_index--;
 3044              		.loc 1 1941 0
ARM GAS  /tmp/ccELT73R.s 			page 88


 3045 0094 BB68     		ldr	r3, [r7, #8]
 3046 0096 013B     		subs	r3, r3, #1
 3047 0098 BB60     		str	r3, [r7, #8]
 3048              	.L171:
1939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3049              		.loc 1 1939 0
 3050 009a BB68     		ldr	r3, [r7, #8]
 3051 009c 002B     		cmp	r3, #0
 3052 009e F9D1     		bne	.L172
1942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1943:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1944:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
1945:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3053              		.loc 1 1945 0
 3054 00a0 FFF7FEFF 		bl	HAL_GetTick
 3055 00a4 0300     		movs	r3, r0
 3056 00a6 FB60     		str	r3, [r7, #12]
1946:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1947:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1948:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 3057              		.loc 1 1948 0
 3058 00a8 14E0     		b	.L173
 3059              	.L174:
1949:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1950:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3060              		.loc 1 1950 0
 3061 00aa FFF7FEFF 		bl	HAL_GetTick
 3062 00ae 0200     		movs	r2, r0
 3063 00b0 FB68     		ldr	r3, [r7, #12]
 3064 00b2 D31A     		subs	r3, r2, r3
 3065 00b4 022B     		cmp	r3, #2
 3066 00b6 0DD9     		bls	.L173
1951:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1952:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
1953:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3067              		.loc 1 1953 0
 3068 00b8 7B68     		ldr	r3, [r7, #4]
 3069 00ba 5B6C     		ldr	r3, [r3, #68]
 3070 00bc 1022     		movs	r2, #16
 3071 00be 1A43     		orrs	r2, r3
 3072 00c0 7B68     		ldr	r3, [r7, #4]
 3073 00c2 5A64     		str	r2, [r3, #68]
1954:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1955:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1956:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3074              		.loc 1 1956 0
 3075 00c4 7B68     		ldr	r3, [r7, #4]
 3076 00c6 9B6C     		ldr	r3, [r3, #72]
 3077 00c8 0122     		movs	r2, #1
 3078 00ca 1A43     		orrs	r2, r3
 3079 00cc 7B68     		ldr	r3, [r7, #4]
 3080 00ce 9A64     		str	r2, [r3, #72]
1957:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1958:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
 3081              		.loc 1 1958 0
 3082 00d0 0123     		movs	r3, #1
 3083 00d2 07E0     		b	.L170
ARM GAS  /tmp/ccELT73R.s 			page 89


 3084              	.L173:
1948:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3085              		.loc 1 1948 0
 3086 00d4 7B68     		ldr	r3, [r7, #4]
 3087 00d6 1B68     		ldr	r3, [r3]
 3088 00d8 1B68     		ldr	r3, [r3]
 3089 00da 0122     		movs	r2, #1
 3090 00dc 1340     		ands	r3, r2
 3091 00de 012B     		cmp	r3, #1
 3092 00e0 E3D1     		bne	.L174
 3093              	.L168:
1959:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1960:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }   
1961:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1962:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1963:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1964:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
1965:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 3094              		.loc 1 1965 0
 3095 00e2 0023     		movs	r3, #0
 3096              	.L170:
1966:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3097              		.loc 1 1966 0
 3098 00e4 1800     		movs	r0, r3
 3099 00e6 BD46     		mov	sp, r7
 3100 00e8 04B0     		add	sp, sp, #16
 3101              		@ sp needed
 3102 00ea 80BD     		pop	{r7, pc}
 3103              	.L176:
 3104              		.align	2
 3105              	.L175:
 3106 00ec 17000080 		.word	-2147483625
 3107 00f0 00000000 		.word	SystemCoreClock
 3108 00f4 40420F00 		.word	1000000
 3109              		.cfi_endproc
 3110              	.LFE59:
 3112              		.section	.text.ADC_Disable,"ax",%progbits
 3113              		.align	1
 3114              		.syntax unified
 3115              		.code	16
 3116              		.thumb_func
 3117              		.fpu softvfp
 3119              	ADC_Disable:
 3120              	.LFB60:
1967:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1968:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1969:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1970:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1971:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped.
1972:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1973:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1974:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1975:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1976:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3121              		.loc 1 1976 0
 3122              		.cfi_startproc
 3123              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccELT73R.s 			page 90


 3124              		@ frame_needed = 1, uses_anonymous_args = 0
 3125 0000 80B5     		push	{r7, lr}
 3126              		.cfi_def_cfa_offset 8
 3127              		.cfi_offset 7, -8
 3128              		.cfi_offset 14, -4
 3129 0002 84B0     		sub	sp, sp, #16
 3130              		.cfi_def_cfa_offset 24
 3131 0004 00AF     		add	r7, sp, #0
 3132              		.cfi_def_cfa_register 7
 3133 0006 7860     		str	r0, [r7, #4]
1977:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3134              		.loc 1 1977 0
 3135 0008 0023     		movs	r3, #0
 3136 000a FB60     		str	r3, [r7, #12]
1978:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1979:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1980:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1981:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       disabled.                                                          */
1982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3137              		.loc 1 1982 0
 3138 000c 7B68     		ldr	r3, [r7, #4]
 3139 000e 1B68     		ldr	r3, [r3]
 3140 0010 9B68     		ldr	r3, [r3, #8]
 3141 0012 0322     		movs	r2, #3
 3142 0014 1340     		ands	r3, r2
 3143 0016 012B     		cmp	r3, #1
 3144 0018 12D1     		bne	.L178
 3145              		.loc 1 1982 0 is_stmt 0 discriminator 1
 3146 001a 7B68     		ldr	r3, [r7, #4]
 3147 001c 1B68     		ldr	r3, [r3]
 3148 001e 1B68     		ldr	r3, [r3]
 3149 0020 0122     		movs	r2, #1
 3150 0022 1340     		ands	r3, r2
 3151 0024 012B     		cmp	r3, #1
 3152 0026 09D0     		beq	.L179
 3153              		.loc 1 1982 0 discriminator 4
 3154 0028 7B68     		ldr	r3, [r7, #4]
 3155 002a 1B68     		ldr	r3, [r3]
 3156 002c DA68     		ldr	r2, [r3, #12]
 3157 002e 8023     		movs	r3, #128
 3158 0030 1B02     		lsls	r3, r3, #8
 3159 0032 1A40     		ands	r2, r3
 3160 0034 8023     		movs	r3, #128
 3161 0036 1B02     		lsls	r3, r3, #8
 3162 0038 9A42     		cmp	r2, r3
 3163 003a 01D1     		bne	.L178
 3164              	.L179:
 3165              		.loc 1 1982 0 discriminator 5
 3166 003c 0123     		movs	r3, #1
 3167 003e 00E0     		b	.L180
 3168              	.L178:
 3169              		.loc 1 1982 0 discriminator 6
 3170 0040 0023     		movs	r3, #0
 3171              	.L180:
 3172              		.loc 1 1982 0 discriminator 8
 3173 0042 002B     		cmp	r3, #0
 3174 0044 40D0     		beq	.L181
ARM GAS  /tmp/ccELT73R.s 			page 91


1983:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1984:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1985:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 3175              		.loc 1 1985 0 is_stmt 1
 3176 0046 7B68     		ldr	r3, [r7, #4]
 3177 0048 1B68     		ldr	r3, [r3]
 3178 004a 9B68     		ldr	r3, [r3, #8]
 3179 004c 0522     		movs	r2, #5
 3180 004e 1340     		ands	r3, r2
 3181 0050 012B     		cmp	r3, #1
 3182 0052 10D1     		bne	.L182
1986:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1987:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1988:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
 3183              		.loc 1 1988 0
 3184 0054 7B68     		ldr	r3, [r7, #4]
 3185 0056 1B68     		ldr	r3, [r3]
 3186 0058 9A68     		ldr	r2, [r3, #8]
 3187 005a 7B68     		ldr	r3, [r7, #4]
 3188 005c 1B68     		ldr	r3, [r3]
 3189 005e 0221     		movs	r1, #2
 3190 0060 0A43     		orrs	r2, r1
 3191 0062 9A60     		str	r2, [r3, #8]
 3192 0064 7B68     		ldr	r3, [r7, #4]
 3193 0066 1B68     		ldr	r3, [r3]
 3194 0068 0322     		movs	r2, #3
 3195 006a 1A60     		str	r2, [r3]
1989:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1990:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1991:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1992:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1993:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1994:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1995:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1996:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1997:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1999:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2000:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
2001:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2002:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2003:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3196              		.loc 1 2003 0
 3197 006c FFF7FEFF 		bl	HAL_GetTick
 3198 0070 0300     		movs	r3, r0
 3199 0072 FB60     		str	r3, [r7, #12]
2004:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2005:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 3200              		.loc 1 2005 0
 3201 0074 22E0     		b	.L185
 3202              	.L182:
1993:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 3203              		.loc 1 1993 0
 3204 0076 7B68     		ldr	r3, [r7, #4]
 3205 0078 5B6C     		ldr	r3, [r3, #68]
 3206 007a 1022     		movs	r2, #16
 3207 007c 1A43     		orrs	r2, r3
ARM GAS  /tmp/ccELT73R.s 			page 92


 3208 007e 7B68     		ldr	r3, [r7, #4]
 3209 0080 5A64     		str	r2, [r3, #68]
1996:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 3210              		.loc 1 1996 0
 3211 0082 7B68     		ldr	r3, [r7, #4]
 3212 0084 9B6C     		ldr	r3, [r3, #72]
 3213 0086 0122     		movs	r2, #1
 3214 0088 1A43     		orrs	r2, r3
 3215 008a 7B68     		ldr	r3, [r7, #4]
 3216 008c 9A64     		str	r2, [r3, #72]
1998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 3217              		.loc 1 1998 0
 3218 008e 0123     		movs	r3, #1
 3219 0090 1BE0     		b	.L184
 3220              	.L186:
2006:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2007:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3221              		.loc 1 2007 0
 3222 0092 FFF7FEFF 		bl	HAL_GetTick
 3223 0096 0200     		movs	r2, r0
 3224 0098 FB68     		ldr	r3, [r7, #12]
 3225 009a D31A     		subs	r3, r2, r3
 3226 009c 022B     		cmp	r3, #2
 3227 009e 0DD9     		bls	.L185
2008:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2009:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2010:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3228              		.loc 1 2010 0
 3229 00a0 7B68     		ldr	r3, [r7, #4]
 3230 00a2 5B6C     		ldr	r3, [r3, #68]
 3231 00a4 1022     		movs	r2, #16
 3232 00a6 1A43     		orrs	r2, r3
 3233 00a8 7B68     		ldr	r3, [r7, #4]
 3234 00aa 5A64     		str	r2, [r3, #68]
2011:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2012:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2013:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3235              		.loc 1 2013 0
 3236 00ac 7B68     		ldr	r3, [r7, #4]
 3237 00ae 9B6C     		ldr	r3, [r3, #72]
 3238 00b0 0122     		movs	r2, #1
 3239 00b2 1A43     		orrs	r2, r3
 3240 00b4 7B68     		ldr	r3, [r7, #4]
 3241 00b6 9A64     		str	r2, [r3, #72]
2014:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2015:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
 3242              		.loc 1 2015 0
 3243 00b8 0123     		movs	r3, #1
 3244 00ba 06E0     		b	.L184
 3245              	.L185:
2005:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3246              		.loc 1 2005 0
 3247 00bc 7B68     		ldr	r3, [r7, #4]
 3248 00be 1B68     		ldr	r3, [r3]
 3249 00c0 9B68     		ldr	r3, [r3, #8]
 3250 00c2 0122     		movs	r2, #1
 3251 00c4 1340     		ands	r3, r2
ARM GAS  /tmp/ccELT73R.s 			page 93


 3252 00c6 E4D1     		bne	.L186
 3253              	.L181:
2016:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2017:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2018:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2019:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2020:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2021:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 3254              		.loc 1 2021 0
 3255 00c8 0023     		movs	r3, #0
 3256              	.L184:
2022:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3257              		.loc 1 2022 0
 3258 00ca 1800     		movs	r0, r3
 3259 00cc BD46     		mov	sp, r7
 3260 00ce 04B0     		add	sp, sp, #16
 3261              		@ sp needed
 3262 00d0 80BD     		pop	{r7, pc}
 3263              		.cfi_endproc
 3264              	.LFE60:
 3266              		.section	.text.ADC_ConversionStop,"ax",%progbits
 3267              		.align	1
 3268              		.syntax unified
 3269              		.code	16
 3270              		.thumb_func
 3271              		.fpu softvfp
 3273              	ADC_ConversionStop:
 3274              	.LFB61:
2023:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2024:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2025:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2026:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2027:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2028:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped to disable the ADC.
2029:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2030:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
2031:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2032:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2033:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3275              		.loc 1 2033 0
 3276              		.cfi_startproc
 3277              		@ args = 0, pretend = 0, frame = 16
 3278              		@ frame_needed = 1, uses_anonymous_args = 0
 3279 0000 80B5     		push	{r7, lr}
 3280              		.cfi_def_cfa_offset 8
 3281              		.cfi_offset 7, -8
 3282              		.cfi_offset 14, -4
 3283 0002 84B0     		sub	sp, sp, #16
 3284              		.cfi_def_cfa_offset 24
 3285 0004 00AF     		add	r7, sp, #0
 3286              		.cfi_def_cfa_register 7
 3287 0006 7860     		str	r0, [r7, #4]
2034:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3288              		.loc 1 2034 0
 3289 0008 0023     		movs	r3, #0
 3290 000a FB60     		str	r3, [r7, #12]
2035:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccELT73R.s 			page 94


2036:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2037:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2038:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2039:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2040:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* this function if not needed.                                             */
2041:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 3291              		.loc 1 2041 0
 3292 000c 7B68     		ldr	r3, [r7, #4]
 3293 000e 1B68     		ldr	r3, [r3]
 3294 0010 9B68     		ldr	r3, [r3, #8]
 3295 0012 0422     		movs	r2, #4
 3296 0014 1340     		ands	r3, r2
 3297 0016 33D0     		beq	.L188
2042:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2043:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2044:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2045:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2046:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 3298              		.loc 1 2046 0
 3299 0018 7B68     		ldr	r3, [r7, #4]
 3300 001a 1B68     		ldr	r3, [r3]
 3301 001c 9B68     		ldr	r3, [r3, #8]
 3302 001e 0422     		movs	r2, #4
 3303 0020 1340     		ands	r3, r2
 3304 0022 0DD0     		beq	.L189
2047:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 3305              		.loc 1 2047 0 discriminator 1
 3306 0024 7B68     		ldr	r3, [r7, #4]
 3307 0026 1B68     		ldr	r3, [r3]
 3308 0028 9B68     		ldr	r3, [r3, #8]
 3309 002a 0222     		movs	r2, #2
 3310 002c 1340     		ands	r3, r2
2046:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 3311              		.loc 1 2046 0 discriminator 1
 3312 002e 07D1     		bne	.L189
2048:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2049:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Stop conversions on regular group */
2050:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
 3313              		.loc 1 2050 0
 3314 0030 7B68     		ldr	r3, [r7, #4]
 3315 0032 1B68     		ldr	r3, [r3]
 3316 0034 9A68     		ldr	r2, [r3, #8]
 3317 0036 7B68     		ldr	r3, [r7, #4]
 3318 0038 1B68     		ldr	r3, [r3]
 3319 003a 1021     		movs	r1, #16
 3320 003c 0A43     		orrs	r2, r1
 3321 003e 9A60     		str	r2, [r3, #8]
 3322              	.L189:
2051:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2052:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2053:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2054:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2055:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3323              		.loc 1 2055 0
 3324 0040 FFF7FEFF 		bl	HAL_GetTick
 3325 0044 0300     		movs	r3, r0
 3326 0046 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccELT73R.s 			page 95


2056:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2057:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 3327              		.loc 1 2057 0
 3328 0048 14E0     		b	.L190
 3329              	.L192:
2058:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2059:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 3330              		.loc 1 2059 0
 3331 004a FFF7FEFF 		bl	HAL_GetTick
 3332 004e 0200     		movs	r2, r0
 3333 0050 FB68     		ldr	r3, [r7, #12]
 3334 0052 D31A     		subs	r3, r2, r3
 3335 0054 022B     		cmp	r3, #2
 3336 0056 0DD9     		bls	.L190
2060:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2061:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2062:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3337              		.loc 1 2062 0
 3338 0058 7B68     		ldr	r3, [r7, #4]
 3339 005a 5B6C     		ldr	r3, [r3, #68]
 3340 005c 1022     		movs	r2, #16
 3341 005e 1A43     		orrs	r2, r3
 3342 0060 7B68     		ldr	r3, [r7, #4]
 3343 0062 5A64     		str	r2, [r3, #68]
2063:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2064:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2065:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3344              		.loc 1 2065 0
 3345 0064 7B68     		ldr	r3, [r7, #4]
 3346 0066 9B6C     		ldr	r3, [r3, #72]
 3347 0068 0122     		movs	r2, #1
 3348 006a 1A43     		orrs	r2, r3
 3349 006c 7B68     		ldr	r3, [r7, #4]
 3350 006e 9A64     		str	r2, [r3, #72]
2066:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2067:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
 3351              		.loc 1 2067 0
 3352 0070 0123     		movs	r3, #1
 3353 0072 06E0     		b	.L191
 3354              	.L190:
2057:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3355              		.loc 1 2057 0
 3356 0074 7B68     		ldr	r3, [r7, #4]
 3357 0076 1B68     		ldr	r3, [r3]
 3358 0078 9B68     		ldr	r3, [r3, #8]
 3359 007a 0422     		movs	r2, #4
 3360 007c 1340     		ands	r3, r2
 3361 007e E4D1     		bne	.L192
 3362              	.L188:
2068:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2069:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2070:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2071:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2072:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
2073:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2074:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 3363              		.loc 1 2074 0
ARM GAS  /tmp/ccELT73R.s 			page 96


 3364 0080 0023     		movs	r3, #0
 3365              	.L191:
2075:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3366              		.loc 1 2075 0
 3367 0082 1800     		movs	r0, r3
 3368 0084 BD46     		mov	sp, r7
 3369 0086 04B0     		add	sp, sp, #16
 3370              		@ sp needed
 3371 0088 80BD     		pop	{r7, pc}
 3372              		.cfi_endproc
 3373              	.LFE61:
 3375              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3376              		.align	1
 3377              		.syntax unified
 3378              		.code	16
 3379              		.thumb_func
 3380              		.fpu softvfp
 3382              	ADC_DMAConvCplt:
 3383              	.LFB62:
2076:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2077:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2078:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2079:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2080:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2081:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2082:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2083:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3384              		.loc 1 2084 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 16
 3387              		@ frame_needed = 1, uses_anonymous_args = 0
 3388 0000 80B5     		push	{r7, lr}
 3389              		.cfi_def_cfa_offset 8
 3390              		.cfi_offset 7, -8
 3391              		.cfi_offset 14, -4
 3392 0002 84B0     		sub	sp, sp, #16
 3393              		.cfi_def_cfa_offset 24
 3394 0004 00AF     		add	r7, sp, #0
 3395              		.cfi_def_cfa_register 7
 3396 0006 7860     		str	r0, [r7, #4]
2085:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2086:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3397              		.loc 1 2086 0
 3398 0008 7B68     		ldr	r3, [r7, #4]
 3399 000a 5B6A     		ldr	r3, [r3, #36]
 3400 000c FB60     		str	r3, [r7, #12]
2087:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2088:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2089:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3401              		.loc 1 2089 0
 3402 000e FB68     		ldr	r3, [r7, #12]
 3403 0010 5B6C     		ldr	r3, [r3, #68]
 3404 0012 5022     		movs	r2, #80
 3405 0014 1340     		ands	r3, r2
 3406 0016 40D1     		bne	.L194
2090:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
ARM GAS  /tmp/ccELT73R.s 			page 97


2091:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
2092:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 3407              		.loc 1 2092 0
 3408 0018 FB68     		ldr	r3, [r7, #12]
 3409 001a 5B6C     		ldr	r3, [r3, #68]
 3410 001c 8022     		movs	r2, #128
 3411 001e 9200     		lsls	r2, r2, #2
 3412 0020 1A43     		orrs	r2, r3
 3413 0022 FB68     		ldr	r3, [r7, #12]
 3414 0024 5A64     		str	r2, [r3, #68]
2093:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2094:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2095:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3415              		.loc 1 2096 0
 3416 0026 FB68     		ldr	r3, [r7, #12]
 3417 0028 1B68     		ldr	r3, [r3]
 3418 002a DA68     		ldr	r2, [r3, #12]
 3419 002c C023     		movs	r3, #192
 3420 002e 1B01     		lsls	r3, r3, #4
 3421 0030 1340     		ands	r3, r2
 3422 0032 2DD1     		bne	.L195
2097:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3423              		.loc 1 2097 0 discriminator 1
 3424 0034 FB68     		ldr	r3, [r7, #12]
 3425 0036 1B6A     		ldr	r3, [r3, #32]
2096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3426              		.loc 1 2096 0 discriminator 1
 3427 0038 002B     		cmp	r3, #0
 3428 003a 29D1     		bne	.L195
2098:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2099:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 3429              		.loc 1 2100 0
 3430 003c FB68     		ldr	r3, [r7, #12]
 3431 003e 1B68     		ldr	r3, [r3]
 3432 0040 1B68     		ldr	r3, [r3]
 3433 0042 0822     		movs	r2, #8
 3434 0044 1340     		ands	r3, r2
 3435 0046 082B     		cmp	r3, #8
 3436 0048 22D1     		bne	.L195
2101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 3437              		.loc 1 2104 0
 3438 004a FB68     		ldr	r3, [r7, #12]
 3439 004c 1B68     		ldr	r3, [r3]
 3440 004e 9B68     		ldr	r3, [r3, #8]
 3441 0050 0422     		movs	r2, #4
 3442 0052 1340     		ands	r3, r2
 3443 0054 10D1     		bne	.L196
2105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
ARM GAS  /tmp/ccELT73R.s 			page 98


2110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 3444              		.loc 1 2110 0
 3445 0056 FB68     		ldr	r3, [r7, #12]
 3446 0058 1B68     		ldr	r3, [r3]
 3447 005a 5A68     		ldr	r2, [r3, #4]
 3448 005c FB68     		ldr	r3, [r7, #12]
 3449 005e 1B68     		ldr	r3, [r3]
 3450 0060 0C21     		movs	r1, #12
 3451 0062 8A43     		bics	r2, r1
 3452 0064 5A60     		str	r2, [r3, #4]
2111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
2113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 3453              		.loc 1 2113 0
 3454 0066 FB68     		ldr	r3, [r7, #12]
 3455 0068 5B6C     		ldr	r3, [r3, #68]
 3456 006a 114A     		ldr	r2, .L199
 3457 006c 1340     		ands	r3, r2
 3458 006e 0122     		movs	r2, #1
 3459 0070 1A43     		orrs	r2, r3
 3460 0072 FB68     		ldr	r3, [r7, #12]
 3461 0074 5A64     		str	r2, [r3, #68]
 3462 0076 0BE0     		b	.L195
 3463              	.L196:
2114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
2118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
2120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3464              		.loc 1 2120 0
 3465 0078 FB68     		ldr	r3, [r7, #12]
 3466 007a 5B6C     		ldr	r3, [r3, #68]
 3467 007c 2022     		movs	r2, #32
 3468 007e 1A43     		orrs	r2, r3
 3469 0080 FB68     		ldr	r3, [r7, #12]
 3470 0082 5A64     		str	r2, [r3, #68]
2121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3471              		.loc 1 2123 0
 3472 0084 FB68     		ldr	r3, [r7, #12]
 3473 0086 9B6C     		ldr	r3, [r3, #72]
 3474 0088 0122     		movs	r2, #1
 3475 008a 1A43     		orrs	r2, r3
 3476 008c FB68     		ldr	r3, [r7, #12]
 3477 008e 9A64     		str	r2, [r3, #72]
 3478              	.L195:
2124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
2129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 3479              		.loc 1 2129 0
 3480 0090 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccELT73R.s 			page 99


 3481 0092 1800     		movs	r0, r3
 3482 0094 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
2132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Call DMA error callback */
2134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3483              		.loc 1 2137 0
 3484 0098 05E0     		b	.L198
 3485              	.L194:
2134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 3486              		.loc 1 2134 0
 3487 009a FB68     		ldr	r3, [r7, #12]
 3488 009c DB6B     		ldr	r3, [r3, #60]
 3489 009e 1B6B     		ldr	r3, [r3, #48]
 3490 00a0 7A68     		ldr	r2, [r7, #4]
 3491 00a2 1000     		movs	r0, r2
 3492 00a4 9847     		blx	r3
 3493              	.LVL2:
 3494              	.L198:
 3495              		.loc 1 2137 0
 3496 00a6 C046     		nop
 3497 00a8 BD46     		mov	sp, r7
 3498 00aa 04B0     		add	sp, sp, #16
 3499              		@ sp needed
 3500 00ac 80BD     		pop	{r7, pc}
 3501              	.L200:
 3502 00ae C046     		.align	2
 3503              	.L199:
 3504 00b0 FEFEFFFF 		.word	-258
 3505              		.cfi_endproc
 3506              	.LFE62:
 3508              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3509              		.align	1
 3510              		.syntax unified
 3511              		.code	16
 3512              		.thumb_func
 3513              		.fpu softvfp
 3515              	ADC_DMAHalfConvCplt:
 3516              	.LFB63:
2138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3517              		.loc 1 2145 0
 3518              		.cfi_startproc
 3519              		@ args = 0, pretend = 0, frame = 16
 3520              		@ frame_needed = 1, uses_anonymous_args = 0
 3521 0000 80B5     		push	{r7, lr}
 3522              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccELT73R.s 			page 100


 3523              		.cfi_offset 7, -8
 3524              		.cfi_offset 14, -4
 3525 0002 84B0     		sub	sp, sp, #16
 3526              		.cfi_def_cfa_offset 24
 3527 0004 00AF     		add	r7, sp, #0
 3528              		.cfi_def_cfa_register 7
 3529 0006 7860     		str	r0, [r7, #4]
2146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3530              		.loc 1 2147 0
 3531 0008 7B68     		ldr	r3, [r7, #4]
 3532 000a 5B6A     		ldr	r3, [r3, #36]
 3533 000c FB60     		str	r3, [r7, #12]
2148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Half conversion callback */
2150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 3534              		.loc 1 2150 0
 3535 000e FB68     		ldr	r3, [r7, #12]
 3536 0010 1800     		movs	r0, r3
 3537 0012 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3538              		.loc 1 2151 0
 3539 0016 C046     		nop
 3540 0018 BD46     		mov	sp, r7
 3541 001a 04B0     		add	sp, sp, #16
 3542              		@ sp needed
 3543 001c 80BD     		pop	{r7, pc}
 3544              		.cfi_endproc
 3545              	.LFE63:
 3547              		.section	.text.ADC_DMAError,"ax",%progbits
 3548              		.align	1
 3549              		.syntax unified
 3550              		.code	16
 3551              		.thumb_func
 3552              		.fpu softvfp
 3554              	ADC_DMAError:
 3555              	.LFB64:
2152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA error callback 
2155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3556              		.loc 1 2159 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 16
 3559              		@ frame_needed = 1, uses_anonymous_args = 0
 3560 0000 80B5     		push	{r7, lr}
 3561              		.cfi_def_cfa_offset 8
 3562              		.cfi_offset 7, -8
 3563              		.cfi_offset 14, -4
 3564 0002 84B0     		sub	sp, sp, #16
 3565              		.cfi_def_cfa_offset 24
 3566 0004 00AF     		add	r7, sp, #0
 3567              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccELT73R.s 			page 101


 3568 0006 7860     		str	r0, [r7, #4]
2160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3569              		.loc 1 2161 0
 3570 0008 7B68     		ldr	r3, [r7, #4]
 3571 000a 5B6A     		ldr	r3, [r3, #36]
 3572 000c FB60     		str	r3, [r7, #12]
2162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
2164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3573              		.loc 1 2164 0
 3574 000e FB68     		ldr	r3, [r7, #12]
 3575 0010 5B6C     		ldr	r3, [r3, #68]
 3576 0012 4022     		movs	r2, #64
 3577 0014 1A43     		orrs	r2, r3
 3578 0016 FB68     		ldr	r3, [r7, #12]
 3579 0018 5A64     		str	r2, [r3, #68]
2165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3580              		.loc 1 2167 0
 3581 001a FB68     		ldr	r3, [r7, #12]
 3582 001c 9B6C     		ldr	r3, [r3, #72]
 3583 001e 0422     		movs	r2, #4
 3584 0020 1A43     		orrs	r2, r3
 3585 0022 FB68     		ldr	r3, [r7, #12]
 3586 0024 9A64     		str	r2, [r3, #72]
2168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Error callback */
2170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 3587              		.loc 1 2170 0
 3588 0026 FB68     		ldr	r3, [r7, #12]
 3589 0028 1800     		movs	r0, r3
 3590 002a FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3591              		.loc 1 2171 0
 3592 002e C046     		nop
 3593 0030 BD46     		mov	sp, r7
 3594 0032 04B0     		add	sp, sp, #16
 3595              		@ sp needed
 3596 0034 80BD     		pop	{r7, pc}
 3597              		.cfi_endproc
 3598              	.LFE64:
 3600              		.text
 3601              	.Letext0:
 3602              		.file 2 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
 3603              		.file 3 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 3604              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 3605              		.file 5 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 3606              		.file 6 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3607              		.file 7 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 3608              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
 3609              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/i
 3610              		.file 10 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/re
 3611              		.file 11 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3612              		.file 12 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 3613              		.file 13 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
ARM GAS  /tmp/ccELT73R.s 			page 102


ARM GAS  /tmp/ccELT73R.s 			page 103


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_adc.c
     /tmp/ccELT73R.s:16     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccELT73R.s:23     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccELT73R.s:645    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccELT73R.s:444    .text.HAL_ADC_Init:0000000000000270 $d
     /tmp/ccELT73R.s:451    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccELT73R.s:458    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccELT73R.s:3273   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccELT73R.s:3119   .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccELT73R.s:677    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccELT73R.s:630    .text.HAL_ADC_DeInit:0000000000000104 $d
     /tmp/ccELT73R.s:638    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccELT73R.s:670    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccELT73R.s:702    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccELT73R.s:709    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccELT73R.s:2939   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccELT73R.s:827    .text.HAL_ADC_Start:00000000000000a4 $d
     /tmp/ccELT73R.s:832    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccELT73R.s:839    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccELT73R.s:931    .text.HAL_ADC_Stop:000000000000007c $d
     /tmp/ccELT73R.s:936    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccELT73R.s:943    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccELT73R.s:1138   .text.HAL_ADC_PollForConversion:000000000000011c $d
     /tmp/ccELT73R.s:1143   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccELT73R.s:1150   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccELT73R.s:1281   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccELT73R.s:1288   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccELT73R.s:1444   .text.HAL_ADC_Start_IT:00000000000000e0 $d
     /tmp/ccELT73R.s:1449   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccELT73R.s:1456   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccELT73R.s:1557   .text.HAL_ADC_Stop_IT:000000000000008c $d
     /tmp/ccELT73R.s:1562   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccELT73R.s:1569   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccELT73R.s:1732   .text.HAL_ADC_Start_DMA:00000000000000f4 $d
     /tmp/ccELT73R.s:3382   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccELT73R.s:3515   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccELT73R.s:3554   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccELT73R.s:1740   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccELT73R.s:1747   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccELT73R.s:1893   .text.HAL_ADC_Stop_DMA:00000000000000d8 $d
     /tmp/ccELT73R.s:1898   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccELT73R.s:1905   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccELT73R.s:1934   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccELT73R.s:1941   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccELT73R.s:2188   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccELT73R.s:2252   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccELT73R.s:2284   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccELT73R.s:2176   .text.HAL_ADC_IRQHandler:0000000000000168 $d
     /tmp/ccELT73R.s:2181   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccELT73R.s:2213   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccELT73R.s:2220   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccELT73R.s:2245   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccELT73R.s:2277   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccELT73R.s:2310   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccELT73R.s:2317   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccELT73R.s:2660   .text.HAL_ADC_ConfigChannel:0000000000000200 $d
ARM GAS  /tmp/ccELT73R.s 			page 104


     /tmp/ccELT73R.s:2671   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccELT73R.s:2678   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccELT73R.s:2857   .text.HAL_ADC_AnalogWDGConfig:0000000000000114 $d
     /tmp/ccELT73R.s:2863   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccELT73R.s:2870   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccELT73R.s:2898   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccELT73R.s:2905   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccELT73R.s:2933   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccELT73R.s:3106   .text.ADC_Enable:00000000000000ec $d
     /tmp/ccELT73R.s:3113   .text.ADC_Disable:0000000000000000 $t
     /tmp/ccELT73R.s:3267   .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccELT73R.s:3376   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccELT73R.s:3504   .text.ADC_DMAConvCplt:00000000000000b0 $d
     /tmp/ccELT73R.s:3509   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccELT73R.s:3548   .text.ADC_DMAError:0000000000000000 $t
                           .group:0000000000000000 wm4.0.b7c3d577b02d87ac381ee43eef398462
                           .group:0000000000000000 wm4.main.h.42.3939338cba6ab0a8b761d08be8206d51
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.b0c07d2233f75e3b04f03d95093d88ca
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
ARM GAS  /tmp/ccELT73R.s 			page 105


                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart.h.38.e5eada3cdf37ca88de33bd21ddd21a5e
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart_ex.h.38.9430c2ca5ec832677dbe7308c46115fd
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
__aeabi_uidiv
SystemCoreClock
