ARM GAS  /tmp/cc3nkBGN.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ADC_ConversionStop,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	ADC_ConversionStop:
  23              	.LFB61:
  24              		.file 1 "cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"
   1:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
   2:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
   3:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @file    stm32f0xx_hal_adc.c
   4:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          peripheral:
   8:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Operation functions
  11:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Control functions
  14:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + State functions
  17:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  20:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          "stm32f0xx_hal_adc_ex.c".
  21:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  22:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   @verbatim
  23:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  24:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  26:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   [..]
  27:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  28:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  29:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  30:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  32:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  34:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
ARM GAS  /tmp/cc3nkBGN.s 			page 2


  35:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  36:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  38:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  39:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  40:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  41:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  42:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  44:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  46:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC calibration
  47:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  48:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  49:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       slower speed.
  50:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  51:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  52:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  53:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  54:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  55:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### How to use this driver #####
  56:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  57:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
  58:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  59:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  60:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
  61:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
  62:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  63:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Enable the ADC interface
  64:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  65:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            Caution: On STM32F0, ADC clock frequency max is 14MHz (refer
  66:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     to device datasheet).
  67:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  68:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  69:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     this maximum frequency.
  70:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  71:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  72:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  73:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  74:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  75:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  76:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  77:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    14MHz.
  78:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSI14State" must be set either:
  79:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ADC_CONTROL" to let the ADC control 
  80:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      the HSI14 oscillator enable/disable (if not used to supply the main 
  81:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      system clock): feature used if ADC mode LowPowerAutoPowerOff is 
  82:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      enabled.
  83:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ON" to maintain the HSI14 oscillator
  84:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  85:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  86:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
  87:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  88:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
  89:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                         (mandatory)
  90:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  91:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                HI14 enable or let under control of ADC:           (optional: if asynchronous clock 
ARM GAS  /tmp/cc3nkBGN.s 			page 3


  92:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  93:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
  94:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
  95:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_ADC_CONTROL;
  96:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  97:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  98:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  99:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
 100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ADCx_IRQHandler().
 114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ================================================================
 126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_Init().
 131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         monitored, thresholds, ...)
 138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ====================================
 142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         conversion accuracy
 146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
ARM GAS  /tmp/cc3nkBGN.s 			page 4


 149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         transfer by DMA.
 150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by polling:
 152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (this function must be implemented in user program)
 167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 destination variable address.
 180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
 193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Disable the ADC interface
 196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock disable
 200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
 202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
 204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
ARM GAS  /tmp/cc3nkBGN.s 			page 5


 206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Deinitialize the DMA
 218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     @endverbatim
 225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
 226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @attention
 227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      without specific prior written permission.
 240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************  
 253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #include "stm32f0xx_hal.h"
 257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @addtogroup STM32F0xx_HAL_Driver
 259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC ADC
ARM GAS  /tmp/cc3nkBGN.s 			page 6


 263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief ADC HAL module driver
 264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* settling time.                                                           */
 277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clock frequency,       */
 278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: ms                                                                 */
 282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT             ( 2U)
 283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT            ( 2U)
 284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STOP_CONVERSION_TIMEOUT    ( 2U)
 285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ( 1U)
 290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
ARM GAS  /tmp/cc3nkBGN.s 			page 7


 320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim    
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) De-initialize the ADC
 332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 339:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 340:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         depending on both possible clock sources: APB clock of HSI clock.
 341:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 343:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 344:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 346:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 347:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 348:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 349:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 350:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 351:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 352:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 354:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 355:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 356:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 358:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 359:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 362:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
 363:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 364:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 366:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     return HAL_ERROR;
 368:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 369:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 370:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 371:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 372:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 373:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 374:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 375:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 376:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
ARM GAS  /tmp/cc3nkBGN.s 			page 8


 377:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 378:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 380:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 381:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 382:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 383:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 384:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 385:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 386:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 389:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 390:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 391:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 392:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 393:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 395:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Initialize ADC error code */
 397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 398:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 399:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 401:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 402:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the low level hardware */
 403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 405:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 406:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 408:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */ 
 409:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on the fly).                                                             */
 411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 414:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 417:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 418:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 420:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 421:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 422:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock mode                                                      */
 423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock prescaler                                                 */
 424:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC resolution                                                      */
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_IS_ENABLE(hadc) == RESET)
 426:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 427:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 428:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 430:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 431:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameters):                                                         */
 432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 433:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
ARM GAS  /tmp/cc3nkBGN.s 			page 9


 434:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 435:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC resolution                                      */
 436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 437:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 438:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.Resolution );
 439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 440:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC clock mode: clock source AHB or HSI with        */
 441:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* selectable prescaler                                                 */
 442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2    ,
 443:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 444:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.ClockPrescaler );
 445:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 446:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 447:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 448:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 449:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 450:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 452:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - overrun                                                             */
 453:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 454:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 455:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - data alignment                                                      */
 456:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - resolution                                                          */
 457:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - scan direction                                                      */
 458:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 460:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 461:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTDLY  |
 462:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_CONT    |
 463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_OVRMOD  |
 464:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTSEL  |
 465:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTEN   |
 466:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_ALIGN   |
 467:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_SCANDIR |
 468:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_DMACFG   );
 469:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 476:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 477:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 479:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 480:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 481:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 482:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 483:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Enable the selected ADC group regular discontinuous mode */
 484:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         tmpCFGR1 |= ADC_CFGR1_DISCEN;
 485:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 487:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 488:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 489:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 490:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                  */
ARM GAS  /tmp/cc3nkBGN.s 			page 10


 491:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 492:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
 493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 494:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 495:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 497:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 498:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 499:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 500:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 501:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* start.                                                                 */
 502:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 503:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 504:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       software start.                                                  */
 505:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 506:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 508:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 509:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 510:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 511:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC configuration register with previous settings */
 512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= tmpCFGR1;
 513:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 514:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Channel sampling time configuration */
 515:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
 516:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (obsolete): sampling time set in this function if parameter            */
 517:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
 518:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Otherwise, sampling time is set into ADC channel initialization        */
 519:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* structure with parameter "SamplingTime" (obsolete).                    */
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 521:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 522:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
 523:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear the old sample time */
 524:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 525:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 526:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the new sample time */
 527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 528:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 529:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 530:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 531:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 532:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check through register CFGR1 (excluding analog watchdog configuration: */
 533:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* set into separate dedicated function, and bits of ADC resolution set   */
 534:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* out of temporary variable 'tmpCFGR1').                                 */
 535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1
 536:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 537:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 538:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to none */
 539:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 540:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 541:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the ADC state */
 542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 543:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 544:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 545:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 546:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 547:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/cc3nkBGN.s 			page 11


 548:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 550:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 551:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 552:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 553:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 554:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 555:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 556:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 557:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 558:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 559:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 560:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 561:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 562:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
 563:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 564:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 566:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 567:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 568:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 569:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 570:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 571:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 572:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 573:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 574:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 575:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 576:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 577:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 578:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 579:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 580:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 581:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         common group is still running.
 582:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 583:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 584:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 585:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 586:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 587:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 588:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 589:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 590:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 591:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 592:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      return HAL_ERROR;
 593:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 594:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 595:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 596:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 597:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 598:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
 599:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 600:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 601:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 602:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 603:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 604:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
ARM GAS  /tmp/cc3nkBGN.s 			page 12


 605:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 606:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 607:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 608:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 609:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 610:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 611:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 612:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Change ADC state */
 614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 615:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 616:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 617:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 618:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 619:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 620:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 622:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 623:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 624:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 625:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register IER */
 626:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 628:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOSMP | ADC_IT_RDY   ) );
 629:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 630:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register ISR */
 631:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 632:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 633:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOSMP | ADC_FLAG_RDY   ) );
 634:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 635:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CR */
 636:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 637:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* "read-set": no direct reset applicable.                                */
 638:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 639:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR1 */
 640:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_
 641:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 642:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_
 643:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN              
 644:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 645:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR2 */
 646:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 647:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       already done above.                                              */
 648:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 649:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register SMPR */
 651:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 652:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 653:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register TR1 */
 654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 655:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 656:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CHSELR */
 657:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 658:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 659:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL11 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL9  | ADC_
 660:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL7  | ADC_CHSELR_CHSEL6  | ADC_CHSELR_CHSEL5  | ADC_
 661:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL3  | ADC_CHSELR_CHSEL2  | ADC_CHSELR_CHSEL1  | ADC_
ARM GAS  /tmp/cc3nkBGN.s 			page 13


 662:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 663:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register DR */
 664:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 665:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 666:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CCR */
 667:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC->CCR &= ~(ADC_CCR_ALL);
 668:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 669:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 670:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 671:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 672:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 673:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 674:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*                                                                        */
 675:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 677:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 678:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* DeInit the low level hardware */
 679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 680:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 681:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC error code to none */
 682:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 683:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 685:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 686:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 687:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 688:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 689:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 690:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 691:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 692:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 693:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 694:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 695:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 696:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 697:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 698:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 699:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 700:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 701:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 702:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 703:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 704:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 706:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 707:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 708:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 709:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 710:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 711:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 712:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 713:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 714:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 715:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 716:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 718:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/cc3nkBGN.s 			page 14


 719:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 720:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 721:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 722:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 723:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 724:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 725:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 726:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 727:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
 728:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 729:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 730:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 731:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    IO operation functions 
 732:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 733:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
 734:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 735:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       ##### IO operation functions #####
 736:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
 737:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 738:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group.
 739:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 740:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 741:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion event.
 742:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 743:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 744:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 745:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 747:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 748:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 749:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 750:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 751:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 752:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 753:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 754:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 755:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 756:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 757:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 758:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 759:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 760:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 761:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 762:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 763:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 764:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 765:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 767:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 768:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
 769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 770:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 771:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 772:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 773:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 774:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 775:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/cc3nkBGN.s 			page 15


 776:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 777:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 778:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 779:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 781:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 782:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
 783:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 786:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 787:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 788:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 789:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 791:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 792:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 793:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 794:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 795:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 796:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 797:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 798:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 799:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
 800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 802:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 803:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 804:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 805:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
 806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 807:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 808:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 809:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 810:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 812:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 813:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 814:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 815:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 816:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 817:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 818:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 819:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
 820:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 821:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
 822:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 823:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 824:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** { 
 825:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 826:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 827:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 828:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 829:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 830:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
 831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 832:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/cc3nkBGN.s 			page 16


 833:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
 834:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 835:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 836:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 837:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 838:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 839:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 840:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 841:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 842:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 843:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 844:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 845:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
 846:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 847:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 848:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 849:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 850:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 851:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 852:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 853:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 854:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 855:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 856:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 857:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 858:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 859:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 860:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 861:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 862:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 863:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 864:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 865:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 866:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 867:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 868:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 869:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 870:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 871:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 872:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 873:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 874:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 875:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 876:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 877:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 878:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 879:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 880:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC;
 881:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  
 882:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 883:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 884:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 885:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence */
 886:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 887:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 888:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 889:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
ARM GAS  /tmp/cc3nkBGN.s 			page 17


 890:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of each conversion */
 891:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 892:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 893:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 894:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* each conversion:                                                       */
 895:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 896:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 897:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 898:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 899:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 900:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 901:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 902:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 903:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 904:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 905:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 906:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 907:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 908:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 909:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 910:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 911:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 912:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 913:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 914:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 915:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
 916:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 917:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 918:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
 919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 920:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 921:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 922:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 923:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 924:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 925:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 926:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 927:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 928:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 929:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
 930:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 931:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 932:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
 933:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 934:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 935:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 936:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 937:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update ADC state machine */
 938:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 940:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 941:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 943:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 944:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 945:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 946:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
ARM GAS  /tmp/cc3nkBGN.s 			page 18


 947:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 948:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 949:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 950:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 951:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 952:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 953:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 954:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 955:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 956:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 957:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 958:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC state */
 959:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 960:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 961:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 962:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 963:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 964:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 965:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Change ADC state to error state */
 966:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 967:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 968:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 969:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 970:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 971:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 972:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 973:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 974:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 975:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 976:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 977:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 978:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 979:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 980:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 981:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 983:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
 984:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 985:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 986:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 987:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 988:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Poll for conversion event.
 989:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 990:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  EventType the ADC event type.
 991:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          This parameter can be one of the following values:
 992:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
 993:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
 994:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 995:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 996:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 997:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 999:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
1000:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1001:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1002:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1003:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
ARM GAS  /tmp/cc3nkBGN.s 			page 19


1004:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1005:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
1006:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();   
1007:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1008:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check selected event flag */
1009:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1010:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1011:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1012:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1013:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1014:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
1015:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1016:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1017:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1018:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1019:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
1020:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1021:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1022:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
1023:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1024:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1025:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1026:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1027:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   switch(EventType)
1028:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1029:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1030:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1031:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
1032:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1033:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1034:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1035:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1036:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
1037:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1038:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Overrun event */
1039:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1040:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1041:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* considered as an error.                                                */
1042:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1043:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1044:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1045:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1046:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1047:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1048:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1049:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1050:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1051:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1052:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1053:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1054:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1055:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
1056:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1057:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1058:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1059:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
1060:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
ARM GAS  /tmp/cc3nkBGN.s 			page 20


1061:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1062:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1063:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1064:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1065:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - EOC (end of conversion of regular group) or EOS (end of 
1066:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence of regular group) depending on ADC initialization 
1067:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            parameter "EOCSelection"
1068:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun (if available)
1069:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1070:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1071:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1072:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1073:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1074:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1075:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1076:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1077:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1078:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1079:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1080:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1081:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1082:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1083:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1085:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
1086:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1087:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1088:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1089:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1090:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1091:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1092:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1093:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1094:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1095:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1097:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1098:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1099:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
ARM GAS  /tmp/cc3nkBGN.s 			page 21


1118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
1125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         default:
1127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
1129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
1142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable interruption of 
1150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
ARM GAS  /tmp/cc3nkBGN.s 			page 22


1175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         through DMA.
1197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA transfer complete
1199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA half transfer
1200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun
1201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
ARM GAS  /tmp/cc3nkBGN.s 			page 23


1232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA error callback */
1253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Start the DMA channel */
1271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
1273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/cc3nkBGN.s 			page 24


1289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC DMA transfer, disable 
1291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC peripheral.
1292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {  
1298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
1314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
1318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_Disable(hadc);
1339:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1340:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1341:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1343:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1344:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cc3nkBGN.s 			page 25


1346:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1347:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1348:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1349:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1350:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1351:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1352:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1354:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1355:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1356:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1358:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1359:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1362:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1363:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1364:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1366:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            to flag EOC.
1368:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1369:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1370:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1371:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         To clear this flag, either use function: 
1372:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1373:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1374:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1375:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1376:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1377:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1378:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1380:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1381:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1382:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1383:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1384:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1385:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1386:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC converted value */ 
1387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->Instance->DR;
1388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1389:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1390:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1391:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Handles ADC interrupt request.  
1392:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1393:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1395:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1398:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1399:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1401:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1402:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
ARM GAS  /tmp/cc3nkBGN.s 			page 26


1403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1405:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1406:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1408:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1409:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1414:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1417:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1418:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1420:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1421:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1422:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1424:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1426:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1427:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1428:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1430:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1431:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
1432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1433:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1434:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1435:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
1437:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1438:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
1439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1440:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1441:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1443:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1444:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1445:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1446:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1447:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
1448:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1449:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1450:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1452:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1453:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1454:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1455:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1456:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1457:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1458:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
ARM GAS  /tmp/cc3nkBGN.s 			page 27


1460:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1461:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1462:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1464:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1465:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1466:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1467:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1468:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Level out of window callback */ 
1469:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1476:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1477:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1479:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1480:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1481:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1482:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1483:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1484:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1485:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* error.                                                                 */
1486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1487:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1488:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1489:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1490:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1491:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1492:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1494:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1495:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Error callback */ 
1496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1497:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1498:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1499:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the Overrun flag */
1500:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1501:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1502:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1503:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1504:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1505:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1506:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1508:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1509:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1510:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1511:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1513:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1514:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1515:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1516:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
ARM GAS  /tmp/cc3nkBGN.s 			page 28


1517:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1518:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */
1519:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1521:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1522:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1523:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1524:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1525:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1526:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1528:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1529:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1530:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1531:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1532:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1533:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1534:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1536:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1537:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1538:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1539:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1540:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1541:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1543:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1544:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1545:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1546:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1547:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
1548:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1550:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1551:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1552:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1553:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1554:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1555:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1556:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1557:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1558:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1559:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1560:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1561:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1562:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1563:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1564:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1566:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1567:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1568:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1569:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1570:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1571:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1572:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1573:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
ARM GAS  /tmp/cc3nkBGN.s 			page 29


1574:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1575:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
1576:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1577:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1578:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1579:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1580:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure channels on regular group
1581:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure the analog watchdog
1582:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1583:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1584:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1585:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1586:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1587:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1588:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1589:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         group.
1590:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1591:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         VrefInt/Vbat/TempSensor.
1592:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1593:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1594:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         setting).
1595:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1596:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         TS_vbat, TS_temp (values rough order: 5us to 17us).
1597:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1598:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1599:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1600:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1601:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1602:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1603:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1604:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1605:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1606:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1607:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1608:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel for regular group.
1609:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1610:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1611:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1612:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1615:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1616:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1617:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1618:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1619:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1620:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
1622:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1623:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1624:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1625:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1626:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1628:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1629:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1630:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
ARM GAS  /tmp/cc3nkBGN.s 			page 30


1631:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1632:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel number                                                        */
1633:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel sampling time                                                 */
1634:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
1635:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1636:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1637:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
1638:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC conversion sequencer.                                              */
1639:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (sConfig->Rank != ADC_RANK_NONE)
1640:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1641:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1642:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the channel selection register from the selected channel */
1643:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
1644:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1645:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
1646:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
1647:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (obsolete): sampling time set in this function with                  */
1648:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameter "SamplingTime" (obsolete) only if not already set into     */
1649:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADC initialization structure with parameter "SamplingTimeCommon".    */
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
1651:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1652:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Modify sampling time if needed (not needed in case of reoccurrence */
1653:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* for several channels programmed consecutively into the sequencer)  */
1654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
1655:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1656:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Channel sampling time configuration */
1657:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Clear the old sample time */
1658:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
1659:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1660:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set the new sample time */
1661:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
1662:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1663:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1664:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1665:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1666:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
1667:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
1668:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
1669:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
1670:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
1671:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
1672:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1673:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path. */
1674:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, enable VREFINT measurement path. */
1675:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, enable VBAT measurement path. */
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
1677:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1678:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Temp. sensor is selected, wait for stabilization delay */
1679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1680:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1681:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1682:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1683:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
1684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
1685:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
1686:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             wait_loop_index--;
1687:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
ARM GAS  /tmp/cc3nkBGN.s 			page 31


1688:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1689:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1690:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1691:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1692:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1693:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1694:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset the channel selection register from the selected channel */
1695:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
1696:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1697:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1698:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths disable: If internal channel selected,    */
1699:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* disable dedicated internal buffers and path.                         */
1700:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
1701:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1702:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, disable Temp. sensor measurement path. */
1703:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, disable VREFINT measurement path. */
1704:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, disable VBAT measurement path. */
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
1706:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1707:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1708:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1709:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1710:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1711:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
1712:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
1713:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* parameters.                                                              */
1714:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1715:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1716:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1718:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1719:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1720:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1721:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1722:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1723:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1724:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1725:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1726:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1727:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1728:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1729:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1730:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1731:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1732:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1733:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, following  
1734:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1735:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without reseting 
1736:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1737:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1738:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1739:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1740:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1741:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
1742:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1743:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1744:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
ARM GAS  /tmp/cc3nkBGN.s 			page 32


1745:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1747:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1748:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1749:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1750:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1751:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1752:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1753:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1754:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1755:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1756:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1757:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1758:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1759:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1760:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1761:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1762:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1763:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1764:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1765:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1767:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1768:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1770:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1771:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1772:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1773:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1774:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1775:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                      */
1776:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the analog watchdog enable mode: one or overall group of        */
1777:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    channels.                                                           */
1778:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog            */
1779:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
1780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
1781:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
1782:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDCH   );
1783:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
1785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
1786:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1787:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds*/
1788:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
1789:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
1790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
1791:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1792:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set the high and low thresholds */
1793:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
1794:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
1795:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
1796:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1797:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
1798:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
1799:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* or HAL_ADC_PollForEvent().                                             */
1800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
1801:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/cc3nkBGN.s 			page 33


1802:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1803:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
1804:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1805:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1807:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1808:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1809:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1810:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1812:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1813:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1814:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1815:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1816:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1817:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1818:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1819:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1820:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1821:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1822:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1823:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1824:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1825:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1826:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1827:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1828:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1829:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1830:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1832:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1833:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1834:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1835:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1836:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1837:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1838:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1839:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1840:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral State functions
1841:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1842:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim
1843:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1844:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1845:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1846:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
1847:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1848:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     peripheral.
1849:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC state
1850:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC error code
1851:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1852:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1853:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1854:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1855:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1856:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1857:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC state
1858:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
ARM GAS  /tmp/cc3nkBGN.s 			page 34


1859:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         compared with states bits.
1860:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For example:                                                         
1861:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1862:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1863:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1864:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL state
1865:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1866:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1867:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1868:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1869:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1870:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1871:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1872:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->State;
1873:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1874:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1875:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1876:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC error code
1877:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1878:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC Error Code
1879:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1880:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1881:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1882:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
1883:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1884:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1885:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1886:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1887:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */  
1888:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1889:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1890:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1891:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1892:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1893:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1894:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1895:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1896:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1897:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1898:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1899:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1900:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1901:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1902:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed automatically by hardware.
1903:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1904:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1905:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1906:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
1907:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1908:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1909:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1910:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1911:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1912:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1913:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1914:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1915:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
ARM GAS  /tmp/cc3nkBGN.s 			page 35


1916:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1917:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1918:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1920:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1921:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1922:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
1923:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1924:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1925:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1926:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1927:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1928:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1929:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1930:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1931:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1932:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1933:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1934:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1935:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1936:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1937:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1938:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
1939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
1940:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1941:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       wait_loop_index--;
1942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1943:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1944:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
1945:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
1946:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1947:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1948:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
1949:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1950:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1951:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1952:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
1953:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1954:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1955:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1956:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1957:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1958:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
1959:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1960:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }   
1961:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1962:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1963:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1964:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
1965:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
1966:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1967:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1968:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1969:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1970:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1971:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped.
1972:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
ARM GAS  /tmp/cc3nkBGN.s 			page 36


1973:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1974:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1975:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1976:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1977:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1978:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1979:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1980:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1981:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       disabled.                                                          */
1982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1983:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1984:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1985:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
1986:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1987:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1988:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
1989:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1990:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1991:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1992:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1993:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1994:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1995:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1996:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1997:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1999:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2000:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
2001:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2002:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2003:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2004:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2005:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2006:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2007:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2008:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2009:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2010:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2011:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2012:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2013:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2014:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2015:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
2016:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2017:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2018:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2019:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2020:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2021:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
2022:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
2023:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2024:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2025:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2026:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2027:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2028:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped to disable the ADC.
2029:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
ARM GAS  /tmp/cc3nkBGN.s 			page 37


2030:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
2031:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2032:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2033:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
  25              		.loc 1 2033 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              		.cfi_def_cfa_offset 16
  32              		.cfi_offset 4, -16
  33              		.cfi_offset 5, -12
  34              		.cfi_offset 6, -8
  35              		.cfi_offset 14, -4
  36 0002 0400     		movs	r4, r0
  37              	.LVL1:
2034:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2035:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2036:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2037:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2038:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2039:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2040:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* this function if not needed.                                             */
2041:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
  38              		.loc 1 2041 0
  39 0004 0368     		ldr	r3, [r0]
  40 0006 9A68     		ldr	r2, [r3, #8]
  41 0008 5207     		lsls	r2, r2, #29
  42 000a 21D5     		bpl	.L6
2042:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2043:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2044:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2045:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2046:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
  43              		.loc 1 2046 0
  44 000c 9A68     		ldr	r2, [r3, #8]
  45 000e 5207     		lsls	r2, r2, #29
  46 0010 06D5     		bpl	.L3
2047:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
  47              		.loc 1 2047 0 discriminator 1
  48 0012 9A68     		ldr	r2, [r3, #8]
2046:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
  49              		.loc 1 2046 0 discriminator 1
  50 0014 9207     		lsls	r2, r2, #30
  51 0016 03D4     		bmi	.L3
2048:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2049:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Stop conversions on regular group */
2050:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
  52              		.loc 1 2050 0
  53 0018 9A68     		ldr	r2, [r3, #8]
  54 001a 1021     		movs	r1, #16
  55 001c 0A43     		orrs	r2, r1
  56 001e 9A60     		str	r2, [r3, #8]
  57              	.L3:
2051:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2052:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/cc3nkBGN.s 			page 38


2053:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2054:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2055:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
  58              		.loc 1 2055 0
  59 0020 FFF7FEFF 		bl	HAL_GetTick
  60              	.LVL2:
  61 0024 0500     		movs	r5, r0
  62              	.LVL3:
  63              	.L4:
2056:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2057:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
  64              		.loc 1 2057 0
  65 0026 2368     		ldr	r3, [r4]
  66 0028 9B68     		ldr	r3, [r3, #8]
  67 002a 5B07     		lsls	r3, r3, #29
  68 002c 0ED5     		bpl	.L7
2058:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2059:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
  69              		.loc 1 2059 0
  70 002e FFF7FEFF 		bl	HAL_GetTick
  71              	.LVL4:
  72 0032 401B     		subs	r0, r0, r5
  73 0034 0228     		cmp	r0, #2
  74 0036 F6D9     		bls	.L4
2060:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2061:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2062:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
  75              		.loc 1 2062 0
  76 0038 636C     		ldr	r3, [r4, #68]
  77 003a 1022     		movs	r2, #16
  78 003c 1343     		orrs	r3, r2
  79 003e 6364     		str	r3, [r4, #68]
2063:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2064:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2065:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  80              		.loc 1 2065 0
  81 0040 A36C     		ldr	r3, [r4, #72]
  82 0042 0F3A     		subs	r2, r2, #15
  83 0044 1343     		orrs	r3, r2
  84 0046 A364     		str	r3, [r4, #72]
2066:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2067:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
  85              		.loc 1 2067 0
  86 0048 0120     		movs	r0, #1
  87 004a 02E0     		b	.L2
  88              	.L7:
2068:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2069:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2070:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2071:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2072:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
2073:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2074:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
  89              		.loc 1 2074 0
  90 004c 0020     		movs	r0, #0
  91 004e 00E0     		b	.L2
  92              	.LVL5:
ARM GAS  /tmp/cc3nkBGN.s 			page 39


  93              	.L6:
  94 0050 0020     		movs	r0, #0
  95              	.LVL6:
  96              	.L2:
2075:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
  97              		.loc 1 2075 0
  98              		@ sp needed
  99              	.LVL7:
 100 0052 70BD     		pop	{r4, r5, r6, pc}
 101              		.cfi_endproc
 102              	.LFE61:
 104              		.section	.text.ADC_Disable,"ax",%progbits
 105              		.align	1
 106              		.syntax unified
 107              		.code	16
 108              		.thumb_func
 109              		.fpu softvfp
 111              	ADC_Disable:
 112              	.LFB60:
1976:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 113              		.loc 1 1976 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL8:
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              		.cfi_def_cfa_offset 16
 120              		.cfi_offset 4, -16
 121              		.cfi_offset 5, -12
 122              		.cfi_offset 6, -8
 123              		.cfi_offset 14, -4
 124 0002 0400     		movs	r4, r0
 125              	.LVL9:
1982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 126              		.loc 1 1982 0
 127 0004 0268     		ldr	r2, [r0]
 128 0006 9168     		ldr	r1, [r2, #8]
 129 0008 0323     		movs	r3, #3
 130 000a 0B40     		ands	r3, r1
 131 000c 012B     		cmp	r3, #1
 132 000e 01D0     		beq	.L16
2021:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 133              		.loc 1 2021 0
 134 0010 0020     		movs	r0, #0
 135              	.LVL10:
 136              	.L9:
2022:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 137              		.loc 1 2022 0
 138              		@ sp needed
 139              	.LVL11:
 140 0012 70BD     		pop	{r4, r5, r6, pc}
 141              	.LVL12:
 142              	.L16:
1982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 143              		.loc 1 1982 0 discriminator 1
 144 0014 1368     		ldr	r3, [r2]
 145 0016 DB07     		lsls	r3, r3, #31
ARM GAS  /tmp/cc3nkBGN.s 			page 40


 146 0018 02D4     		bmi	.L10
1982:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 147              		.loc 1 1982 0 is_stmt 0 discriminator 4
 148 001a D368     		ldr	r3, [r2, #12]
 149 001c 1B04     		lsls	r3, r3, #16
 150 001e 2DD5     		bpl	.L15
 151              	.L10:
1985:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 152              		.loc 1 1985 0 is_stmt 1
 153 0020 9168     		ldr	r1, [r2, #8]
 154 0022 0523     		movs	r3, #5
 155 0024 0B40     		ands	r3, r1
 156 0026 012B     		cmp	r3, #1
 157 0028 09D0     		beq	.L17
1993:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 158              		.loc 1 1993 0
 159 002a 636C     		ldr	r3, [r4, #68]
 160 002c 1022     		movs	r2, #16
 161 002e 1343     		orrs	r3, r2
 162 0030 6364     		str	r3, [r4, #68]
1996:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 163              		.loc 1 1996 0
 164 0032 A36C     		ldr	r3, [r4, #72]
 165 0034 0F3A     		subs	r2, r2, #15
 166 0036 1343     		orrs	r3, r2
 167 0038 A364     		str	r3, [r4, #72]
1998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 168              		.loc 1 1998 0
 169 003a 0120     		movs	r0, #1
 170              	.LVL13:
 171 003c E9E7     		b	.L9
 172              	.LVL14:
 173              	.L17:
1988:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 174              		.loc 1 1988 0
 175 003e 9368     		ldr	r3, [r2, #8]
 176 0040 0221     		movs	r1, #2
 177 0042 0B43     		orrs	r3, r1
 178 0044 9360     		str	r3, [r2, #8]
 179 0046 2368     		ldr	r3, [r4]
 180 0048 0322     		movs	r2, #3
 181 004a 1A60     		str	r2, [r3]
2003:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 182              		.loc 1 2003 0
 183 004c FFF7FEFF 		bl	HAL_GetTick
 184              	.LVL15:
 185 0050 0500     		movs	r5, r0
 186              	.LVL16:
 187              	.L12:
2005:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 188              		.loc 1 2005 0
 189 0052 2368     		ldr	r3, [r4]
 190 0054 9B68     		ldr	r3, [r3, #8]
 191 0056 DB07     		lsls	r3, r3, #31
 192 0058 0ED5     		bpl	.L18
2007:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 193              		.loc 1 2007 0
ARM GAS  /tmp/cc3nkBGN.s 			page 41


 194 005a FFF7FEFF 		bl	HAL_GetTick
 195              	.LVL17:
 196 005e 401B     		subs	r0, r0, r5
 197 0060 0228     		cmp	r0, #2
 198 0062 F6D9     		bls	.L12
2010:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 199              		.loc 1 2010 0
 200 0064 636C     		ldr	r3, [r4, #68]
 201 0066 1022     		movs	r2, #16
 202 0068 1343     		orrs	r3, r2
 203 006a 6364     		str	r3, [r4, #68]
2013:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 204              		.loc 1 2013 0
 205 006c A36C     		ldr	r3, [r4, #72]
 206 006e 0F3A     		subs	r2, r2, #15
 207 0070 1343     		orrs	r3, r2
 208 0072 A364     		str	r3, [r4, #72]
2015:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 209              		.loc 1 2015 0
 210 0074 0120     		movs	r0, #1
 211 0076 CCE7     		b	.L9
 212              	.L18:
2021:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 213              		.loc 1 2021 0
 214 0078 0020     		movs	r0, #0
 215 007a CAE7     		b	.L9
 216              	.LVL18:
 217              	.L15:
 218 007c 0020     		movs	r0, #0
 219              	.LVL19:
 220 007e C8E7     		b	.L9
 221              		.cfi_endproc
 222              	.LFE60:
 224              		.global	__aeabi_uidiv
 225              		.section	.text.ADC_Enable,"ax",%progbits
 226              		.align	1
 227              		.syntax unified
 228              		.code	16
 229              		.thumb_func
 230              		.fpu softvfp
 232              	ADC_Enable:
 233              	.LFB59:
1911:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 234              		.loc 1 1911 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 8
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL20:
 239 0000 30B5     		push	{r4, r5, lr}
 240              		.cfi_def_cfa_offset 12
 241              		.cfi_offset 4, -12
 242              		.cfi_offset 5, -8
 243              		.cfi_offset 14, -4
 244 0002 83B0     		sub	sp, sp, #12
 245              		.cfi_def_cfa_offset 24
 246 0004 0400     		movs	r4, r0
 247              	.LVL21:
ARM GAS  /tmp/cc3nkBGN.s 			page 42


1913:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 248              		.loc 1 1913 0
 249 0006 0023     		movs	r3, #0
 250 0008 0193     		str	r3, [sp, #4]
1919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 251              		.loc 1 1919 0
 252 000a 0368     		ldr	r3, [r0]
 253 000c 9968     		ldr	r1, [r3, #8]
 254 000e 0322     		movs	r2, #3
 255 0010 0A40     		ands	r2, r1
 256 0012 012A     		cmp	r2, #1
 257 0014 0ED0     		beq	.L29
 258              	.L20:
1922:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 259              		.loc 1 1922 0
 260 0016 9968     		ldr	r1, [r3, #8]
 261 0018 204A     		ldr	r2, .L32
 262 001a 1142     		tst	r1, r2
 263 001c 12D1     		bne	.L30
1934:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 264              		.loc 1 1934 0
 265 001e 9A68     		ldr	r2, [r3, #8]
 266 0020 0121     		movs	r1, #1
 267 0022 0A43     		orrs	r2, r1
 268 0024 9A60     		str	r2, [r3, #8]
1938:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 269              		.loc 1 1938 0
 270 0026 1E4B     		ldr	r3, .L32+4
 271 0028 1868     		ldr	r0, [r3]
 272              	.LVL22:
 273 002a 1E49     		ldr	r1, .L32+8
 274 002c FFF7FEFF 		bl	__aeabi_uidiv
 275              	.LVL23:
 276 0030 0190     		str	r0, [sp, #4]
1939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 277              		.loc 1 1939 0
 278 0032 15E0     		b	.L23
 279              	.LVL24:
 280              	.L29:
1919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 281              		.loc 1 1919 0 discriminator 1
 282 0034 1A68     		ldr	r2, [r3]
 283 0036 D207     		lsls	r2, r2, #31
 284 0038 2DD4     		bmi	.L27
1919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 285              		.loc 1 1919 0 is_stmt 0 discriminator 4
 286 003a DA68     		ldr	r2, [r3, #12]
 287 003c 1204     		lsls	r2, r2, #16
 288 003e EAD5     		bpl	.L20
1965:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 289              		.loc 1 1965 0 is_stmt 1
 290 0040 0020     		movs	r0, #0
 291              	.LVL25:
 292 0042 08E0     		b	.L21
 293              	.LVL26:
 294              	.L30:
1925:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/cc3nkBGN.s 			page 43


 295              		.loc 1 1925 0
 296 0044 636C     		ldr	r3, [r4, #68]
 297 0046 1022     		movs	r2, #16
 298 0048 1343     		orrs	r3, r2
 299 004a 6364     		str	r3, [r4, #68]
1928:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 300              		.loc 1 1928 0
 301 004c A36C     		ldr	r3, [r4, #72]
 302 004e 0F3A     		subs	r2, r2, #15
 303 0050 1343     		orrs	r3, r2
 304 0052 A364     		str	r3, [r4, #72]
1930:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 305              		.loc 1 1930 0
 306 0054 0120     		movs	r0, #1
 307              	.LVL27:
 308              	.L21:
1966:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 309              		.loc 1 1966 0
 310 0056 03B0     		add	sp, sp, #12
 311              		@ sp needed
 312              	.LVL28:
 313 0058 30BD     		pop	{r4, r5, pc}
 314              	.LVL29:
 315              	.L24:
1941:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 316              		.loc 1 1941 0
 317 005a 019B     		ldr	r3, [sp, #4]
 318 005c 013B     		subs	r3, r3, #1
 319 005e 0193     		str	r3, [sp, #4]
 320              	.L23:
1939:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 321              		.loc 1 1939 0
 322 0060 019B     		ldr	r3, [sp, #4]
 323 0062 002B     		cmp	r3, #0
 324 0064 F9D1     		bne	.L24
1945:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 325              		.loc 1 1945 0
 326 0066 FFF7FEFF 		bl	HAL_GetTick
 327              	.LVL30:
 328 006a 0500     		movs	r5, r0
 329              	.LVL31:
 330              	.L25:
1948:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 331              		.loc 1 1948 0
 332 006c 2368     		ldr	r3, [r4]
 333 006e 1B68     		ldr	r3, [r3]
 334 0070 DB07     		lsls	r3, r3, #31
 335 0072 0ED4     		bmi	.L31
1950:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 336              		.loc 1 1950 0
 337 0074 FFF7FEFF 		bl	HAL_GetTick
 338              	.LVL32:
 339 0078 401B     		subs	r0, r0, r5
 340 007a 0228     		cmp	r0, #2
 341 007c F6D9     		bls	.L25
1953:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 342              		.loc 1 1953 0
ARM GAS  /tmp/cc3nkBGN.s 			page 44


 343 007e 636C     		ldr	r3, [r4, #68]
 344 0080 1022     		movs	r2, #16
 345 0082 1343     		orrs	r3, r2
 346 0084 6364     		str	r3, [r4, #68]
1956:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 347              		.loc 1 1956 0
 348 0086 A36C     		ldr	r3, [r4, #72]
 349 0088 0F3A     		subs	r2, r2, #15
 350 008a 1343     		orrs	r3, r2
 351 008c A364     		str	r3, [r4, #72]
1958:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 352              		.loc 1 1958 0
 353 008e 0120     		movs	r0, #1
 354 0090 E1E7     		b	.L21
 355              	.L31:
1965:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 356              		.loc 1 1965 0
 357 0092 0020     		movs	r0, #0
 358 0094 DFE7     		b	.L21
 359              	.LVL33:
 360              	.L27:
 361 0096 0020     		movs	r0, #0
 362              	.LVL34:
 363 0098 DDE7     		b	.L21
 364              	.L33:
 365 009a C046     		.align	2
 366              	.L32:
 367 009c 17000080 		.word	-2147483625
 368 00a0 00000000 		.word	SystemCoreClock
 369 00a4 40420F00 		.word	1000000
 370              		.cfi_endproc
 371              	.LFE59:
 373              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 374              		.align	1
 375              		.weak	HAL_ADC_MspInit
 376              		.syntax unified
 377              		.code	16
 378              		.thumb_func
 379              		.fpu softvfp
 381              	HAL_ADC_MspInit:
 382              	.LFB39:
 702:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 383              		.loc 1 702 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388              	.LVL35:
 709:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 389              		.loc 1 709 0
 390              		@ sp needed
 391 0000 7047     		bx	lr
 392              		.cfi_endproc
 393              	.LFE39:
 395              		.section	.text.HAL_ADC_Init,"ax",%progbits
 396              		.align	1
 397              		.global	HAL_ADC_Init
ARM GAS  /tmp/cc3nkBGN.s 			page 45


 398              		.syntax unified
 399              		.code	16
 400              		.thumb_func
 401              		.fpu softvfp
 403              	HAL_ADC_Init:
 404              	.LFB37:
 360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 405              		.loc 1 360 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              	.LVL36:
 410 0000 70B5     		push	{r4, r5, r6, lr}
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 4, -16
 413              		.cfi_offset 5, -12
 414              		.cfi_offset 6, -8
 415              		.cfi_offset 14, -4
 416 0002 041E     		subs	r4, r0, #0
 417              	.LVL37:
 365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 418              		.loc 1 365 0
 419 0004 00D1     		bne	.LCB383
 420 0006 B0E0     		b	.L49	@long jump
 421              	.LCB383:
 394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 422              		.loc 1 394 0
 423 0008 436C     		ldr	r3, [r0, #68]
 424 000a 002B     		cmp	r3, #0
 425 000c 7DD0     		beq	.L51
 426              	.LVL38:
 427              	.L37:
 411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 428              		.loc 1 411 0
 429 000e 636C     		ldr	r3, [r4, #68]
 430 0010 DB06     		lsls	r3, r3, #27
 431 0012 00D5     		bpl	.LCB393
 432 0014 A3E0     		b	.L38	@long jump
 433              	.LCB393:
 413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 434              		.loc 1 413 0
 435 0016 2168     		ldr	r1, [r4]
 436 0018 8B68     		ldr	r3, [r1, #8]
 437 001a 0422     		movs	r2, #4
 438 001c 1A40     		ands	r2, r3
 412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 439              		.loc 1 412 0
 440 001e 00D0     		beq	.LCB399
 441 0020 9DE0     		b	.L38	@long jump
 442              	.LCB399:
 416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 443              		.loc 1 416 0
 444 0022 636C     		ldr	r3, [r4, #68]
 445 0024 5248     		ldr	r0, .L56
 446 0026 0340     		ands	r3, r0
 447 0028 0630     		adds	r0, r0, #6
 448 002a FF30     		adds	r0, r0, #255
ARM GAS  /tmp/cc3nkBGN.s 			page 46


 449 002c 0343     		orrs	r3, r0
 450 002e 6364     		str	r3, [r4, #68]
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 451              		.loc 1 425 0
 452 0030 8868     		ldr	r0, [r1, #8]
 453 0032 0323     		movs	r3, #3
 454 0034 0340     		ands	r3, r0
 455 0036 012B     		cmp	r3, #1
 456 0038 6DD0     		beq	.L52
 457              	.L39:
 436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 458              		.loc 1 436 0
 459 003a CB68     		ldr	r3, [r1, #12]
 460 003c 1820     		movs	r0, #24
 461 003e 8343     		bics	r3, r0
 462 0040 A068     		ldr	r0, [r4, #8]
 463 0042 0343     		orrs	r3, r0
 464 0044 CB60     		str	r3, [r1, #12]
 442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 465              		.loc 1 442 0
 466 0046 2168     		ldr	r1, [r4]
 467 0048 0B69     		ldr	r3, [r1, #16]
 468 004a 9B00     		lsls	r3, r3, #2
 469 004c 9B08     		lsrs	r3, r3, #2
 470 004e 6068     		ldr	r0, [r4, #4]
 471 0050 0343     		orrs	r3, r0
 472 0052 0B61     		str	r3, [r1, #16]
 473              	.L40:
 459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 474              		.loc 1 459 0
 475 0054 2168     		ldr	r1, [r4]
 476 0056 CB68     		ldr	r3, [r1, #12]
 477 0058 4648     		ldr	r0, .L56+4
 478 005a 0340     		ands	r3, r0
 479 005c CB60     		str	r3, [r1, #12]
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 480              		.loc 1 470 0
 481 005e A369     		ldr	r3, [r4, #24]
 482 0060 9B03     		lsls	r3, r3, #14
 471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 483              		.loc 1 471 0
 484 0062 E169     		ldr	r1, [r4, #28]
 485 0064 C903     		lsls	r1, r1, #15
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 486              		.loc 1 470 0
 487 0066 0B43     		orrs	r3, r1
 472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 488              		.loc 1 472 0
 489 0068 216A     		ldr	r1, [r4, #32]
 490 006a 4803     		lsls	r0, r1, #13
 471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 491              		.loc 1 471 0
 492 006c 0343     		orrs	r3, r0
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 493              		.loc 1 473 0
 494 006e 606B     		ldr	r0, [r4, #52]
 495 0070 0128     		cmp	r0, #1
ARM GAS  /tmp/cc3nkBGN.s 			page 47


 496 0072 57D0     		beq	.L50
 497 0074 8020     		movs	r0, #128
 498 0076 4001     		lsls	r0, r0, #5
 499              	.L41:
 472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 500              		.loc 1 472 0
 501 0078 0343     		orrs	r3, r0
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 502              		.loc 1 473 0
 503 007a E068     		ldr	r0, [r4, #12]
 504 007c 0343     		orrs	r3, r0
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 505              		.loc 1 475 0
 506 007e 2069     		ldr	r0, [r4, #16]
 507 0080 0228     		cmp	r0, #2
 508 0082 51D0     		beq	.L53
 509              	.L42:
 474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 510              		.loc 1 474 0
 511 0084 1343     		orrs	r3, r2
 476:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 512              		.loc 1 476 0
 513 0086 226B     		ldr	r2, [r4, #48]
 514 0088 5200     		lsls	r2, r2, #1
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 515              		.loc 1 475 0
 516 008a 1343     		orrs	r3, r2
 517              	.LVL39:
 479:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 518              		.loc 1 479 0
 519 008c 626A     		ldr	r2, [r4, #36]
 520 008e 012A     		cmp	r2, #1
 521 0090 4CD0     		beq	.L54
 522              	.L43:
 505:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 523              		.loc 1 505 0
 524 0092 A26A     		ldr	r2, [r4, #40]
 525 0094 C221     		movs	r1, #194
 526 0096 FF31     		adds	r1, r1, #255
 527 0098 8A42     		cmp	r2, r1
 528 009a 02D0     		beq	.L45
 507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 529              		.loc 1 507 0
 530 009c E16A     		ldr	r1, [r4, #44]
 531 009e 0A43     		orrs	r2, r1
 532 00a0 1343     		orrs	r3, r2
 533              	.LVL40:
 534              	.L45:
 512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 535              		.loc 1 512 0
 536 00a2 2168     		ldr	r1, [r4]
 537 00a4 CA68     		ldr	r2, [r1, #12]
 538 00a6 1A43     		orrs	r2, r3
 539 00a8 CA60     		str	r2, [r1, #12]
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 540              		.loc 1 520 0
 541 00aa A26B     		ldr	r2, [r4, #56]
ARM GAS  /tmp/cc3nkBGN.s 			page 48


 542 00ac 8021     		movs	r1, #128
 543 00ae 4905     		lsls	r1, r1, #21
 544 00b0 8A42     		cmp	r2, r1
 545 00b2 0DD0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 546              		.loc 1 520 0 is_stmt 0 discriminator 1
 547 00b4 012A     		cmp	r2, #1
 548 00b6 0BD0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 549              		.loc 1 520 0 discriminator 2
 550 00b8 022A     		cmp	r2, #2
 551 00ba 09D0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 552              		.loc 1 520 0 discriminator 3
 553 00bc 032A     		cmp	r2, #3
 554 00be 07D0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 555              		.loc 1 520 0 discriminator 4
 556 00c0 042A     		cmp	r2, #4
 557 00c2 05D0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 558              		.loc 1 520 0 discriminator 5
 559 00c4 052A     		cmp	r2, #5
 560 00c6 03D0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 561              		.loc 1 520 0 discriminator 6
 562 00c8 062A     		cmp	r2, #6
 563 00ca 01D0     		beq	.L46
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 564              		.loc 1 520 0 discriminator 7
 565 00cc 072A     		cmp	r2, #7
 566 00ce 0AD1     		bne	.L47
 567              	.L46:
 524:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 568              		.loc 1 524 0 is_stmt 1
 569 00d0 2068     		ldr	r0, [r4]
 570 00d2 4169     		ldr	r1, [r0, #20]
 571 00d4 0722     		movs	r2, #7
 572 00d6 9143     		bics	r1, r2
 573 00d8 4161     		str	r1, [r0, #20]
 527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 574              		.loc 1 527 0
 575 00da 2068     		ldr	r0, [r4]
 576 00dc 4169     		ldr	r1, [r0, #20]
 577 00de A56B     		ldr	r5, [r4, #56]
 578 00e0 2A40     		ands	r2, r5
 579 00e2 0A43     		orrs	r2, r1
 580 00e4 4261     		str	r2, [r0, #20]
 581              	.L47:
 535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 582              		.loc 1 535 0
 583 00e6 2268     		ldr	r2, [r4]
 584 00e8 D268     		ldr	r2, [r2, #12]
 585 00ea 2349     		ldr	r1, .L56+8
 586 00ec 0A40     		ands	r2, r1
 587 00ee 9A42     		cmp	r2, r3
 588 00f0 2BD0     		beq	.L55
ARM GAS  /tmp/cc3nkBGN.s 			page 49


 549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 589              		.loc 1 549 0
 590 00f2 636C     		ldr	r3, [r4, #68]
 591              	.LVL41:
 592 00f4 1222     		movs	r2, #18
 593 00f6 9343     		bics	r3, r2
 594 00f8 023A     		subs	r2, r2, #2
 595 00fa 1343     		orrs	r3, r2
 596 00fc 6364     		str	r3, [r4, #68]
 554:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 597              		.loc 1 554 0
 598 00fe A36C     		ldr	r3, [r4, #72]
 599 0100 0F3A     		subs	r2, r2, #15
 600 0102 1343     		orrs	r3, r2
 601 0104 A364     		str	r3, [r4, #72]
 602              	.LVL42:
 556:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 603              		.loc 1 556 0
 604 0106 0120     		movs	r0, #1
 605 0108 2EE0     		b	.L36
 606              	.LVL43:
 607              	.L51:
 397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 608              		.loc 1 397 0
 609 010a 8364     		str	r3, [r0, #72]
 400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 610              		.loc 1 400 0
 611 010c 4022     		movs	r2, #64
 612 010e 8354     		strb	r3, [r0, r2]
 403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 613              		.loc 1 403 0
 614 0110 FFF7FEFF 		bl	HAL_ADC_MspInit
 615              	.LVL44:
 616 0114 7BE7     		b	.L37
 617              	.L52:
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 618              		.loc 1 425 0 discriminator 1
 619 0116 0B68     		ldr	r3, [r1]
 620 0118 DB07     		lsls	r3, r3, #31
 621 011a 9BD4     		bmi	.L40
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 622              		.loc 1 425 0 is_stmt 0 discriminator 4
 623 011c CB68     		ldr	r3, [r1, #12]
 624 011e 1B04     		lsls	r3, r3, #16
 625 0120 98D4     		bmi	.L40
 626 0122 8AE7     		b	.L39
 627              	.L50:
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 628              		.loc 1 473 0 is_stmt 1
 629 0124 1000     		movs	r0, r2
 630 0126 A7E7     		b	.L41
 631              	.L53:
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 632              		.loc 1 475 0
 633 0128 0422     		movs	r2, #4
 634 012a ABE7     		b	.L42
 635              	.LVL45:
ARM GAS  /tmp/cc3nkBGN.s 			page 50


 636              	.L54:
 481:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 637              		.loc 1 481 0
 638 012c 0029     		cmp	r1, #0
 639 012e 03D1     		bne	.L44
 484:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 640              		.loc 1 484 0
 641 0130 8022     		movs	r2, #128
 642 0132 5202     		lsls	r2, r2, #9
 643 0134 1343     		orrs	r3, r2
 644              	.LVL46:
 645 0136 ACE7     		b	.L43
 646              	.L44:
 493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 647              		.loc 1 493 0
 648 0138 626C     		ldr	r2, [r4, #68]
 649 013a 2021     		movs	r1, #32
 650 013c 0A43     		orrs	r2, r1
 651 013e 6264     		str	r2, [r4, #68]
 496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 652              		.loc 1 496 0
 653 0140 A26C     		ldr	r2, [r4, #72]
 654 0142 1F39     		subs	r1, r1, #31
 655 0144 0A43     		orrs	r2, r1
 656 0146 A264     		str	r2, [r4, #72]
 657 0148 A3E7     		b	.L43
 658              	.L55:
 539:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 659              		.loc 1 539 0
 660 014a 0023     		movs	r3, #0
 661              	.LVL47:
 662 014c A364     		str	r3, [r4, #72]
 542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 663              		.loc 1 542 0
 664 014e 636C     		ldr	r3, [r4, #68]
 665 0150 0322     		movs	r2, #3
 666 0152 9343     		bics	r3, r2
 667 0154 023A     		subs	r2, r2, #2
 668 0156 1343     		orrs	r3, r2
 669 0158 6364     		str	r3, [r4, #68]
 361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
 670              		.loc 1 361 0
 671 015a 0020     		movs	r0, #0
 672 015c 04E0     		b	.L36
 673              	.LVL48:
 674              	.L38:
 563:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 675              		.loc 1 563 0
 676 015e 636C     		ldr	r3, [r4, #68]
 677 0160 1022     		movs	r2, #16
 678 0162 1343     		orrs	r3, r2
 679 0164 6364     		str	r3, [r4, #68]
 680              	.LVL49:
 565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 681              		.loc 1 565 0
 682 0166 0120     		movs	r0, #1
 683              	.LVL50:
ARM GAS  /tmp/cc3nkBGN.s 			page 51


 684              	.L36:
 570:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 685              		.loc 1 570 0
 686              		@ sp needed
 687              	.LVL51:
 688 0168 70BD     		pop	{r4, r5, r6, pc}
 689              	.LVL52:
 690              	.L49:
 367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 691              		.loc 1 367 0
 692 016a 0120     		movs	r0, #1
 693              	.LVL53:
 694 016c FCE7     		b	.L36
 695              	.L57:
 696 016e C046     		.align	2
 697              	.L56:
 698 0170 FDFEFFFF 		.word	-259
 699 0174 1902FEFF 		.word	-130535
 700 0178 E7FF3F83 		.word	-2092957721
 701              		.cfi_endproc
 702              	.LFE37:
 704              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 705              		.align	1
 706              		.weak	HAL_ADC_MspDeInit
 707              		.syntax unified
 708              		.code	16
 709              		.thumb_func
 710              		.fpu softvfp
 712              	HAL_ADC_MspDeInit:
 713              	.LFB40:
 717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 714              		.loc 1 717 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 0
 717              		@ frame_needed = 0, uses_anonymous_args = 0
 718              		@ link register save eliminated.
 719              	.LVL54:
 724:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 720              		.loc 1 724 0
 721              		@ sp needed
 722 0000 7047     		bx	lr
 723              		.cfi_endproc
 724              	.LFE40:
 726              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 727              		.align	1
 728              		.global	HAL_ADC_DeInit
 729              		.syntax unified
 730              		.code	16
 731              		.thumb_func
 732              		.fpu softvfp
 734              	HAL_ADC_DeInit:
 735              	.LFB38:
 586:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 736              		.loc 1 586 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc3nkBGN.s 			page 52


 740              	.LVL55:
 741 0000 70B5     		push	{r4, r5, r6, lr}
 742              		.cfi_def_cfa_offset 16
 743              		.cfi_offset 4, -16
 744              		.cfi_offset 5, -12
 745              		.cfi_offset 6, -8
 746              		.cfi_offset 14, -4
 747 0002 041E     		subs	r4, r0, #0
 748              	.LVL56:
 590:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 749              		.loc 1 590 0
 750 0004 43D0     		beq	.L63
 599:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 751              		.loc 1 599 0
 752 0006 436C     		ldr	r3, [r0, #68]
 753 0008 0222     		movs	r2, #2
 754 000a 1343     		orrs	r3, r2
 755 000c 4364     		str	r3, [r0, #68]
 602:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 756              		.loc 1 602 0
 757 000e FFF7FEFF 		bl	ADC_ConversionStop
 758              	.LVL57:
 759 0012 051E     		subs	r5, r0, #0
 760              	.LVL58:
 605:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 761              		.loc 1 605 0
 762 0014 06D0     		beq	.L64
 763              	.LVL59:
 764              	.L61:
 621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 765              		.loc 1 621 0
 766 0016 012D     		cmp	r5, #1
 767 0018 0DD1     		bne	.L65
 768              	.L62:
 689:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 769              		.loc 1 689 0
 770 001a 4023     		movs	r3, #64
 771 001c 0022     		movs	r2, #0
 772 001e E254     		strb	r2, [r4, r3]
 773              	.LVL60:
 774              	.L60:
 693:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 775              		.loc 1 693 0
 776 0020 2800     		movs	r0, r5
 777              		@ sp needed
 778              	.LVL61:
 779 0022 70BD     		pop	{r4, r5, r6, pc}
 780              	.LVL62:
 781              	.L64:
 608:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 782              		.loc 1 608 0
 783 0024 2000     		movs	r0, r4
 784              	.LVL63:
 785 0026 FFF7FEFF 		bl	ADC_Disable
 786              	.LVL64:
 787 002a 0500     		movs	r5, r0
 788              	.LVL65:
ARM GAS  /tmp/cc3nkBGN.s 			page 53


 611:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 789              		.loc 1 611 0
 790 002c 0128     		cmp	r0, #1
 791 002e F2D0     		beq	.L61
 614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 792              		.loc 1 614 0
 793 0030 0123     		movs	r3, #1
 794 0032 6364     		str	r3, [r4, #68]
 795 0034 EFE7     		b	.L61
 796              	.LVL66:
 797              	.L65:
 626:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 798              		.loc 1 626 0
 799 0036 2168     		ldr	r1, [r4]
 800 0038 4B68     		ldr	r3, [r1, #4]
 801 003a 9F22     		movs	r2, #159
 802 003c 9343     		bics	r3, r2
 803 003e 4B60     		str	r3, [r1, #4]
 631:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 804              		.loc 1 631 0
 805 0040 2368     		ldr	r3, [r4]
 806 0042 1A60     		str	r2, [r3]
 640:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 807              		.loc 1 640 0
 808 0044 2268     		ldr	r2, [r4]
 809 0046 D368     		ldr	r3, [r2, #12]
 810 0048 1249     		ldr	r1, .L66
 811 004a 0B40     		ands	r3, r1
 812 004c D360     		str	r3, [r2, #12]
 648:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 813              		.loc 1 648 0
 814 004e 2268     		ldr	r2, [r4]
 815 0050 1369     		ldr	r3, [r2, #16]
 816 0052 9B00     		lsls	r3, r3, #2
 817 0054 9B08     		lsrs	r3, r3, #2
 818 0056 1361     		str	r3, [r2, #16]
 651:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 819              		.loc 1 651 0
 820 0058 2268     		ldr	r2, [r4]
 821 005a 5369     		ldr	r3, [r2, #20]
 822 005c 0721     		movs	r1, #7
 823 005e 8B43     		bics	r3, r1
 824 0060 5361     		str	r3, [r2, #20]
 654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 825              		.loc 1 654 0
 826 0062 2268     		ldr	r2, [r4]
 827 0064 136A     		ldr	r3, [r2, #32]
 828 0066 0C49     		ldr	r1, .L66+4
 829 0068 0B40     		ands	r3, r1
 830 006a 1362     		str	r3, [r2, #32]
 657:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 831              		.loc 1 657 0
 832 006c 2268     		ldr	r2, [r4]
 833 006e 936A     		ldr	r3, [r2, #40]
 834 0070 DB0C     		lsrs	r3, r3, #19
 835 0072 DB04     		lsls	r3, r3, #19
 836 0074 9362     		str	r3, [r2, #40]
ARM GAS  /tmp/cc3nkBGN.s 			page 54


 667:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 837              		.loc 1 667 0
 838 0076 094A     		ldr	r2, .L66+8
 839 0078 1368     		ldr	r3, [r2]
 840 007a 0949     		ldr	r1, .L66+12
 841 007c 0B40     		ands	r3, r1
 842 007e 1360     		str	r3, [r2]
 679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 843              		.loc 1 679 0
 844 0080 2000     		movs	r0, r4
 845 0082 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 846              	.LVL67:
 682:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 847              		.loc 1 682 0
 848 0086 0023     		movs	r3, #0
 849 0088 A364     		str	r3, [r4, #72]
 685:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 850              		.loc 1 685 0
 851 008a 6364     		str	r3, [r4, #68]
 852 008c C5E7     		b	.L62
 853              	.LVL68:
 854              	.L63:
 592:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 855              		.loc 1 592 0
 856 008e 0125     		movs	r5, #1
 857 0090 C6E7     		b	.L60
 858              	.L67:
 859 0092 C046     		.align	2
 860              	.L66:
 861 0094 00023E83 		.word	-2093088256
 862 0098 00F000F0 		.word	-268374016
 863 009c 08270140 		.word	1073817352
 864 00a0 FFFF3FFE 		.word	-29360129
 865              		.cfi_endproc
 866              	.LFE38:
 868              		.section	.text.HAL_ADC_Start,"ax",%progbits
 869              		.align	1
 870              		.global	HAL_ADC_Start
 871              		.syntax unified
 872              		.code	16
 873              		.thumb_func
 874              		.fpu softvfp
 876              	HAL_ADC_Start:
 877              	.LFB41:
 759:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 878              		.loc 1 759 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL69:
 883 0000 10B5     		push	{r4, lr}
 884              		.cfi_def_cfa_offset 8
 885              		.cfi_offset 4, -8
 886              		.cfi_offset 14, -4
 887 0002 0400     		movs	r4, r0
 888              	.LVL70:
 766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
ARM GAS  /tmp/cc3nkBGN.s 			page 55


 889              		.loc 1 766 0
 890 0004 0368     		ldr	r3, [r0]
 891 0006 9B68     		ldr	r3, [r3, #8]
 892 0008 5B07     		lsls	r3, r3, #29
 893 000a 23D4     		bmi	.L71
 769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 894              		.loc 1 769 0
 895 000c 4023     		movs	r3, #64
 896 000e C35C     		ldrb	r3, [r0, r3]
 897 0010 012B     		cmp	r3, #1
 898 0012 21D0     		beq	.L72
 769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 899              		.loc 1 769 0 is_stmt 0 discriminator 2
 900 0014 4023     		movs	r3, #64
 901 0016 0122     		movs	r2, #1
 902 0018 C254     		strb	r2, [r0, r3]
 774:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 903              		.loc 1 774 0 is_stmt 1 discriminator 2
 904 001a C369     		ldr	r3, [r0, #28]
 905 001c 012B     		cmp	r3, #1
 906 001e 14D1     		bne	.L74
 760:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 907              		.loc 1 760 0
 908 0020 0020     		movs	r0, #0
 909              	.LVL71:
 910              	.L70:
 785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 911              		.loc 1 785 0
 912 0022 636C     		ldr	r3, [r4, #68]
 913 0024 0D4A     		ldr	r2, .L75
 914 0026 1A40     		ands	r2, r3
 915 0028 8023     		movs	r3, #128
 916 002a 5B00     		lsls	r3, r3, #1
 917 002c 1343     		orrs	r3, r2
 918 002e 6364     		str	r3, [r4, #68]
 790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 919              		.loc 1 790 0
 920 0030 0023     		movs	r3, #0
 921 0032 A364     		str	r3, [r4, #72]
 795:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 922              		.loc 1 795 0
 923 0034 4022     		movs	r2, #64
 924 0036 A354     		strb	r3, [r4, r2]
 800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 925              		.loc 1 800 0
 926 0038 2368     		ldr	r3, [r4]
 927 003a 243A     		subs	r2, r2, #36
 928 003c 1A60     		str	r2, [r3]
 806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 929              		.loc 1 806 0
 930 003e 2268     		ldr	r2, [r4]
 931 0040 9368     		ldr	r3, [r2, #8]
 932 0042 0421     		movs	r1, #4
 933 0044 0B43     		orrs	r3, r1
 934 0046 9360     		str	r3, [r2, #8]
 935              	.L69:
 816:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/cc3nkBGN.s 			page 56


 936              		.loc 1 816 0
 937              		@ sp needed
 938              	.LVL72:
 939 0048 10BD     		pop	{r4, pc}
 940              	.LVL73:
 941              	.L74:
 776:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 942              		.loc 1 776 0
 943 004a FFF7FEFF 		bl	ADC_Enable
 944              	.LVL74:
 780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 945              		.loc 1 780 0
 946 004e 0028     		cmp	r0, #0
 947 0050 E7D0     		beq	.L70
 948 0052 F9E7     		b	.L69
 949              	.LVL75:
 950              	.L71:
 811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 951              		.loc 1 811 0
 952 0054 0220     		movs	r0, #2
 953              	.LVL76:
 954 0056 F7E7     		b	.L69
 955              	.LVL77:
 956              	.L72:
 769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 957              		.loc 1 769 0
 958 0058 0220     		movs	r0, #2
 959              	.LVL78:
 960 005a F5E7     		b	.L69
 961              	.L76:
 962              		.align	2
 963              	.L75:
 964 005c FEF0FFFF 		.word	-3842
 965              		.cfi_endproc
 966              	.LFE41:
 968              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 969              		.align	1
 970              		.global	HAL_ADC_Stop
 971              		.syntax unified
 972              		.code	16
 973              		.thumb_func
 974              		.fpu softvfp
 976              	HAL_ADC_Stop:
 977              	.LFB42:
 824:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 978              		.loc 1 824 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              	.LVL79:
 983 0000 10B5     		push	{r4, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 4, -8
 986              		.cfi_offset 14, -4
 987 0002 0400     		movs	r4, r0
 988              	.LVL80:
 831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/cc3nkBGN.s 			page 57


 989              		.loc 1 831 0
 990 0004 4023     		movs	r3, #64
 991 0006 C35C     		ldrb	r3, [r0, r3]
 992 0008 012B     		cmp	r3, #1
 993 000a 17D0     		beq	.L80
 831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 994              		.loc 1 831 0 is_stmt 0 discriminator 2
 995 000c 4023     		movs	r3, #64
 996 000e 0122     		movs	r2, #1
 997 0010 C254     		strb	r2, [r0, r3]
 834:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 998              		.loc 1 834 0 is_stmt 1 discriminator 2
 999 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1000              	.LVL81:
 837:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1001              		.loc 1 837 0 discriminator 2
 1002 0016 0028     		cmp	r0, #0
 1003 0018 03D0     		beq	.L81
 1004              	.LVL82:
 1005              	.L79:
 853:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1006              		.loc 1 853 0
 1007 001a 4023     		movs	r3, #64
 1008 001c 0022     		movs	r2, #0
 1009 001e E254     		strb	r2, [r4, r3]
 1010              	.LVL83:
 1011              	.L78:
 857:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1012              		.loc 1 857 0
 1013              		@ sp needed
 1014              	.LVL84:
 1015 0020 10BD     		pop	{r4, pc}
 1016              	.LVL85:
 1017              	.L81:
 840:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1018              		.loc 1 840 0
 1019 0022 2000     		movs	r0, r4
 1020              	.LVL86:
 1021 0024 FFF7FEFF 		bl	ADC_Disable
 1022              	.LVL87:
 843:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1023              		.loc 1 843 0
 1024 0028 0028     		cmp	r0, #0
 1025 002a F6D1     		bne	.L79
 846:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1026              		.loc 1 846 0
 1027 002c 636C     		ldr	r3, [r4, #68]
 1028 002e 044A     		ldr	r2, .L82
 1029 0030 1340     		ands	r3, r2
 1030 0032 0432     		adds	r2, r2, #4
 1031 0034 FF32     		adds	r2, r2, #255
 1032 0036 1343     		orrs	r3, r2
 1033 0038 6364     		str	r3, [r4, #68]
 1034 003a EEE7     		b	.L79
 1035              	.LVL88:
 1036              	.L80:
 831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/cc3nkBGN.s 			page 58


 1037              		.loc 1 831 0
 1038 003c 0220     		movs	r0, #2
 1039              	.LVL89:
 1040 003e EFE7     		b	.L78
 1041              	.L83:
 1042              		.align	2
 1043              	.L82:
 1044 0040 FEFEFFFF 		.word	-258
 1045              		.cfi_endproc
 1046              	.LFE42:
 1048              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1049              		.align	1
 1050              		.global	HAL_ADC_PollForConversion
 1051              		.syntax unified
 1052              		.code	16
 1053              		.thumb_func
 1054              		.fpu softvfp
 1056              	HAL_ADC_PollForConversion:
 1057              	.LFB43:
 878:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 1058              		.loc 1 878 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              	.LVL90:
 1063 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1064              		.cfi_def_cfa_offset 24
 1065              		.cfi_offset 3, -24
 1066              		.cfi_offset 4, -20
 1067              		.cfi_offset 5, -16
 1068              		.cfi_offset 6, -12
 1069              		.cfi_offset 7, -8
 1070              		.cfi_offset 14, -4
 1071 0002 0400     		movs	r4, r0
 1072 0004 0E00     		movs	r6, r1
 886:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1073              		.loc 1 886 0
 1074 0006 4569     		ldr	r5, [r0, #20]
 1075 0008 082D     		cmp	r5, #8
 1076 000a 04D0     		beq	.L85
 899:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1077              		.loc 1 899 0
 1078 000c 0368     		ldr	r3, [r0]
 1079 000e DB68     		ldr	r3, [r3, #12]
 1080 0010 DB07     		lsls	r3, r3, #31
 1081 0012 19D4     		bmi	.L95
 911:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1082              		.loc 1 911 0
 1083 0014 0C25     		movs	r5, #12
 1084              	.L85:
 1085              	.LVL91:
 916:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1086              		.loc 1 916 0
 1087 0016 FFF7FEFF 		bl	HAL_GetTick
 1088              	.LVL92:
 1089 001a 0700     		movs	r7, r0
 1090              	.LVL93:
ARM GAS  /tmp/cc3nkBGN.s 			page 59


 1091              	.L88:
 919:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1092              		.loc 1 919 0
 1093 001c 2368     		ldr	r3, [r4]
 1094 001e 1A68     		ldr	r2, [r3]
 1095 0020 1542     		tst	r5, r2
 1096 0022 1AD1     		bne	.L96
 922:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1097              		.loc 1 922 0
 1098 0024 731C     		adds	r3, r6, #1
 1099 0026 F9D0     		beq	.L88
 924:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1100              		.loc 1 924 0
 1101 0028 002E     		cmp	r6, #0
 1102 002a 04D0     		beq	.L89
 924:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1103              		.loc 1 924 0 is_stmt 0 discriminator 1
 1104 002c FFF7FEFF 		bl	HAL_GetTick
 1105              	.LVL94:
 1106 0030 C01B     		subs	r0, r0, r7
 1107 0032 B042     		cmp	r0, r6
 1108 0034 F2D9     		bls	.L88
 1109              	.L89:
 927:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1110              		.loc 1 927 0 is_stmt 1
 1111 0036 636C     		ldr	r3, [r4, #68]
 1112 0038 0422     		movs	r2, #4
 1113 003a 1343     		orrs	r3, r2
 1114 003c 6364     		str	r3, [r4, #68]
 930:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1115              		.loc 1 930 0
 1116 003e 4023     		movs	r3, #64
 1117 0040 0022     		movs	r2, #0
 1118 0042 E254     		strb	r2, [r4, r3]
 932:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1119              		.loc 1 932 0
 1120 0044 0320     		movs	r0, #3
 1121 0046 07E0     		b	.L86
 1122              	.LVL95:
 1123              	.L95:
 902:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1124              		.loc 1 902 0
 1125 0048 436C     		ldr	r3, [r0, #68]
 1126 004a 2022     		movs	r2, #32
 1127 004c 1343     		orrs	r3, r2
 1128 004e 4364     		str	r3, [r0, #68]
 905:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1129              		.loc 1 905 0
 1130 0050 4023     		movs	r3, #64
 1131 0052 0022     		movs	r2, #0
 1132 0054 C254     		strb	r2, [r0, r3]
 907:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1133              		.loc 1 907 0
 1134 0056 0120     		movs	r0, #1
 1135              	.LVL96:
 1136              	.L86:
 985:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/cc3nkBGN.s 			page 60


 1137              		.loc 1 985 0
 1138              		@ sp needed
 1139              	.LVL97:
 1140              	.LVL98:
 1141 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1142              	.LVL99:
 1143              	.L96:
 938:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1144              		.loc 1 938 0
 1145 005a 616C     		ldr	r1, [r4, #68]
 1146 005c 8022     		movs	r2, #128
 1147 005e 9200     		lsls	r2, r2, #2
 1148 0060 0A43     		orrs	r2, r1
 1149 0062 6264     		str	r2, [r4, #68]
 942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1150              		.loc 1 942 0
 1151 0064 D968     		ldr	r1, [r3, #12]
 1152 0066 C022     		movs	r2, #192
 1153 0068 1201     		lsls	r2, r2, #4
 1154 006a 1142     		tst	r1, r2
 1155 006c 13D1     		bne	.L91
 942:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1156              		.loc 1 942 0 is_stmt 0 discriminator 1
 1157 006e 226A     		ldr	r2, [r4, #32]
 1158 0070 002A     		cmp	r2, #0
 1159 0072 10D1     		bne	.L91
 946:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1160              		.loc 1 946 0 is_stmt 1
 1161 0074 1A68     		ldr	r2, [r3]
 1162 0076 1207     		lsls	r2, r2, #28
 1163 0078 0DD5     		bpl	.L91
 950:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1164              		.loc 1 950 0
 1165 007a 9A68     		ldr	r2, [r3, #8]
 1166 007c 5207     		lsls	r2, r2, #29
 1167 007e 12D4     		bmi	.L92
 956:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1168              		.loc 1 956 0
 1169 0080 5A68     		ldr	r2, [r3, #4]
 1170 0082 0C21     		movs	r1, #12
 1171 0084 8A43     		bics	r2, r1
 1172 0086 5A60     		str	r2, [r3, #4]
 959:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 1173              		.loc 1 959 0
 1174 0088 636C     		ldr	r3, [r4, #68]
 1175 008a 0C4A     		ldr	r2, .L97
 1176 008c 1340     		ands	r3, r2
 1177 008e 0432     		adds	r2, r2, #4
 1178 0090 FF32     		adds	r2, r2, #255
 1179 0092 1343     		orrs	r3, r2
 1180 0094 6364     		str	r3, [r4, #68]
 1181              	.L91:
 977:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1182              		.loc 1 977 0
 1183 0096 A369     		ldr	r3, [r4, #24]
 1184 0098 002B     		cmp	r3, #0
 1185 009a 0DD1     		bne	.L94
ARM GAS  /tmp/cc3nkBGN.s 			page 61


 980:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1186              		.loc 1 980 0
 1187 009c 2368     		ldr	r3, [r4]
 1188 009e 0C22     		movs	r2, #12
 1189 00a0 1A60     		str	r2, [r3]
 984:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1190              		.loc 1 984 0
 1191 00a2 0020     		movs	r0, #0
 1192 00a4 D8E7     		b	.L86
 1193              	.L92:
 966:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1194              		.loc 1 966 0
 1195 00a6 636C     		ldr	r3, [r4, #68]
 1196 00a8 2022     		movs	r2, #32
 1197 00aa 1343     		orrs	r3, r2
 1198 00ac 6364     		str	r3, [r4, #68]
 969:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1199              		.loc 1 969 0
 1200 00ae A36C     		ldr	r3, [r4, #72]
 1201 00b0 1F3A     		subs	r2, r2, #31
 1202 00b2 1343     		orrs	r3, r2
 1203 00b4 A364     		str	r3, [r4, #72]
 1204 00b6 EEE7     		b	.L91
 1205              	.L94:
 984:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1206              		.loc 1 984 0
 1207 00b8 0020     		movs	r0, #0
 1208 00ba CDE7     		b	.L86
 1209              	.L98:
 1210              		.align	2
 1211              	.L97:
 1212 00bc FEFEFFFF 		.word	-258
 1213              		.cfi_endproc
 1214              	.LFE43:
 1216              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1217              		.align	1
 1218              		.global	HAL_ADC_PollForEvent
 1219              		.syntax unified
 1220              		.code	16
 1221              		.thumb_func
 1222              		.fpu softvfp
 1224              	HAL_ADC_PollForEvent:
 1225              	.LFB44:
 998:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
 1226              		.loc 1 998 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              	.LVL100:
 1231 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1232              		.cfi_def_cfa_offset 24
 1233              		.cfi_offset 3, -24
 1234              		.cfi_offset 4, -20
 1235              		.cfi_offset 5, -16
 1236              		.cfi_offset 6, -12
 1237              		.cfi_offset 7, -8
 1238              		.cfi_offset 14, -4
ARM GAS  /tmp/cc3nkBGN.s 			page 62


 1239 0002 0500     		movs	r5, r0
 1240 0004 0C00     		movs	r4, r1
 1241 0006 1600     		movs	r6, r2
 1242              	.LVL101:
1006:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1243              		.loc 1 1006 0
 1244 0008 FFF7FEFF 		bl	HAL_GetTick
 1245              	.LVL102:
 1246 000c 0700     		movs	r7, r0
 1247              	.LVL103:
 1248              	.L101:
1009:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1249              		.loc 1 1009 0
 1250 000e 2A68     		ldr	r2, [r5]
 1251 0010 1368     		ldr	r3, [r2]
 1252 0012 2340     		ands	r3, r4
 1253 0014 A342     		cmp	r3, r4
 1254 0016 11D0     		beq	.L109
1012:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1255              		.loc 1 1012 0
 1256 0018 731C     		adds	r3, r6, #1
 1257 001a F8D0     		beq	.L101
1014:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1258              		.loc 1 1014 0
 1259 001c 002E     		cmp	r6, #0
 1260 001e 04D0     		beq	.L102
1014:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1261              		.loc 1 1014 0 is_stmt 0 discriminator 1
 1262 0020 FFF7FEFF 		bl	HAL_GetTick
 1263              	.LVL104:
 1264 0024 C01B     		subs	r0, r0, r7
 1265 0026 B042     		cmp	r0, r6
 1266 0028 F1D9     		bls	.L101
 1267              	.L102:
1017:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1268              		.loc 1 1017 0 is_stmt 1
 1269 002a 6B6C     		ldr	r3, [r5, #68]
 1270 002c 0422     		movs	r2, #4
 1271 002e 1343     		orrs	r3, r2
 1272 0030 6B64     		str	r3, [r5, #68]
1020:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1273              		.loc 1 1020 0
 1274 0032 4023     		movs	r3, #64
 1275 0034 0022     		movs	r2, #0
 1276 0036 EA54     		strb	r2, [r5, r3]
1022:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1277              		.loc 1 1022 0
 1278 0038 0320     		movs	r0, #3
 1279 003a 07E0     		b	.L103
 1280              	.L109:
1027:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1281              		.loc 1 1027 0
 1282 003c 802C     		cmp	r4, #128
 1283 003e 06D0     		beq	.L110
1044:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1284              		.loc 1 1044 0
 1285 0040 6B6B     		ldr	r3, [r5, #52]
ARM GAS  /tmp/cc3nkBGN.s 			page 63


 1286 0042 012B     		cmp	r3, #1
 1287 0044 0CD0     		beq	.L111
 1288              	.L107:
1054:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1289              		.loc 1 1054 0
 1290 0046 1023     		movs	r3, #16
 1291 0048 1360     		str	r3, [r2]
1059:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1292              		.loc 1 1059 0
 1293 004a 0020     		movs	r0, #0
 1294              	.L103:
1060:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1295              		.loc 1 1060 0
 1296              		@ sp needed
 1297              	.LVL105:
 1298              	.LVL106:
 1299              	.LVL107:
 1300              	.LVL108:
 1301 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1302              	.LVL109:
 1303              	.L110:
1032:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1304              		.loc 1 1032 0
 1305 004e 696C     		ldr	r1, [r5, #68]
 1306 0050 8023     		movs	r3, #128
 1307 0052 5B02     		lsls	r3, r3, #9
 1308 0054 0B43     		orrs	r3, r1
 1309 0056 6B64     		str	r3, [r5, #68]
1035:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1310              		.loc 1 1035 0
 1311 0058 8023     		movs	r3, #128
 1312 005a 1360     		str	r3, [r2]
1059:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1313              		.loc 1 1059 0
 1314 005c 0020     		movs	r0, #0
1036:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1315              		.loc 1 1036 0
 1316 005e F5E7     		b	.L103
 1317              	.L111:
1047:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1318              		.loc 1 1047 0
 1319 0060 696C     		ldr	r1, [r5, #68]
 1320 0062 8023     		movs	r3, #128
 1321 0064 DB00     		lsls	r3, r3, #3
 1322 0066 0B43     		orrs	r3, r1
 1323 0068 6B64     		str	r3, [r5, #68]
1050:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1324              		.loc 1 1050 0
 1325 006a AB6C     		ldr	r3, [r5, #72]
 1326 006c 0221     		movs	r1, #2
 1327 006e 0B43     		orrs	r3, r1
 1328 0070 AB64     		str	r3, [r5, #72]
 1329 0072 E8E7     		b	.L107
 1330              		.cfi_endproc
 1331              	.LFE44:
 1333              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1334              		.align	1
ARM GAS  /tmp/cc3nkBGN.s 			page 64


 1335              		.global	HAL_ADC_Start_IT
 1336              		.syntax unified
 1337              		.code	16
 1338              		.thumb_func
 1339              		.fpu softvfp
 1341              	HAL_ADC_Start_IT:
 1342              	.LFB45:
1074:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1343              		.loc 1 1074 0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 0
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              	.LVL110:
 1348 0000 10B5     		push	{r4, lr}
 1349              		.cfi_def_cfa_offset 8
 1350              		.cfi_offset 4, -8
 1351              		.cfi_offset 14, -4
 1352 0002 0400     		movs	r4, r0
 1353              	.LVL111:
1081:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1354              		.loc 1 1081 0
 1355 0004 0368     		ldr	r3, [r0]
 1356 0006 9B68     		ldr	r3, [r3, #8]
 1357 0008 5B07     		lsls	r3, r3, #29
 1358 000a 36D4     		bmi	.L118
1084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1359              		.loc 1 1084 0
 1360 000c 4023     		movs	r3, #64
 1361 000e C35C     		ldrb	r3, [r0, r3]
 1362 0010 012B     		cmp	r3, #1
 1363 0012 34D0     		beq	.L119
1084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1364              		.loc 1 1084 0 is_stmt 0 discriminator 2
 1365 0014 4023     		movs	r3, #64
 1366 0016 0122     		movs	r2, #1
 1367 0018 C254     		strb	r2, [r0, r3]
1089:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1368              		.loc 1 1089 0 is_stmt 1 discriminator 2
 1369 001a C369     		ldr	r3, [r0, #28]
 1370 001c 012B     		cmp	r3, #1
 1371 001e 21D1     		bne	.L122
1075:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1372              		.loc 1 1075 0
 1373 0020 0020     		movs	r0, #0
 1374              	.LVL112:
 1375              	.L114:
1100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1376              		.loc 1 1100 0
 1377 0022 636C     		ldr	r3, [r4, #68]
 1378 0024 174A     		ldr	r2, .L123
 1379 0026 1A40     		ands	r2, r3
 1380 0028 8023     		movs	r3, #128
 1381 002a 5B00     		lsls	r3, r3, #1
 1382 002c 1343     		orrs	r3, r2
 1383 002e 6364     		str	r3, [r4, #68]
1105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1384              		.loc 1 1105 0
ARM GAS  /tmp/cc3nkBGN.s 			page 65


 1385 0030 0023     		movs	r3, #0
 1386 0032 A364     		str	r3, [r4, #72]
1110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1387              		.loc 1 1110 0
 1388 0034 4022     		movs	r2, #64
 1389 0036 A354     		strb	r3, [r4, r2]
1115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1390              		.loc 1 1115 0
 1391 0038 2368     		ldr	r3, [r4]
 1392 003a 243A     		subs	r2, r2, #36
 1393 003c 1A60     		str	r2, [r3]
1119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1394              		.loc 1 1119 0
 1395 003e 6369     		ldr	r3, [r4, #20]
 1396 0040 082B     		cmp	r3, #8
 1397 0042 14D1     		bne	.L121
1122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1398              		.loc 1 1122 0
 1399 0044 2268     		ldr	r2, [r4]
 1400 0046 5368     		ldr	r3, [r2, #4]
 1401 0048 0421     		movs	r1, #4
 1402 004a 8B43     		bics	r3, r1
 1403 004c 5360     		str	r3, [r2, #4]
1123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1404              		.loc 1 1123 0
 1405 004e 2268     		ldr	r2, [r4]
 1406 0050 5368     		ldr	r3, [r2, #4]
 1407 0052 1431     		adds	r1, r1, #20
 1408 0054 0B43     		orrs	r3, r1
 1409 0056 5360     		str	r3, [r2, #4]
 1410              	.L117:
1135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1411              		.loc 1 1135 0
 1412 0058 2268     		ldr	r2, [r4]
 1413 005a 9368     		ldr	r3, [r2, #8]
 1414 005c 0421     		movs	r1, #4
 1415 005e 0B43     		orrs	r3, r1
 1416 0060 9360     		str	r3, [r2, #8]
 1417              	.L113:
1145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1418              		.loc 1 1145 0
 1419              		@ sp needed
 1420              	.LVL113:
 1421 0062 10BD     		pop	{r4, pc}
 1422              	.LVL114:
 1423              	.L122:
1091:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1424              		.loc 1 1091 0
 1425 0064 FFF7FEFF 		bl	ADC_Enable
 1426              	.LVL115:
1095:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1427              		.loc 1 1095 0
 1428 0068 0028     		cmp	r0, #0
 1429 006a DAD0     		beq	.L114
 1430 006c F9E7     		b	.L113
 1431              	.LVL116:
 1432              	.L121:
ARM GAS  /tmp/cc3nkBGN.s 			page 66


1127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1433              		.loc 1 1127 0
 1434 006e 2268     		ldr	r2, [r4]
 1435 0070 5368     		ldr	r3, [r2, #4]
 1436 0072 1C21     		movs	r1, #28
 1437 0074 0B43     		orrs	r3, r1
 1438 0076 5360     		str	r3, [r2, #4]
1128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1439              		.loc 1 1128 0
 1440 0078 EEE7     		b	.L117
 1441              	.LVL117:
 1442              	.L118:
1140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
 1443              		.loc 1 1140 0
 1444 007a 0220     		movs	r0, #2
 1445              	.LVL118:
 1446 007c F1E7     		b	.L113
 1447              	.LVL119:
 1448              	.L119:
1084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1449              		.loc 1 1084 0
 1450 007e 0220     		movs	r0, #2
 1451              	.LVL120:
 1452 0080 EFE7     		b	.L113
 1453              	.L124:
 1454 0082 C046     		.align	2
 1455              	.L123:
 1456 0084 FEF0FFFF 		.word	-3842
 1457              		.cfi_endproc
 1458              	.LFE45:
 1460              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1461              		.align	1
 1462              		.global	HAL_ADC_Stop_IT
 1463              		.syntax unified
 1464              		.code	16
 1465              		.thumb_func
 1466              		.fpu softvfp
 1468              	HAL_ADC_Stop_IT:
 1469              	.LFB46:
1155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1470              		.loc 1 1155 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              	.LVL121:
 1475 0000 10B5     		push	{r4, lr}
 1476              		.cfi_def_cfa_offset 8
 1477              		.cfi_offset 4, -8
 1478              		.cfi_offset 14, -4
 1479 0002 0400     		movs	r4, r0
 1480              	.LVL122:
1162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1481              		.loc 1 1162 0
 1482 0004 4023     		movs	r3, #64
 1483 0006 C35C     		ldrb	r3, [r0, r3]
 1484 0008 012B     		cmp	r3, #1
 1485 000a 1CD0     		beq	.L128
ARM GAS  /tmp/cc3nkBGN.s 			page 67


1162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1486              		.loc 1 1162 0 is_stmt 0 discriminator 2
 1487 000c 4023     		movs	r3, #64
 1488 000e 0122     		movs	r2, #1
 1489 0010 C254     		strb	r2, [r0, r3]
1165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
 1490              		.loc 1 1165 0 is_stmt 1 discriminator 2
 1491 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1492              	.LVL123:
1168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1493              		.loc 1 1168 0 discriminator 2
 1494 0016 0028     		cmp	r0, #0
 1495 0018 03D0     		beq	.L129
 1496              	.LVL124:
 1497              	.L127:
1188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1498              		.loc 1 1188 0
 1499 001a 4023     		movs	r3, #64
 1500 001c 0022     		movs	r2, #0
 1501 001e E254     		strb	r2, [r4, r3]
 1502              	.LVL125:
 1503              	.L126:
1192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1504              		.loc 1 1192 0
 1505              		@ sp needed
 1506              	.LVL126:
 1507 0020 10BD     		pop	{r4, pc}
 1508              	.LVL127:
 1509              	.L129:
1172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1510              		.loc 1 1172 0
 1511 0022 2268     		ldr	r2, [r4]
 1512 0024 5368     		ldr	r3, [r2, #4]
 1513 0026 1C21     		movs	r1, #28
 1514 0028 8B43     		bics	r3, r1
 1515 002a 5360     		str	r3, [r2, #4]
1175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1516              		.loc 1 1175 0
 1517 002c 2000     		movs	r0, r4
 1518              	.LVL128:
 1519 002e FFF7FEFF 		bl	ADC_Disable
 1520              	.LVL129:
1178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1521              		.loc 1 1178 0
 1522 0032 0028     		cmp	r0, #0
 1523 0034 F1D1     		bne	.L127
1181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1524              		.loc 1 1181 0
 1525 0036 636C     		ldr	r3, [r4, #68]
 1526 0038 044A     		ldr	r2, .L130
 1527 003a 1340     		ands	r3, r2
 1528 003c 0432     		adds	r2, r2, #4
 1529 003e FF32     		adds	r2, r2, #255
 1530 0040 1343     		orrs	r3, r2
 1531 0042 6364     		str	r3, [r4, #68]
 1532 0044 E9E7     		b	.L127
 1533              	.LVL130:
ARM GAS  /tmp/cc3nkBGN.s 			page 68


 1534              	.L128:
1162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1535              		.loc 1 1162 0
 1536 0046 0220     		movs	r0, #2
 1537              	.LVL131:
 1538 0048 EAE7     		b	.L126
 1539              	.L131:
 1540 004a C046     		.align	2
 1541              	.L130:
 1542 004c FEFEFFFF 		.word	-258
 1543              		.cfi_endproc
 1544              	.LFE46:
 1546              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1547              		.align	1
 1548              		.global	HAL_ADC_Start_DMA
 1549              		.syntax unified
 1550              		.code	16
 1551              		.thumb_func
 1552              		.fpu softvfp
 1554              	HAL_ADC_Start_DMA:
 1555              	.LFB47:
1208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1556              		.loc 1 1208 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              	.LVL132:
 1561 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1562              		.cfi_def_cfa_offset 24
 1563              		.cfi_offset 3, -24
 1564              		.cfi_offset 4, -20
 1565              		.cfi_offset 5, -16
 1566              		.cfi_offset 6, -12
 1567              		.cfi_offset 7, -8
 1568              		.cfi_offset 14, -4
 1569 0002 0400     		movs	r4, r0
 1570 0004 0E00     		movs	r6, r1
 1571 0006 1700     		movs	r7, r2
 1572              	.LVL133:
1215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1573              		.loc 1 1215 0
 1574 0008 0368     		ldr	r3, [r0]
 1575 000a 9B68     		ldr	r3, [r3, #8]
 1576 000c 5B07     		lsls	r3, r3, #29
 1577 000e 3ED4     		bmi	.L135
1218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1578              		.loc 1 1218 0
 1579 0010 4023     		movs	r3, #64
 1580 0012 C35C     		ldrb	r3, [r0, r3]
 1581 0014 012B     		cmp	r3, #1
 1582 0016 3CD0     		beq	.L136
1218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1583              		.loc 1 1218 0 is_stmt 0 discriminator 2
 1584 0018 4023     		movs	r3, #64
 1585 001a 0122     		movs	r2, #1
 1586              	.LVL134:
 1587 001c C254     		strb	r2, [r0, r3]
ARM GAS  /tmp/cc3nkBGN.s 			page 69


1223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1588              		.loc 1 1223 0 is_stmt 1 discriminator 2
 1589 001e C369     		ldr	r3, [r0, #28]
 1590 0020 012B     		cmp	r3, #1
 1591 0022 32D0     		beq	.L137
1225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1592              		.loc 1 1225 0
 1593 0024 FFF7FEFF 		bl	ADC_Enable
 1594              	.LVL135:
 1595 0028 051E     		subs	r5, r0, #0
 1596              	.LVL136:
1229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1597              		.loc 1 1229 0
 1598 002a 2CD1     		bne	.L133
 1599              	.LVL137:
 1600              	.L134:
1234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1601              		.loc 1 1234 0
 1602 002c 636C     		ldr	r3, [r4, #68]
 1603 002e 1A4A     		ldr	r2, .L138
 1604 0030 1A40     		ands	r2, r3
 1605 0032 8023     		movs	r3, #128
 1606 0034 5B00     		lsls	r3, r3, #1
 1607 0036 1343     		orrs	r3, r2
 1608 0038 6364     		str	r3, [r4, #68]
1239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1609              		.loc 1 1239 0
 1610 003a 0023     		movs	r3, #0
 1611 003c A364     		str	r3, [r4, #72]
1244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1612              		.loc 1 1244 0
 1613 003e 4022     		movs	r2, #64
 1614 0040 A354     		strb	r3, [r4, r2]
1247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1615              		.loc 1 1247 0
 1616 0042 E36B     		ldr	r3, [r4, #60]
 1617 0044 154A     		ldr	r2, .L138+4
 1618 0046 9A62     		str	r2, [r3, #40]
1250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1619              		.loc 1 1250 0
 1620 0048 E36B     		ldr	r3, [r4, #60]
 1621 004a 154A     		ldr	r2, .L138+8
 1622 004c DA62     		str	r2, [r3, #44]
1253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1623              		.loc 1 1253 0
 1624 004e E36B     		ldr	r3, [r4, #60]
 1625 0050 144A     		ldr	r2, .L138+12
 1626 0052 1A63     		str	r2, [r3, #48]
1262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1627              		.loc 1 1262 0
 1628 0054 2368     		ldr	r3, [r4]
 1629 0056 1C22     		movs	r2, #28
 1630 0058 1A60     		str	r2, [r3]
1265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1631              		.loc 1 1265 0
 1632 005a 2268     		ldr	r2, [r4]
 1633 005c 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cc3nkBGN.s 			page 70


 1634 005e 1021     		movs	r1, #16
 1635 0060 0B43     		orrs	r3, r1
 1636 0062 5360     		str	r3, [r2, #4]
1268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1637              		.loc 1 1268 0
 1638 0064 2268     		ldr	r2, [r4]
 1639 0066 D368     		ldr	r3, [r2, #12]
 1640 0068 0F39     		subs	r1, r1, #15
 1641 006a 0B43     		orrs	r3, r1
 1642 006c D360     		str	r3, [r2, #12]
1271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
 1643              		.loc 1 1271 0
 1644 006e 2168     		ldr	r1, [r4]
 1645 0070 4031     		adds	r1, r1, #64
 1646 0072 3B00     		movs	r3, r7
 1647 0074 3200     		movs	r2, r6
 1648 0076 E06B     		ldr	r0, [r4, #60]
 1649 0078 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1650              	.LVL138:
1277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1651              		.loc 1 1277 0
 1652 007c 2268     		ldr	r2, [r4]
 1653 007e 9368     		ldr	r3, [r2, #8]
 1654 0080 0421     		movs	r1, #4
 1655 0082 0B43     		orrs	r3, r1
 1656 0084 9360     		str	r3, [r2, #8]
 1657              	.L133:
1287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1658              		.loc 1 1287 0
 1659 0086 2800     		movs	r0, r5
 1660              		@ sp needed
 1661              	.LVL139:
 1662              	.LVL140:
 1663              	.LVL141:
 1664 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1665              	.LVL142:
 1666              	.L137:
1209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1667              		.loc 1 1209 0
 1668 008a 0025     		movs	r5, #0
 1669 008c CEE7     		b	.L134
 1670              	.LVL143:
 1671              	.L135:
1282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1672              		.loc 1 1282 0
 1673 008e 0225     		movs	r5, #2
 1674 0090 F9E7     		b	.L133
 1675              	.L136:
1218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1676              		.loc 1 1218 0
 1677 0092 0225     		movs	r5, #2
 1678 0094 F7E7     		b	.L133
 1679              	.L139:
 1680 0096 C046     		.align	2
 1681              	.L138:
 1682 0098 FEF0FFFF 		.word	-3842
 1683 009c 00000000 		.word	ADC_DMAConvCplt
ARM GAS  /tmp/cc3nkBGN.s 			page 71


 1684 00a0 00000000 		.word	ADC_DMAHalfConvCplt
 1685 00a4 00000000 		.word	ADC_DMAError
 1686              		.cfi_endproc
 1687              	.LFE47:
 1689              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1690              		.align	1
 1691              		.global	HAL_ADC_Stop_DMA
 1692              		.syntax unified
 1693              		.code	16
 1694              		.thumb_func
 1695              		.fpu softvfp
 1697              	HAL_ADC_Stop_DMA:
 1698              	.LFB48:
1297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1699              		.loc 1 1297 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 0, uses_anonymous_args = 0
 1703              	.LVL144:
 1704 0000 70B5     		push	{r4, r5, r6, lr}
 1705              		.cfi_def_cfa_offset 16
 1706              		.cfi_offset 4, -16
 1707              		.cfi_offset 5, -12
 1708              		.cfi_offset 6, -8
 1709              		.cfi_offset 14, -4
 1710 0002 0500     		movs	r5, r0
 1711              	.LVL145:
1304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1712              		.loc 1 1304 0
 1713 0004 4023     		movs	r3, #64
 1714 0006 C35C     		ldrb	r3, [r0, r3]
 1715 0008 012B     		cmp	r3, #1
 1716 000a 32D0     		beq	.L146
1304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1717              		.loc 1 1304 0 is_stmt 0 discriminator 2
 1718 000c 4023     		movs	r3, #64
 1719 000e 0122     		movs	r2, #1
 1720 0010 C254     		strb	r2, [r0, r3]
1307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1721              		.loc 1 1307 0 is_stmt 1 discriminator 2
 1722 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1723              	.LVL146:
 1724 0016 041E     		subs	r4, r0, #0
 1725              	.LVL147:
1310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1726              		.loc 1 1310 0 discriminator 2
 1727 0018 04D0     		beq	.L147
 1728              	.LVL148:
 1729              	.L142:
1353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1730              		.loc 1 1353 0
 1731 001a 4023     		movs	r3, #64
 1732 001c 0022     		movs	r2, #0
 1733 001e EA54     		strb	r2, [r5, r3]
 1734              	.LVL149:
 1735              	.L141:
1357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/cc3nkBGN.s 			page 72


 1736              		.loc 1 1357 0
 1737 0020 2000     		movs	r0, r4
 1738              		@ sp needed
 1739              	.LVL150:
 1740 0022 70BD     		pop	{r4, r5, r6, pc}
 1741              	.LVL151:
 1742              	.L147:
1313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1743              		.loc 1 1313 0
 1744 0024 2A68     		ldr	r2, [r5]
 1745 0026 D368     		ldr	r3, [r2, #12]
 1746 0028 0121     		movs	r1, #1
 1747 002a 8B43     		bics	r3, r1
 1748 002c D360     		str	r3, [r2, #12]
1317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1749              		.loc 1 1317 0
 1750 002e E86B     		ldr	r0, [r5, #60]
 1751              	.LVL152:
 1752 0030 FFF7FEFF 		bl	HAL_DMA_Abort
 1753              	.LVL153:
 1754 0034 041E     		subs	r4, r0, #0
 1755              	.LVL154:
1320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1756              		.loc 1 1320 0
 1757 0036 03D0     		beq	.L143
1323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1758              		.loc 1 1323 0
 1759 0038 6B6C     		ldr	r3, [r5, #68]
 1760 003a 4022     		movs	r2, #64
 1761 003c 1343     		orrs	r3, r2
 1762 003e 6B64     		str	r3, [r5, #68]
 1763              	.L143:
1327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1764              		.loc 1 1327 0
 1765 0040 2A68     		ldr	r2, [r5]
 1766 0042 5368     		ldr	r3, [r2, #4]
 1767 0044 1021     		movs	r1, #16
 1768 0046 8B43     		bics	r3, r1
 1769 0048 5360     		str	r3, [r2, #4]
1332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1770              		.loc 1 1332 0
 1771 004a 002C     		cmp	r4, #0
 1772 004c 0DD1     		bne	.L144
1334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1773              		.loc 1 1334 0
 1774 004e 2800     		movs	r0, r5
 1775              	.LVL155:
 1776 0050 FFF7FEFF 		bl	ADC_Disable
 1777              	.LVL156:
 1778 0054 0400     		movs	r4, r0
 1779              	.LVL157:
 1780              	.L145:
1342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1781              		.loc 1 1342 0
 1782 0056 002C     		cmp	r4, #0
 1783 0058 DFD1     		bne	.L142
1345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
ARM GAS  /tmp/cc3nkBGN.s 			page 73


 1784              		.loc 1 1345 0
 1785 005a 6B6C     		ldr	r3, [r5, #68]
 1786 005c 064A     		ldr	r2, .L148
 1787 005e 1340     		ands	r3, r2
 1788 0060 0432     		adds	r2, r2, #4
 1789 0062 FF32     		adds	r2, r2, #255
 1790 0064 1343     		orrs	r3, r2
 1791 0066 6B64     		str	r3, [r5, #68]
 1792 0068 D7E7     		b	.L142
 1793              	.LVL158:
 1794              	.L144:
1338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1795              		.loc 1 1338 0
 1796 006a 2800     		movs	r0, r5
 1797              	.LVL159:
 1798 006c FFF7FEFF 		bl	ADC_Disable
 1799              	.LVL160:
 1800 0070 F1E7     		b	.L145
 1801              	.LVL161:
 1802              	.L146:
1304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1803              		.loc 1 1304 0
 1804 0072 0224     		movs	r4, #2
 1805 0074 D4E7     		b	.L141
 1806              	.L149:
 1807 0076 C046     		.align	2
 1808              	.L148:
 1809 0078 FEFEFFFF 		.word	-258
 1810              		.cfi_endproc
 1811              	.LFE48:
 1813              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1814              		.align	1
 1815              		.global	HAL_ADC_GetValue
 1816              		.syntax unified
 1817              		.code	16
 1818              		.thumb_func
 1819              		.fpu softvfp
 1821              	HAL_ADC_GetValue:
 1822              	.LFB49:
1379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 1823              		.loc 1 1379 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827              		@ link register save eliminated.
 1828              	.LVL162:
1387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1829              		.loc 1 1387 0
 1830 0000 0368     		ldr	r3, [r0]
 1831 0002 186C     		ldr	r0, [r3, #64]
 1832              	.LVL163:
1388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1833              		.loc 1 1388 0
 1834              		@ sp needed
 1835 0004 7047     		bx	lr
 1836              		.cfi_endproc
 1837              	.LFE49:
ARM GAS  /tmp/cc3nkBGN.s 			page 74


 1839              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1840              		.align	1
 1841              		.weak	HAL_ADC_ConvCpltCallback
 1842              		.syntax unified
 1843              		.code	16
 1844              		.thumb_func
 1845              		.fpu softvfp
 1847              	HAL_ADC_ConvCpltCallback:
 1848              	.LFB51:
1512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1849              		.loc 1 1512 0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 1853              		@ link register save eliminated.
 1854              	.LVL164:
1519:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1855              		.loc 1 1519 0
 1856              		@ sp needed
 1857 0000 7047     		bx	lr
 1858              		.cfi_endproc
 1859              	.LFE51:
 1861              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1862              		.align	1
 1863              		.syntax unified
 1864              		.code	16
 1865              		.thumb_func
 1866              		.fpu softvfp
 1868              	ADC_DMAConvCplt:
 1869              	.LFB62:
2076:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2077:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2078:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2079:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2080:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2081:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2082:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2083:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2084:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1870              		.loc 1 2084 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              	.LVL165:
 1875 0000 10B5     		push	{r4, lr}
 1876              		.cfi_def_cfa_offset 8
 1877              		.cfi_offset 4, -8
 1878              		.cfi_offset 14, -4
2085:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2086:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1879              		.loc 1 2086 0
 1880 0002 436A     		ldr	r3, [r0, #36]
 1881              	.LVL166:
2087:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2088:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2089:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1882              		.loc 1 2089 0
ARM GAS  /tmp/cc3nkBGN.s 			page 75


 1883 0004 5A6C     		ldr	r2, [r3, #68]
 1884 0006 5021     		movs	r1, #80
 1885 0008 1142     		tst	r1, r2
 1886 000a 03D0     		beq	.L157
2090:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2091:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
2092:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
2093:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2094:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2095:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
2097:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2098:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2099:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
2101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
2113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
2118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
2120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
2129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
2130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
2132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Call DMA error callback */
2134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 1887              		.loc 1 2134 0
 1888 000c DB6B     		ldr	r3, [r3, #60]
 1889              	.LVL167:
 1890 000e 1B6B     		ldr	r3, [r3, #48]
 1891 0010 9847     		blx	r3
 1892              	.LVL168:
 1893              	.L152:
2135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
ARM GAS  /tmp/cc3nkBGN.s 			page 76


2136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1894              		.loc 1 2137 0
 1895              		@ sp needed
 1896 0012 10BD     		pop	{r4, pc}
 1897              	.LVL169:
 1898              	.L157:
2092:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1899              		.loc 1 2092 0
 1900 0014 596C     		ldr	r1, [r3, #68]
 1901 0016 8022     		movs	r2, #128
 1902 0018 9200     		lsls	r2, r2, #2
 1903 001a 0A43     		orrs	r2, r1
 1904 001c 5A64     		str	r2, [r3, #68]
2096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1905              		.loc 1 2096 0
 1906 001e 1A68     		ldr	r2, [r3]
 1907 0020 D068     		ldr	r0, [r2, #12]
 1908              	.LVL170:
 1909 0022 C021     		movs	r1, #192
 1910 0024 0901     		lsls	r1, r1, #4
 1911 0026 0842     		tst	r0, r1
 1912 0028 13D1     		bne	.L154
2096:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1913              		.loc 1 2096 0 is_stmt 0 discriminator 1
 1914 002a 196A     		ldr	r1, [r3, #32]
 1915 002c 0029     		cmp	r1, #0
 1916 002e 10D1     		bne	.L154
2100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1917              		.loc 1 2100 0 is_stmt 1
 1918 0030 1168     		ldr	r1, [r2]
 1919 0032 0907     		lsls	r1, r1, #28
 1920 0034 0DD5     		bpl	.L154
2104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 1921              		.loc 1 2104 0
 1922 0036 9168     		ldr	r1, [r2, #8]
 1923 0038 4907     		lsls	r1, r1, #29
 1924 003a 0ED4     		bmi	.L155
2110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 1925              		.loc 1 2110 0
 1926 003c 5168     		ldr	r1, [r2, #4]
 1927 003e 0C20     		movs	r0, #12
 1928 0040 8143     		bics	r1, r0
 1929 0042 5160     		str	r1, [r2, #4]
2113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1930              		.loc 1 2113 0
 1931 0044 5A6C     		ldr	r2, [r3, #68]
 1932 0046 0949     		ldr	r1, .L158
 1933 0048 0A40     		ands	r2, r1
 1934 004a 0431     		adds	r1, r1, #4
 1935 004c FF31     		adds	r1, r1, #255
 1936 004e 0A43     		orrs	r2, r1
 1937 0050 5A64     		str	r2, [r3, #68]
 1938              	.L154:
2129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1939              		.loc 1 2129 0
 1940 0052 1800     		movs	r0, r3
ARM GAS  /tmp/cc3nkBGN.s 			page 77


 1941 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1942              	.LVL171:
 1943 0058 DBE7     		b	.L152
 1944              	.LVL172:
 1945              	.L155:
2120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 1946              		.loc 1 2120 0
 1947 005a 5A6C     		ldr	r2, [r3, #68]
 1948 005c 2021     		movs	r1, #32
 1949 005e 0A43     		orrs	r2, r1
 1950 0060 5A64     		str	r2, [r3, #68]
2123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 1951              		.loc 1 2123 0
 1952 0062 9A6C     		ldr	r2, [r3, #72]
 1953 0064 1F39     		subs	r1, r1, #31
 1954 0066 0A43     		orrs	r2, r1
 1955 0068 9A64     		str	r2, [r3, #72]
 1956 006a F2E7     		b	.L154
 1957              	.L159:
 1958              		.align	2
 1959              	.L158:
 1960 006c FEFEFFFF 		.word	-258
 1961              		.cfi_endproc
 1962              	.LFE62:
 1964              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1965              		.align	1
 1966              		.weak	HAL_ADC_ConvHalfCpltCallback
 1967              		.syntax unified
 1968              		.code	16
 1969              		.thumb_func
 1970              		.fpu softvfp
 1972              	HAL_ADC_ConvHalfCpltCallback:
 1973              	.LFB52:
1527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1974              		.loc 1 1527 0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		@ link register save eliminated.
 1979              	.LVL173:
1534:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1980              		.loc 1 1534 0
 1981              		@ sp needed
 1982 0000 7047     		bx	lr
 1983              		.cfi_endproc
 1984              	.LFE52:
 1986              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1987              		.align	1
 1988              		.syntax unified
 1989              		.code	16
 1990              		.thumb_func
 1991              		.fpu softvfp
 1993              	ADC_DMAHalfConvCplt:
 1994              	.LFB63:
2138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
ARM GAS  /tmp/cc3nkBGN.s 			page 78


2141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1995              		.loc 1 2145 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              	.LVL174:
 2000 0000 10B5     		push	{r4, lr}
 2001              		.cfi_def_cfa_offset 8
 2002              		.cfi_offset 4, -8
 2003              		.cfi_offset 14, -4
2146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2004              		.loc 1 2147 0
 2005 0002 406A     		ldr	r0, [r0, #36]
 2006              	.LVL175:
2148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Half conversion callback */
2150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 2007              		.loc 1 2150 0
 2008 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 2009              	.LVL176:
2151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2010              		.loc 1 2151 0
 2011              		@ sp needed
 2012 0008 10BD     		pop	{r4, pc}
 2013              		.cfi_endproc
 2014              	.LFE63:
 2016              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2017              		.align	1
 2018              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2019              		.syntax unified
 2020              		.code	16
 2021              		.thumb_func
 2022              		.fpu softvfp
 2024              	HAL_ADC_LevelOutOfWindowCallback:
 2025              	.LFB53:
1542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2026              		.loc 1 1542 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030              		@ link register save eliminated.
 2031              	.LVL177:
1549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2032              		.loc 1 1549 0
 2033              		@ sp needed
 2034 0000 7047     		bx	lr
 2035              		.cfi_endproc
 2036              	.LFE53:
 2038              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2039              		.align	1
 2040              		.weak	HAL_ADC_ErrorCallback
 2041              		.syntax unified
ARM GAS  /tmp/cc3nkBGN.s 			page 79


 2042              		.code	16
 2043              		.thumb_func
 2044              		.fpu softvfp
 2046              	HAL_ADC_ErrorCallback:
 2047              	.LFB54:
1558:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2048              		.loc 1 1558 0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 2053              	.LVL178:
1565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2054              		.loc 1 1565 0
 2055              		@ sp needed
 2056 0000 7047     		bx	lr
 2057              		.cfi_endproc
 2058              	.LFE54:
 2060              		.section	.text.ADC_DMAError,"ax",%progbits
 2061              		.align	1
 2062              		.syntax unified
 2063              		.code	16
 2064              		.thumb_func
 2065              		.fpu softvfp
 2067              	ADC_DMAError:
 2068              	.LFB64:
2152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA error callback 
2155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2069              		.loc 1 2159 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 0
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
 2073              	.LVL179:
 2074 0000 10B5     		push	{r4, lr}
 2075              		.cfi_def_cfa_offset 8
 2076              		.cfi_offset 4, -8
 2077              		.cfi_offset 14, -4
2160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2078              		.loc 1 2161 0
 2079 0002 406A     		ldr	r0, [r0, #36]
 2080              	.LVL180:
2162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
2164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2081              		.loc 1 2164 0
 2082 0004 436C     		ldr	r3, [r0, #68]
 2083 0006 4022     		movs	r2, #64
 2084 0008 1343     		orrs	r3, r2
 2085 000a 4364     		str	r3, [r0, #68]
2165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/cc3nkBGN.s 			page 80


2166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 2086              		.loc 1 2167 0
 2087 000c 836C     		ldr	r3, [r0, #72]
 2088 000e 3C3A     		subs	r2, r2, #60
 2089 0010 1343     		orrs	r3, r2
 2090 0012 8364     		str	r3, [r0, #72]
2168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Error callback */
2170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 2091              		.loc 1 2170 0
 2092 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2093              	.LVL181:
2171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2094              		.loc 1 2171 0
 2095              		@ sp needed
 2096 0018 10BD     		pop	{r4, pc}
 2097              		.cfi_endproc
 2098              	.LFE64:
 2100              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2101              		.align	1
 2102              		.global	HAL_ADC_IRQHandler
 2103              		.syntax unified
 2104              		.code	16
 2105              		.thumb_func
 2106              		.fpu softvfp
 2108              	HAL_ADC_IRQHandler:
 2109              	.LFB50:
1396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2110              		.loc 1 1396 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              	.LVL182:
 2115 0000 10B5     		push	{r4, lr}
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 4, -8
 2118              		.cfi_offset 14, -4
 2119 0002 0400     		movs	r4, r0
1403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2120              		.loc 1 1403 0
 2121 0004 0368     		ldr	r3, [r0]
 2122 0006 1A68     		ldr	r2, [r3]
 2123 0008 5207     		lsls	r2, r2, #29
 2124 000a 02D5     		bpl	.L166
1403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2125              		.loc 1 1403 0 is_stmt 0 discriminator 1
 2126 000c 5A68     		ldr	r2, [r3, #4]
 2127 000e 5207     		lsls	r2, r2, #29
 2128 0010 05D4     		bmi	.L167
 2129              	.L166:
1404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2130              		.loc 1 1404 0 is_stmt 1 discriminator 3
 2131 0012 1A68     		ldr	r2, [r3]
1403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2132              		.loc 1 1403 0 discriminator 3
 2133 0014 1207     		lsls	r2, r2, #28
ARM GAS  /tmp/cc3nkBGN.s 			page 81


 2134 0016 29D5     		bpl	.L168
1404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2135              		.loc 1 1404 0
 2136 0018 5A68     		ldr	r2, [r3, #4]
 2137 001a 1207     		lsls	r2, r2, #28
 2138 001c 26D5     		bpl	.L168
 2139              	.L167:
1407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2140              		.loc 1 1407 0
 2141 001e 626C     		ldr	r2, [r4, #68]
 2142 0020 D206     		lsls	r2, r2, #27
 2143 0022 04D4     		bmi	.L169
1410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2144              		.loc 1 1410 0
 2145 0024 616C     		ldr	r1, [r4, #68]
 2146 0026 8022     		movs	r2, #128
 2147 0028 9200     		lsls	r2, r2, #2
 2148 002a 0A43     		orrs	r2, r1
 2149 002c 6264     		str	r2, [r4, #68]
 2150              	.L169:
1415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2151              		.loc 1 1415 0
 2152 002e D968     		ldr	r1, [r3, #12]
 2153 0030 C022     		movs	r2, #192
 2154 0032 1201     		lsls	r2, r2, #4
 2155 0034 1142     		tst	r1, r2
 2156 0036 13D1     		bne	.L170
1415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2157              		.loc 1 1415 0 is_stmt 0 discriminator 1
 2158 0038 226A     		ldr	r2, [r4, #32]
 2159 003a 002A     		cmp	r2, #0
 2160 003c 10D1     		bne	.L170
1419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2161              		.loc 1 1419 0 is_stmt 1
 2162 003e 1A68     		ldr	r2, [r3]
 2163 0040 1207     		lsls	r2, r2, #28
 2164 0042 0DD5     		bpl	.L170
1423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2165              		.loc 1 1423 0
 2166 0044 9A68     		ldr	r2, [r3, #8]
 2167 0046 5207     		lsls	r2, r2, #29
 2168 0048 31D4     		bmi	.L171
1429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2169              		.loc 1 1429 0
 2170 004a 5A68     		ldr	r2, [r3, #4]
 2171 004c 0C21     		movs	r1, #12
 2172 004e 8A43     		bics	r2, r1
 2173 0050 5A60     		str	r2, [r3, #4]
1432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 2174              		.loc 1 1432 0
 2175 0052 636C     		ldr	r3, [r4, #68]
 2176 0054 204A     		ldr	r2, .L177
 2177 0056 1340     		ands	r3, r2
 2178 0058 0432     		adds	r2, r2, #4
 2179 005a FF32     		adds	r2, r2, #255
 2180 005c 1343     		orrs	r3, r2
 2181 005e 6364     		str	r3, [r4, #68]
ARM GAS  /tmp/cc3nkBGN.s 			page 82


 2182              	.L170:
1451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2183              		.loc 1 1451 0
 2184 0060 2000     		movs	r0, r4
 2185              	.LVL183:
 2186 0062 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2187              	.LVL184:
1459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2188              		.loc 1 1459 0
 2189 0066 2368     		ldr	r3, [r4]
 2190 0068 0C22     		movs	r2, #12
 2191 006a 1A60     		str	r2, [r3]
 2192              	.L168:
1463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2193              		.loc 1 1463 0
 2194 006c 2368     		ldr	r3, [r4]
 2195 006e 1A68     		ldr	r2, [r3]
 2196 0070 1206     		lsls	r2, r2, #24
 2197 0072 02D5     		bpl	.L172
1463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2198              		.loc 1 1463 0 is_stmt 0 discriminator 1
 2199 0074 5B68     		ldr	r3, [r3, #4]
 2200 0076 1B06     		lsls	r3, r3, #24
 2201 0078 22D4     		bmi	.L176
 2202              	.L172:
1478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2203              		.loc 1 1478 0 is_stmt 1
 2204 007a 2368     		ldr	r3, [r4]
 2205 007c 1A68     		ldr	r2, [r3]
 2206 007e D206     		lsls	r2, r2, #27
 2207 0080 14D5     		bpl	.L165
1478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2208              		.loc 1 1478 0 is_stmt 0 discriminator 1
 2209 0082 5A68     		ldr	r2, [r3, #4]
 2210 0084 D206     		lsls	r2, r2, #27
 2211 0086 11D5     		bpl	.L165
1486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2212              		.loc 1 1486 0 is_stmt 1
 2213 0088 626B     		ldr	r2, [r4, #52]
 2214 008a 012A     		cmp	r2, #1
 2215 008c 02D0     		beq	.L174
1487:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2216              		.loc 1 1487 0 discriminator 1
 2217 008e DA68     		ldr	r2, [r3, #12]
1486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2218              		.loc 1 1486 0 discriminator 1
 2219 0090 D207     		lsls	r2, r2, #31
 2220 0092 08D5     		bpl	.L175
 2221              	.L174:
1490:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2222              		.loc 1 1490 0
 2223 0094 A26C     		ldr	r2, [r4, #72]
 2224 0096 0221     		movs	r1, #2
 2225 0098 0A43     		orrs	r2, r1
 2226 009a A264     		str	r2, [r4, #72]
1493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2227              		.loc 1 1493 0
ARM GAS  /tmp/cc3nkBGN.s 			page 83


 2228 009c 1022     		movs	r2, #16
 2229 009e 1A60     		str	r2, [r3]
1496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2230              		.loc 1 1496 0
 2231 00a0 2000     		movs	r0, r4
 2232 00a2 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2233              	.LVL185:
 2234              	.L175:
1500:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2235              		.loc 1 1500 0
 2236 00a6 2368     		ldr	r3, [r4]
 2237 00a8 1022     		movs	r2, #16
 2238 00aa 1A60     		str	r2, [r3]
 2239              	.L165:
1503:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2240              		.loc 1 1503 0
 2241              		@ sp needed
 2242              	.LVL186:
 2243 00ac 10BD     		pop	{r4, pc}
 2244              	.LVL187:
 2245              	.L171:
1439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2246              		.loc 1 1439 0
 2247 00ae 636C     		ldr	r3, [r4, #68]
 2248 00b0 2022     		movs	r2, #32
 2249 00b2 1343     		orrs	r3, r2
 2250 00b4 6364     		str	r3, [r4, #68]
1442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 2251              		.loc 1 1442 0
 2252 00b6 A36C     		ldr	r3, [r4, #72]
 2253 00b8 1F3A     		subs	r2, r2, #31
 2254 00ba 1343     		orrs	r3, r2
 2255 00bc A364     		str	r3, [r4, #72]
 2256 00be CFE7     		b	.L170
 2257              	.LVL188:
 2258              	.L176:
1466:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2259              		.loc 1 1466 0
 2260 00c0 626C     		ldr	r2, [r4, #68]
 2261 00c2 8023     		movs	r3, #128
 2262 00c4 5B02     		lsls	r3, r3, #9
 2263 00c6 1343     		orrs	r3, r2
 2264 00c8 6364     		str	r3, [r4, #68]
1469:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2265              		.loc 1 1469 0
 2266 00ca 2000     		movs	r0, r4
 2267 00cc FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2268              	.LVL189:
1472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
 2269              		.loc 1 1472 0
 2270 00d0 2368     		ldr	r3, [r4]
 2271 00d2 8022     		movs	r2, #128
 2272 00d4 1A60     		str	r2, [r3]
 2273 00d6 D0E7     		b	.L172
 2274              	.L178:
 2275              		.align	2
 2276              	.L177:
ARM GAS  /tmp/cc3nkBGN.s 			page 84


 2277 00d8 FEFEFFFF 		.word	-258
 2278              		.cfi_endproc
 2279              	.LFE50:
 2281              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2282              		.align	1
 2283              		.global	HAL_ADC_ConfigChannel
 2284              		.syntax unified
 2285              		.code	16
 2286              		.thumb_func
 2287              		.fpu softvfp
 2289              	HAL_ADC_ConfigChannel:
 2290              	.LFB55:
1612:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2291              		.loc 1 1612 0
 2292              		.cfi_startproc
 2293              		@ args = 0, pretend = 0, frame = 8
 2294              		@ frame_needed = 0, uses_anonymous_args = 0
 2295              	.LVL190:
 2296 0000 30B5     		push	{r4, r5, lr}
 2297              		.cfi_def_cfa_offset 12
 2298              		.cfi_offset 4, -12
 2299              		.cfi_offset 5, -8
 2300              		.cfi_offset 14, -4
 2301 0002 83B0     		sub	sp, sp, #12
 2302              		.cfi_def_cfa_offset 24
 2303 0004 0400     		movs	r4, r0
 2304              	.LVL191:
1614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2305              		.loc 1 1614 0
 2306 0006 0023     		movs	r3, #0
 2307 0008 0193     		str	r3, [sp, #4]
1627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2308              		.loc 1 1627 0
 2309 000a 4033     		adds	r3, r3, #64
 2310 000c C35C     		ldrb	r3, [r0, r3]
 2311 000e 012B     		cmp	r3, #1
 2312 0010 00D1     		bne	.LCB2158
 2313 0012 8AE0     		b	.L189	@long jump
 2314              	.LCB2158:
1627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2315              		.loc 1 1627 0 is_stmt 0 discriminator 2
 2316 0014 4023     		movs	r3, #64
 2317 0016 0122     		movs	r2, #1
 2318 0018 C254     		strb	r2, [r0, r3]
1635:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2319              		.loc 1 1635 0 is_stmt 1 discriminator 2
 2320 001a 0368     		ldr	r3, [r0]
 2321 001c 9A68     		ldr	r2, [r3, #8]
 2322 001e 5207     		lsls	r2, r2, #29
 2323 0020 75D4     		bmi	.L181
1639:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2324              		.loc 1 1639 0
 2325 0022 434A     		ldr	r2, .L200
 2326 0024 4868     		ldr	r0, [r1, #4]
 2327              	.LVL192:
 2328 0026 9042     		cmp	r0, r2
 2329 0028 56D0     		beq	.L182
ARM GAS  /tmp/cc3nkBGN.s 			page 85


1643:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2330              		.loc 1 1643 0
 2331 002a 9A6A     		ldr	r2, [r3, #40]
 2332 002c 0120     		movs	r0, #1
 2333 002e 0D68     		ldr	r5, [r1]
 2334 0030 A840     		lsls	r0, r0, r5
 2335 0032 0243     		orrs	r2, r0
 2336 0034 9A62     		str	r2, [r3, #40]
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2337              		.loc 1 1650 0
 2338 0036 A36B     		ldr	r3, [r4, #56]
 2339 0038 8022     		movs	r2, #128
 2340 003a 5205     		lsls	r2, r2, #21
 2341 003c 9342     		cmp	r3, r2
 2342 003e 1ED0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2343              		.loc 1 1650 0 is_stmt 0 discriminator 1
 2344 0040 012B     		cmp	r3, #1
 2345 0042 1CD0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2346              		.loc 1 1650 0 discriminator 2
 2347 0044 022B     		cmp	r3, #2
 2348 0046 1AD0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2349              		.loc 1 1650 0 discriminator 3
 2350 0048 032B     		cmp	r3, #3
 2351 004a 18D0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2352              		.loc 1 1650 0 discriminator 4
 2353 004c 042B     		cmp	r3, #4
 2354 004e 16D0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2355              		.loc 1 1650 0 discriminator 5
 2356 0050 052B     		cmp	r3, #5
 2357 0052 14D0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2358              		.loc 1 1650 0 discriminator 6
 2359 0054 062B     		cmp	r3, #6
 2360 0056 12D0     		beq	.L183
1650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2361              		.loc 1 1650 0 discriminator 7
 2362 0058 072B     		cmp	r3, #7
 2363 005a 10D0     		beq	.L183
1654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2364              		.loc 1 1654 0 is_stmt 1
 2365 005c 2268     		ldr	r2, [r4]
 2366 005e 5069     		ldr	r0, [r2, #20]
 2367 0060 0723     		movs	r3, #7
 2368 0062 0340     		ands	r3, r0
 2369 0064 8868     		ldr	r0, [r1, #8]
 2370 0066 9842     		cmp	r0, r3
 2371 0068 09D0     		beq	.L183
1658:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2372              		.loc 1 1658 0
 2373 006a 5069     		ldr	r0, [r2, #20]
 2374 006c 0723     		movs	r3, #7
 2375 006e 9843     		bics	r0, r3
ARM GAS  /tmp/cc3nkBGN.s 			page 86


 2376 0070 5061     		str	r0, [r2, #20]
1661:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 2377              		.loc 1 1661 0
 2378 0072 2068     		ldr	r0, [r4]
 2379 0074 4269     		ldr	r2, [r0, #20]
 2380 0076 8D68     		ldr	r5, [r1, #8]
 2381 0078 2B40     		ands	r3, r5
 2382 007a 1343     		orrs	r3, r2
 2383 007c 4361     		str	r3, [r0, #20]
 2384              	.L183:
1671:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2385              		.loc 1 1671 0
 2386 007e 0B68     		ldr	r3, [r1]
 2387 0080 1A00     		movs	r2, r3
 2388 0082 103A     		subs	r2, r2, #16
 2389 0084 022A     		cmp	r2, #2
 2390 0086 4CD8     		bhi	.L190
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2391              		.loc 1 1676 0
 2392 0088 2A4A     		ldr	r2, .L200+4
 2393 008a 1268     		ldr	r2, [r2]
 2394 008c 102B     		cmp	r3, #16
 2395 008e 0ED0     		beq	.L191
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2396              		.loc 1 1676 0 is_stmt 0 discriminator 1
 2397 0090 112B     		cmp	r3, #17
 2398 0092 09D0     		beq	.L197
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2399              		.loc 1 1676 0
 2400 0094 8023     		movs	r3, #128
 2401 0096 5B04     		lsls	r3, r3, #17
 2402              	.L185:
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2403              		.loc 1 1676 0 discriminator 8
 2404 0098 1343     		orrs	r3, r2
 2405 009a 264A     		ldr	r2, .L200+4
 2406 009c 1360     		str	r3, [r2]
1679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2407              		.loc 1 1679 0 is_stmt 1 discriminator 8
 2408 009e 0B68     		ldr	r3, [r1]
 2409 00a0 102B     		cmp	r3, #16
 2410 00a2 07D0     		beq	.L198
1613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2411              		.loc 1 1613 0
 2412 00a4 0020     		movs	r0, #0
 2413 00a6 37E0     		b	.L184
 2414              	.L197:
1676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2415              		.loc 1 1676 0
 2416 00a8 8023     		movs	r3, #128
 2417 00aa DB03     		lsls	r3, r3, #15
 2418 00ac F4E7     		b	.L185
 2419              	.L191:
 2420 00ae 8023     		movs	r3, #128
 2421 00b0 1B04     		lsls	r3, r3, #16
 2422 00b2 F1E7     		b	.L185
 2423              	.L198:
ARM GAS  /tmp/cc3nkBGN.s 			page 87


1683:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2424              		.loc 1 1683 0
 2425 00b4 204B     		ldr	r3, .L200+8
 2426 00b6 1868     		ldr	r0, [r3]
 2427 00b8 2049     		ldr	r1, .L200+12
 2428              	.LVL193:
 2429 00ba FFF7FEFF 		bl	__aeabi_uidiv
 2430              	.LVL194:
 2431 00be 8300     		lsls	r3, r0, #2
 2432 00c0 1818     		adds	r0, r3, r0
 2433 00c2 4300     		lsls	r3, r0, #1
 2434 00c4 0193     		str	r3, [sp, #4]
1684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
 2435              		.loc 1 1684 0
 2436 00c6 02E0     		b	.L186
 2437              	.L187:
1686:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
 2438              		.loc 1 1686 0
 2439 00c8 019B     		ldr	r3, [sp, #4]
 2440 00ca 013B     		subs	r3, r3, #1
 2441 00cc 0193     		str	r3, [sp, #4]
 2442              	.L186:
1684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
 2443              		.loc 1 1684 0
 2444 00ce 019B     		ldr	r3, [sp, #4]
 2445 00d0 002B     		cmp	r3, #0
 2446 00d2 F9D1     		bne	.L187
1613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2447              		.loc 1 1613 0
 2448 00d4 0020     		movs	r0, #0
 2449 00d6 1FE0     		b	.L184
 2450              	.LVL195:
 2451              	.L182:
1695:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2452              		.loc 1 1695 0
 2453 00d8 9A6A     		ldr	r2, [r3, #40]
 2454 00da 0120     		movs	r0, #1
 2455 00dc 0D68     		ldr	r5, [r1]
 2456 00de A840     		lsls	r0, r0, r5
 2457 00e0 8243     		bics	r2, r0
 2458 00e2 9A62     		str	r2, [r3, #40]
1700:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2459              		.loc 1 1700 0
 2460 00e4 0B68     		ldr	r3, [r1]
 2461 00e6 1A00     		movs	r2, r3
 2462 00e8 103A     		subs	r2, r2, #16
 2463 00ea 022A     		cmp	r2, #2
 2464 00ec 1BD8     		bhi	.L194
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2465              		.loc 1 1705 0
 2466 00ee 114A     		ldr	r2, .L200+4
 2467 00f0 1268     		ldr	r2, [r2]
 2468 00f2 102B     		cmp	r3, #16
 2469 00f4 09D0     		beq	.L195
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2470              		.loc 1 1705 0 is_stmt 0 discriminator 1
 2471 00f6 112B     		cmp	r3, #17
ARM GAS  /tmp/cc3nkBGN.s 			page 88


 2472 00f8 05D0     		beq	.L199
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2473              		.loc 1 1705 0
 2474 00fa 114B     		ldr	r3, .L200+16
 2475              	.L188:
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2476              		.loc 1 1705 0 discriminator 8
 2477 00fc 1340     		ands	r3, r2
 2478 00fe 0D4A     		ldr	r2, .L200+4
 2479 0100 1360     		str	r3, [r2]
1613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2480              		.loc 1 1613 0 is_stmt 1 discriminator 8
 2481 0102 0020     		movs	r0, #0
 2482 0104 08E0     		b	.L184
 2483              	.L199:
1705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2484              		.loc 1 1705 0
 2485 0106 0F4B     		ldr	r3, .L200+20
 2486 0108 F8E7     		b	.L188
 2487              	.L195:
 2488 010a 0F4B     		ldr	r3, .L200+24
 2489 010c F6E7     		b	.L188
 2490              	.LVL196:
 2491              	.L181:
1717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2492              		.loc 1 1717 0
 2493 010e 436C     		ldr	r3, [r0, #68]
 2494 0110 2022     		movs	r2, #32
 2495 0112 1343     		orrs	r3, r2
 2496 0114 4364     		str	r3, [r0, #68]
 2497              	.LVL197:
1719:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2498              		.loc 1 1719 0
 2499 0116 0120     		movs	r0, #1
 2500              	.LVL198:
 2501              	.L184:
1723:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2502              		.loc 1 1723 0
 2503 0118 4023     		movs	r3, #64
 2504 011a 0022     		movs	r2, #0
 2505 011c E254     		strb	r2, [r4, r3]
 2506              	.LVL199:
 2507              	.L180:
1727:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2508              		.loc 1 1727 0
 2509 011e 03B0     		add	sp, sp, #12
 2510              		@ sp needed
 2511              	.LVL200:
 2512 0120 30BD     		pop	{r4, r5, pc}
 2513              	.LVL201:
 2514              	.L190:
1613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2515              		.loc 1 1613 0
 2516 0122 0020     		movs	r0, #0
 2517 0124 F8E7     		b	.L184
 2518              	.L194:
 2519 0126 0020     		movs	r0, #0
ARM GAS  /tmp/cc3nkBGN.s 			page 89


 2520 0128 F6E7     		b	.L184
 2521              	.LVL202:
 2522              	.L189:
1627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2523              		.loc 1 1627 0
 2524 012a 0220     		movs	r0, #2
 2525              	.LVL203:
 2526 012c F7E7     		b	.L180
 2527              	.L201:
 2528 012e C046     		.align	2
 2529              	.L200:
 2530 0130 01100000 		.word	4097
 2531 0134 08270140 		.word	1073817352
 2532 0138 00000000 		.word	SystemCoreClock
 2533 013c 40420F00 		.word	1000000
 2534 0140 FFFFFFFE 		.word	-16777217
 2535 0144 FFFFBFFF 		.word	-4194305
 2536 0148 FFFF7FFF 		.word	-8388609
 2537              		.cfi_endproc
 2538              	.LFE55:
 2540              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2541              		.align	1
 2542              		.global	HAL_ADC_AnalogWDGConfig
 2543              		.syntax unified
 2544              		.code	16
 2545              		.thumb_func
 2546              		.fpu softvfp
 2548              	HAL_ADC_AnalogWDGConfig:
 2549              	.LFB56:
1745:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2550              		.loc 1 1745 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 0
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 2554              	.LVL204:
 2555 0000 70B5     		push	{r4, r5, r6, lr}
 2556              		.cfi_def_cfa_offset 16
 2557              		.cfi_offset 4, -16
 2558              		.cfi_offset 5, -12
 2559              		.cfi_offset 6, -8
 2560              		.cfi_offset 14, -4
 2561              	.LVL205:
1766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2562              		.loc 1 1766 0
 2563 0002 4023     		movs	r3, #64
 2564 0004 C35C     		ldrb	r3, [r0, r3]
 2565 0006 012B     		cmp	r3, #1
 2566 0008 49D0     		beq	.L207
1766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2567              		.loc 1 1766 0 is_stmt 0 discriminator 2
 2568 000a 4023     		movs	r3, #64
 2569 000c 0122     		movs	r2, #1
 2570 000e C254     		strb	r2, [r0, r3]
1773:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2571              		.loc 1 1773 0 is_stmt 1 discriminator 2
 2572 0010 0368     		ldr	r3, [r0]
 2573 0012 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cc3nkBGN.s 			page 90


 2574 0014 5207     		lsls	r2, r2, #29
 2575 0016 38D4     		bmi	.L204
1780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
 2576              		.loc 1 1780 0
 2577 0018 DA68     		ldr	r2, [r3, #12]
 2578 001a 224C     		ldr	r4, .L209
 2579 001c 2240     		ands	r2, r4
 2580 001e DA60     		str	r2, [r3, #12]
1784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2581              		.loc 1 1784 0
 2582 0020 0468     		ldr	r4, [r0]
 2583 0022 E368     		ldr	r3, [r4, #12]
1785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2584              		.loc 1 1785 0
 2585 0024 4A68     		ldr	r2, [r1, #4]
 2586 0026 9206     		lsls	r2, r2, #26
1784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2587              		.loc 1 1784 0
 2588 0028 0D68     		ldr	r5, [r1]
 2589 002a 2A43     		orrs	r2, r5
 2590 002c 1343     		orrs	r3, r2
 2591 002e E360     		str	r3, [r4, #12]
1789:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2592              		.loc 1 1789 0
 2593 0030 0468     		ldr	r4, [r0]
 2594 0032 E368     		ldr	r3, [r4, #12]
 2595 0034 DB08     		lsrs	r3, r3, #3
 2596 0036 0322     		movs	r2, #3
 2597 0038 1340     		ands	r3, r2
 2598 003a 5B00     		lsls	r3, r3, #1
 2599 003c CD68     		ldr	r5, [r1, #12]
 2600 003e 9D40     		lsls	r5, r5, r3
 2601 0040 2B00     		movs	r3, r5
 2602              	.LVL206:
1790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2603              		.loc 1 1790 0
 2604 0042 E568     		ldr	r5, [r4, #12]
 2605 0044 ED08     		lsrs	r5, r5, #3
 2606 0046 2A40     		ands	r2, r5
 2607 0048 5200     		lsls	r2, r2, #1
 2608 004a 0D69     		ldr	r5, [r1, #16]
 2609 004c 9540     		lsls	r5, r5, r2
 2610              	.LVL207:
1793:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2611              		.loc 1 1793 0
 2612 004e 226A     		ldr	r2, [r4, #32]
 2613 0050 154E     		ldr	r6, .L209+4
 2614 0052 3240     		ands	r2, r6
 2615 0054 2262     		str	r2, [r4, #32]
1794:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
 2616              		.loc 1 1794 0
 2617 0056 0468     		ldr	r4, [r0]
 2618 0058 226A     		ldr	r2, [r4, #32]
 2619 005a 1B04     		lsls	r3, r3, #16
 2620              	.LVL208:
 2621 005c 2B43     		orrs	r3, r5
 2622 005e 1343     		orrs	r3, r2
ARM GAS  /tmp/cc3nkBGN.s 			page 91


 2623 0060 2362     		str	r3, [r4, #32]
1800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2624              		.loc 1 1800 0
 2625 0062 0368     		ldr	r3, [r0]
 2626 0064 8022     		movs	r2, #128
 2627 0066 1A60     		str	r2, [r3]
1803:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2628              		.loc 1 1803 0
 2629 0068 8B68     		ldr	r3, [r1, #8]
 2630 006a 012B     		cmp	r3, #1
 2631 006c 06D0     		beq	.L208
1811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2632              		.loc 1 1811 0
 2633 006e 0268     		ldr	r2, [r0]
 2634 0070 5368     		ldr	r3, [r2, #4]
 2635 0072 8021     		movs	r1, #128
 2636              	.LVL209:
 2637 0074 8B43     		bics	r3, r1
 2638 0076 5360     		str	r3, [r2, #4]
1746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2639              		.loc 1 1746 0
 2640 0078 0023     		movs	r3, #0
 2641 007a 0BE0     		b	.L206
 2642              	.LVL210:
 2643              	.L208:
1806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2644              		.loc 1 1806 0
 2645 007c 0268     		ldr	r2, [r0]
 2646 007e 5368     		ldr	r3, [r2, #4]
 2647 0080 8021     		movs	r1, #128
 2648              	.LVL211:
 2649 0082 0B43     		orrs	r3, r1
 2650 0084 5360     		str	r3, [r2, #4]
1746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2651              		.loc 1 1746 0
 2652 0086 0023     		movs	r3, #0
 2653 0088 04E0     		b	.L206
 2654              	.LVL212:
 2655              	.L204:
1820:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2656              		.loc 1 1820 0
 2657 008a 436C     		ldr	r3, [r0, #68]
 2658 008c 2022     		movs	r2, #32
 2659 008e 1343     		orrs	r3, r2
 2660 0090 4364     		str	r3, [r0, #68]
 2661              	.LVL213:
1822:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2662              		.loc 1 1822 0
 2663 0092 0123     		movs	r3, #1
 2664              	.LVL214:
 2665              	.L206:
1827:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2666              		.loc 1 1827 0
 2667 0094 4022     		movs	r2, #64
 2668 0096 0021     		movs	r1, #0
 2669 0098 8154     		strb	r1, [r0, r2]
 2670              	.LVL215:
ARM GAS  /tmp/cc3nkBGN.s 			page 92


 2671              	.L203:
1831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2672              		.loc 1 1831 0
 2673 009a 1800     		movs	r0, r3
 2674              	.LVL216:
 2675              		@ sp needed
 2676 009c 70BD     		pop	{r4, r5, r6, pc}
 2677              	.LVL217:
 2678              	.L207:
1766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2679              		.loc 1 1766 0
 2680 009e 0223     		movs	r3, #2
 2681 00a0 FBE7     		b	.L203
 2682              	.L210:
 2683 00a2 C046     		.align	2
 2684              	.L209:
 2685 00a4 FFFF3F83 		.word	-2092957697
 2686 00a8 00F000F0 		.word	-268374016
 2687              		.cfi_endproc
 2688              	.LFE56:
 2690              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2691              		.align	1
 2692              		.global	HAL_ADC_GetState
 2693              		.syntax unified
 2694              		.code	16
 2695              		.thumb_func
 2696              		.fpu softvfp
 2698              	HAL_ADC_GetState:
 2699              	.LFB57:
1867:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2700              		.loc 1 1867 0
 2701              		.cfi_startproc
 2702              		@ args = 0, pretend = 0, frame = 0
 2703              		@ frame_needed = 0, uses_anonymous_args = 0
 2704              		@ link register save eliminated.
 2705              	.LVL218:
1872:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2706              		.loc 1 1872 0
 2707 0000 406C     		ldr	r0, [r0, #68]
 2708              	.LVL219:
1873:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2709              		.loc 1 1873 0
 2710              		@ sp needed
 2711 0002 7047     		bx	lr
 2712              		.cfi_endproc
 2713              	.LFE57:
 2715              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2716              		.align	1
 2717              		.global	HAL_ADC_GetError
 2718              		.syntax unified
 2719              		.code	16
 2720              		.thumb_func
 2721              		.fpu softvfp
 2723              	HAL_ADC_GetError:
 2724              	.LFB58:
1881:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
 2725              		.loc 1 1881 0
ARM GAS  /tmp/cc3nkBGN.s 			page 93


 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 0
 2728              		@ frame_needed = 0, uses_anonymous_args = 0
 2729              		@ link register save eliminated.
 2730              	.LVL220:
1882:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2731              		.loc 1 1882 0
 2732 0000 806C     		ldr	r0, [r0, #72]
 2733              	.LVL221:
1883:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2734              		.loc 1 1883 0
 2735              		@ sp needed
 2736 0002 7047     		bx	lr
 2737              		.cfi_endproc
 2738              	.LFE58:
 2740              		.text
 2741              	.Letext0:
 2742              		.file 2 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
 2743              		.file 3 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 2744              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2745              		.file 5 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2746              		.file 6 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2747              		.file 7 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 2748              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
 2749              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/i
 2750              		.file 10 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/re
 2751              		.file 11 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2752              		.file 12 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2753              		.file 13 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2754              		.file 14 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/cc3nkBGN.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_adc.c
     /tmp/cc3nkBGN.s:16     .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/cc3nkBGN.s:22     .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/cc3nkBGN.s:105    .text.ADC_Disable:0000000000000000 $t
     /tmp/cc3nkBGN.s:111    .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/cc3nkBGN.s:226    .text.ADC_Enable:0000000000000000 $t
     /tmp/cc3nkBGN.s:232    .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/cc3nkBGN.s:367    .text.ADC_Enable:000000000000009c $d
     /tmp/cc3nkBGN.s:374    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cc3nkBGN.s:381    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cc3nkBGN.s:396    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/cc3nkBGN.s:403    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/cc3nkBGN.s:698    .text.HAL_ADC_Init:0000000000000170 $d
     /tmp/cc3nkBGN.s:705    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cc3nkBGN.s:712    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cc3nkBGN.s:727    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/cc3nkBGN.s:734    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/cc3nkBGN.s:861    .text.HAL_ADC_DeInit:0000000000000094 $d
     /tmp/cc3nkBGN.s:869    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/cc3nkBGN.s:876    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/cc3nkBGN.s:964    .text.HAL_ADC_Start:000000000000005c $d
     /tmp/cc3nkBGN.s:969    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/cc3nkBGN.s:976    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/cc3nkBGN.s:1044   .text.HAL_ADC_Stop:0000000000000040 $d
     /tmp/cc3nkBGN.s:1049   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/cc3nkBGN.s:1056   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/cc3nkBGN.s:1212   .text.HAL_ADC_PollForConversion:00000000000000bc $d
     /tmp/cc3nkBGN.s:1217   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/cc3nkBGN.s:1224   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/cc3nkBGN.s:1334   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/cc3nkBGN.s:1341   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/cc3nkBGN.s:1456   .text.HAL_ADC_Start_IT:0000000000000084 $d
     /tmp/cc3nkBGN.s:1461   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/cc3nkBGN.s:1468   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/cc3nkBGN.s:1542   .text.HAL_ADC_Stop_IT:000000000000004c $d
     /tmp/cc3nkBGN.s:1547   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/cc3nkBGN.s:1554   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/cc3nkBGN.s:1682   .text.HAL_ADC_Start_DMA:0000000000000098 $d
     /tmp/cc3nkBGN.s:1868   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/cc3nkBGN.s:1993   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/cc3nkBGN.s:2067   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/cc3nkBGN.s:1690   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/cc3nkBGN.s:1697   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/cc3nkBGN.s:1809   .text.HAL_ADC_Stop_DMA:0000000000000078 $d
     /tmp/cc3nkBGN.s:1814   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/cc3nkBGN.s:1821   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/cc3nkBGN.s:1840   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc3nkBGN.s:1847   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc3nkBGN.s:1862   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/cc3nkBGN.s:1960   .text.ADC_DMAConvCplt:000000000000006c $d
     /tmp/cc3nkBGN.s:1965   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/cc3nkBGN.s:1972   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cc3nkBGN.s:1987   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/cc3nkBGN.s:2017   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/cc3nkBGN.s:2024   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cc3nkBGN.s:2039   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
ARM GAS  /tmp/cc3nkBGN.s 			page 95


     /tmp/cc3nkBGN.s:2046   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/cc3nkBGN.s:2061   .text.ADC_DMAError:0000000000000000 $t
     /tmp/cc3nkBGN.s:2101   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/cc3nkBGN.s:2108   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/cc3nkBGN.s:2277   .text.HAL_ADC_IRQHandler:00000000000000d8 $d
     /tmp/cc3nkBGN.s:2282   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/cc3nkBGN.s:2289   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/cc3nkBGN.s:2530   .text.HAL_ADC_ConfigChannel:0000000000000130 $d
     /tmp/cc3nkBGN.s:2541   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/cc3nkBGN.s:2548   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/cc3nkBGN.s:2685   .text.HAL_ADC_AnalogWDGConfig:00000000000000a4 $d
     /tmp/cc3nkBGN.s:2691   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/cc3nkBGN.s:2698   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/cc3nkBGN.s:2716   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/cc3nkBGN.s:2723   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                           .group:0000000000000000 wm4.0.f4162676b8f623651f7a1199aa7e48f7
                           .group:0000000000000000 wm4.main.h.42.f591c98852cf8b31b9d28a7417223f7f
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.e02fa95cc55e74dee1039d0a6f374aae
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
ARM GAS  /tmp/cc3nkBGN.s 			page 96


                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

UNDEFINED SYMBOLS
HAL_GetTick
__aeabi_uidiv
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
