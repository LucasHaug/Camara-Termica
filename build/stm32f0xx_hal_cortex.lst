ARM GAS  /tmp/cc9IMJG7.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_cortex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_NVIC_SetPriority
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_NVIC_SetPriority:
  24              	.LFB37:
  25              		.file 1 "cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c"
   1:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
   2:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************
   3:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @file    stm32f0xx_hal_cortex.c
   4:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following
   7:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
   9:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  11:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *  @verbatim
  12:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
  13:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
  15:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  16:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]  
  17:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  18:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     ===========================================================
  19:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  20:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  21:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     The Cortex-M0 exceptions are managed by CMSIS functions.
  22:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels. 
  23:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****              The priority can be 0..3. 
  24:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  25:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  26:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         -@- Priority Order:
  27:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             (#@) Lowest priority.
  28:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).  
  29:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  30:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority()
  31:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  32:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ()
  33:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       
ARM GAS  /tmp/cc9IMJG7.s 			page 2


  34:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       -@-  Negative value of IRQn_Type are not allowed.
  35:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  36:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  37:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  38:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  39:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     ========================================================
  40:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  41:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     Setup SysTick Timer for time base. 
  42:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****            
  43:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  44:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        is a CMSIS function that:
  45:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  46:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  47:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  48:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  49:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  50:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  51:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     
  52:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  53:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  54:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The HAL_SYSTICK_CLKSourceConfig() macro is defined
  55:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        inside the stm32f0xx_hal_cortex.h file.
  56:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  57:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  58:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  59:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  60:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  61:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  62:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  63:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  64:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  65:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  66:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  67:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   @endverbatim
  68:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************
  69:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @attention
  70:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  71:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  72:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  73:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  74:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * are permitted provided that the following conditions are met:
  75:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  76:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer.
  77:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  78:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer in the documentation
  79:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      and/or other materials provided with the distribution.
  80:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  81:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      may be used to endorse or promote products derived from this software
  82:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      without specific prior written permission.
  83:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  84:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  85:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  86:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  87:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  88:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  89:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  90:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/cc9IMJG7.s 			page 3


  91:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  92:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  93:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  94:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  95:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************  
  96:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
  97:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  98:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  99:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** #include "stm32f0xx_hal.h"
 100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @addtogroup STM32F0xx_HAL_Driver
 102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
 106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief CORTEX CORTEX HAL module driver
 107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
 111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private typedef -----------------------------------------------------------*/
 113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private define ------------------------------------------------------------*/
 114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private macro -------------------------------------------------------------*/
 115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
 116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
 117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Exported functions ---------------------------------------------------------*/
 118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
 125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions
 126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *
 127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @verbatim
 128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
 132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       Systick functionalities 
 134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @endverbatim
 136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f0xx.h file)
 144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  PreemptPriority The preemption priority for the IRQn channel.
 145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority
 147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
ARM GAS  /tmp/cc9IMJG7.s 			page 4


 148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
 149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0 based products.   
 150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** { 
  26              		.loc 1 153 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37              	.LVL1:
  38              	.LBB26:
  39              	.LBB27:
  40              		.file 2 "cube/Drivers/CMSIS/Include/core_cm0.h"
   1:cube/Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:cube/Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:cube/Drivers/CMSIS/Include/core_cm0.h **** 
   9:cube/Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:cube/Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:cube/Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:cube/Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:cube/Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:cube/Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:cube/Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:cube/Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:cube/Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:cube/Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:cube/Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:cube/Drivers/CMSIS/Include/core_cm0.h ****    *
  21:cube/Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:cube/Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:cube/Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:cube/Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:cube/Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:cube/Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:cube/Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:cube/Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:cube/Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:cube/Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:cube/Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:cube/Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  34:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  35:cube/Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:cube/Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
ARM GAS  /tmp/cc9IMJG7.s 			page 5


  37:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:cube/Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  41:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  44:cube/Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  46:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:cube/Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  50:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
  51:cube/Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:cube/Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  54:cube/Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:cube/Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  57:cube/Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:cube/Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  60:cube/Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:cube/Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
  63:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  64:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  65:cube/Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:cube/Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
  69:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
  72:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  73:cube/Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:cube/Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  79:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  81:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  82:cube/Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  87:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  92:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
ARM GAS  /tmp/cc9IMJG7.s 			page 6


  94:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  97:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 102:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 106:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 111:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 117:cube/Drivers/CMSIS/Include/core_cm0.h **** #else
 118:cube/Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 121:cube/Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:cube/Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 124:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 126:cube/Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 131:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 136:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 141:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 146:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc9IMJG7.s 			page 7


 151:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 156:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 161:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 163:cube/Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:cube/Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 166:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 168:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 170:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 172:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 174:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 177:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:cube/Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 181:cube/Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:cube/Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:cube/Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:cube/Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:cube/Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 188:cube/Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:cube/Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:cube/Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 193:cube/Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:cube/Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:cube/Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 199:cube/Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 201:cube/Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 203:cube/Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:cube/Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:cube/Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 207:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
ARM GAS  /tmp/cc9IMJG7.s 			page 8


 208:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:cube/Drivers/CMSIS/Include/core_cm0.h **** #else
 210:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 215:cube/Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 220:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 222:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 223:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 224:cube/Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:cube/Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:cube/Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 233:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 236:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 237:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 238:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 243:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 244:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 245:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 247:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 249:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 251:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:cube/Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 260:cube/Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 264:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
ARM GAS  /tmp/cc9IMJG7.s 			page 9


 265:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 267:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 270:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 273:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 274:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 275:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 277:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 279:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 281:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:cube/Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 287:cube/Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:cube/Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:cube/Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 291:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 292:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 293:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 295:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 297:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 299:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:cube/Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 311:cube/Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 315:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 318:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 321:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
ARM GAS  /tmp/cc9IMJG7.s 			page 10


 322:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 324:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 327:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 330:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 331:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 332:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 334:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 336:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 338:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:cube/Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 345:cube/Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:cube/Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:cube/Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 349:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 351:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 352:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 353:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 358:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 359:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 360:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 362:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 364:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:cube/Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 376:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 378:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc9IMJG7.s 			page 11


 379:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 380:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 385:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 386:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 387:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 389:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 391:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:cube/Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 402:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 406:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 409:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 412:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 415:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 418:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 422:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 425:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 428:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 431:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 434:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
ARM GAS  /tmp/cc9IMJG7.s 			page 12


 436:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 437:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 440:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 443:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 446:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 450:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 453:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 456:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 459:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 462:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 466:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 469:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 472:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 476:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 479:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 483:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 485:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 486:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 487:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 492:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc9IMJG7.s 			page 13


 493:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 494:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 496:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 498:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:cube/Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 504:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 508:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 511:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 514:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 517:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 521:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 525:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 529:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 532:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 535:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 537:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 538:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 539:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:cube/Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 545:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 547:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 548:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 549:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
ARM GAS  /tmp/cc9IMJG7.s 			page 14


 550:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 554:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 555:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 556:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 561:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 563:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 564:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 569:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 571:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 573:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 574:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 575:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 580:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 581:cube/Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:cube/Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 587:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:cube/Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 591:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 592:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 594:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 595:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 596:cube/Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:cube/Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:cube/Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 604:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 606:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc9IMJG7.s 			page 15


 607:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 608:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 609:cube/Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 611:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 616:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 617:cube/Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:cube/Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 623:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 624:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 625:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 629:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 631:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 633:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 634:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 635:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 636:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 640:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 642:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 644:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 645:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 646:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 647:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 653:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 655:cube/Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 657:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 658:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 659:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 660:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/cc9IMJG7.s 			page 16


 664:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 666:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 668:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 669:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 670:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 671:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 675:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 677:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 679:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 680:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 681:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 682:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:cube/Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 688:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 690:cube/Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
  41              		.loc 2 690 0
  42 0002 0028     		cmp	r0, #0
  43 0004 11DB     		blt	.L4
 691:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 692:cube/Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 695:cube/Drivers/CMSIS/Include/core_cm0.h ****   else
 696:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 697:cube/Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  44              		.loc 2 697 0
  45 0006 8408     		lsrs	r4, r0, #2
  46 0008 134D     		ldr	r5, .L5
  47 000a C034     		adds	r4, r4, #192
  48 000c A400     		lsls	r4, r4, #2
  49 000e 6259     		ldr	r2, [r4, r5]
  50              	.LVL2:
  51 0010 0323     		movs	r3, #3
  52 0012 1840     		ands	r0, r3
  53              	.LVL3:
  54 0014 C000     		lsls	r0, r0, #3
  55 0016 FC33     		adds	r3, r3, #252
  56 0018 1E00     		movs	r6, r3
  57 001a 8640     		lsls	r6, r6, r0
  58 001c B243     		bics	r2, r6
 698:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  59              		.loc 2 698 0
  60 001e 8901     		lsls	r1, r1, #6
  61              	.LVL4:
  62 0020 0B40     		ands	r3, r1
ARM GAS  /tmp/cc9IMJG7.s 			page 17


  63 0022 8340     		lsls	r3, r3, r0
 697:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  64              		.loc 2 697 0
  65 0024 1343     		orrs	r3, r2
  66 0026 6351     		str	r3, [r4, r5]
  67              	.LVL5:
  68              	.L1:
  69              	.LBE27:
  70              	.LBE26:
 154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
 157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
  71              		.loc 1 157 0
  72              		@ sp needed
  73 0028 70BD     		pop	{r4, r5, r6, pc}
  74              	.LVL6:
  75              	.L4:
  76              	.LBB29:
  77              	.LBB28:
 692:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  78              		.loc 2 692 0
  79 002a C0B2     		uxtb	r0, r0
  80 002c 0F22     		movs	r2, #15
  81              	.LVL7:
  82 002e 0240     		ands	r2, r0
  83 0030 083A     		subs	r2, r2, #8
  84 0032 9208     		lsrs	r2, r2, #2
  85 0034 0632     		adds	r2, r2, #6
  86 0036 9200     		lsls	r2, r2, #2
  87 0038 084B     		ldr	r3, .L5+4
  88 003a D318     		adds	r3, r2, r3
  89 003c 5D68     		ldr	r5, [r3, #4]
  90 003e 0324     		movs	r4, #3
  91 0040 2040     		ands	r0, r4
  92              	.LVL8:
  93 0042 C000     		lsls	r0, r0, #3
  94 0044 FF22     		movs	r2, #255
  95 0046 1400     		movs	r4, r2
  96 0048 8440     		lsls	r4, r4, r0
  97 004a A543     		bics	r5, r4
 693:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
  98              		.loc 2 693 0
  99 004c 8901     		lsls	r1, r1, #6
 100              	.LVL9:
 101 004e 0A40     		ands	r2, r1
 102 0050 8240     		lsls	r2, r2, r0
 692:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 103              		.loc 2 692 0
 104 0052 2A43     		orrs	r2, r5
 105 0054 5A60     		str	r2, [r3, #4]
 106 0056 E7E7     		b	.L1
 107              	.L6:
 108              		.align	2
 109              	.L5:
 110 0058 00E100E0 		.word	-536813312
 111 005c 00ED00E0 		.word	-536810240
ARM GAS  /tmp/cc9IMJG7.s 			page 18


 112              	.LBE28:
 113              	.LBE29:
 114              		.cfi_endproc
 115              	.LFE37:
 117              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 118              		.align	1
 119              		.global	HAL_NVIC_EnableIRQ
 120              		.syntax unified
 121              		.code	16
 122              		.thumb_func
 123              		.fpu softvfp
 125              	HAL_NVIC_EnableIRQ:
 126              	.LFB38:
 158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         function should be called before. 
 163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 127              		.loc 1 169 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132              	.LVL10:
 133              	.LBB30:
 134              	.LBB31:
 631:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 135              		.loc 2 631 0
 136 0000 1F23     		movs	r3, #31
 137 0002 1840     		ands	r0, r3
 138              	.LVL11:
 139 0004 1E3B     		subs	r3, r3, #30
 140 0006 8340     		lsls	r3, r3, r0
 141 0008 014A     		ldr	r2, .L8
 142 000a 1360     		str	r3, [r2]
 143              	.LVL12:
 144              	.LBE31:
 145              	.LBE30:
 170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Enable interrupt */
 174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 146              		.loc 1 175 0
 147              		@ sp needed
 148 000c 7047     		bx	lr
 149              	.L9:
 150 000e C046     		.align	2
 151              	.L8:
ARM GAS  /tmp/cc9IMJG7.s 			page 19


 152 0010 00E100E0 		.word	-536813312
 153              		.cfi_endproc
 154              	.LFE38:
 156              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 157              		.align	1
 158              		.global	HAL_NVIC_DisableIRQ
 159              		.syntax unified
 160              		.code	16
 161              		.thumb_func
 162              		.fpu softvfp
 164              	HAL_NVIC_DisableIRQ:
 165              	.LFB39:
 176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 166              		.loc 1 185 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171              	.LVL13:
 172              	.LBB32:
 173              	.LBB33:
 642:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 174              		.loc 2 642 0
 175 0000 1F23     		movs	r3, #31
 176 0002 1840     		ands	r0, r3
 177              	.LVL14:
 178 0004 1E3B     		subs	r3, r3, #30
 179 0006 8340     		lsls	r3, r3, r0
 180 0008 0149     		ldr	r1, .L11
 181 000a 8022     		movs	r2, #128
 182 000c 8B50     		str	r3, [r1, r2]
 183              	.LVL15:
 184              	.LBE33:
 185              	.LBE32:
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Disable interrupt */
 190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 186              		.loc 1 191 0
 187              		@ sp needed
 188 000e 7047     		bx	lr
 189              	.L12:
 190              		.align	2
 191              	.L11:
 192 0010 00E100E0 		.word	-536813312
 193              		.cfi_endproc
ARM GAS  /tmp/cc9IMJG7.s 			page 20


 194              	.LFE39:
 196              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 197              		.align	1
 198              		.global	HAL_NVIC_SystemReset
 199              		.syntax unified
 200              		.code	16
 201              		.thumb_func
 202              		.fpu softvfp
 204              	HAL_NVIC_SystemReset:
 205              	.LFB40:
 192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 206              		.loc 1 198 0
 207              		.cfi_startproc
 208              		@ Volatile: function does not return.
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212              	.LBB42:
 213              	.LBB43:
 214              	.LBB44:
 215              	.LBB45:
 216              		.file 3 "cube/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARM GAS  /tmp/cc9IMJG7.s 			page 21


  30:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc9IMJG7.s 			page 22


  87:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc9IMJG7.s 			page 23


 144:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc9IMJG7.s 			page 24


 201:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc9IMJG7.s 			page 25


 258:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
ARM GAS  /tmp/cc9IMJG7.s 			page 26


 315:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /tmp/cc9IMJG7.s 			page 27


 372:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc9IMJG7.s 			page 28


 429:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 217              		.loc 3 429 0
 218              		.syntax divided
 219              	@ 429 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 220 0000 BFF34F8F 		dsb 0xF
 221              	@ 0 "" 2
 222              		.thumb
 223              		.syntax unified
 224              	.LBE45:
 225              	.LBE44:
 699:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 700:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 701:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 702:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 703:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 704:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:cube/Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:cube/Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:cube/Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 712:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 714:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 715:cube/Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 717:cube/Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 719:cube/Drivers/CMSIS/Include/core_cm0.h ****   else
 720:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 721:cube/Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 723:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 724:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 725:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 726:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 727:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 730:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 732:cube/Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:cube/Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:cube/Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 226              		.loc 2 734 0
 227 0004 034B     		ldr	r3, .L15
 228 0006 044A     		ldr	r2, .L15+4
 229 0008 DA60     		str	r2, [r3, #12]
 230              	.LBB46:
 231              	.LBB47:
 232              		.loc 3 429 0
 233              		.syntax divided
 234              	@ 429 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 235 000a BFF34F8F 		dsb 0xF
 236              	@ 0 "" 2
ARM GAS  /tmp/cc9IMJG7.s 			page 29


 237              		.thumb
 238              		.syntax unified
 239              	.L14:
 240              	.LBE47:
 241              	.LBE46:
 242              	.LBB48:
 243              	.LBB49:
 375:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 244              		.loc 3 375 0
 245              		.syntax divided
 246              	@ 375 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 247 000e C046     		nop
 248              	@ 0 "" 2
 249              		.thumb
 250              		.syntax unified
 251 0010 FDE7     		b	.L14
 252              	.L16:
 253 0012 C046     		.align	2
 254              	.L15:
 255 0014 00ED00E0 		.word	-536810240
 256 0018 0400FA05 		.word	100270084
 257              	.LBE49:
 258              	.LBE48:
 259              	.LBE43:
 260              	.LBE42:
 261              		.cfi_endproc
 262              	.LFE40:
 264              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 265              		.align	1
 266              		.global	HAL_SYSTICK_Config
 267              		.syntax unified
 268              		.code	16
 269              		.thumb_func
 270              		.fpu softvfp
 272              	HAL_SYSTICK_Config:
 273              	.LFB41:
 199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* System Reset */
 200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SystemReset();
 201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *                  - 1  Function failed.
 209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 274              		.loc 1 211 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL16:
 280              	.LBB50:
 281              	.LBB51:
ARM GAS  /tmp/cc9IMJG7.s 			page 30


 735:cube/Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:cube/Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 737:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 738:cube/Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 739:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 740:cube/Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 741:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 742:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 743:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 744:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 745:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 746:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 747:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 748:cube/Drivers/CMSIS/Include/core_cm0.h **** /* ##################################    SysTick function  ########################################
 749:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 750:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 751:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
 752:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that configure the System.
 753:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 754:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 755:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 756:cube/Drivers/CMSIS/Include/core_cm0.h **** #if (__Vendor_SysTickConfig == 0U)
 757:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 758:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 759:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Tick Configuration
 760:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 761:cube/Drivers/CMSIS/Include/core_cm0.h ****            Counter is in free running mode to generate periodic interrupts.
 762:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  ticks  Number of ticks between two interrupts.
 763:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return          0  Function succeeded.
 764:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return          1  Function failed.
 765:cube/Drivers/CMSIS/Include/core_cm0.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 766:cube/Drivers/CMSIS/Include/core_cm0.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
 767:cube/Drivers/CMSIS/Include/core_cm0.h ****            must contain a vendor-specific implementation of this function.
 768:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 769:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 770:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 771:cube/Drivers/CMSIS/Include/core_cm0.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 282              		.loc 2 771 0
 283 0000 0138     		subs	r0, r0, #1
 284              	.LVL17:
 285 0002 0A4B     		ldr	r3, .L20
 286 0004 9842     		cmp	r0, r3
 287 0006 0FD8     		bhi	.L19
 772:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 773:cube/Drivers/CMSIS/Include/core_cm0.h ****     return (1UL);                                                   /* Reload value impossible */
 774:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 775:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 776:cube/Drivers/CMSIS/Include/core_cm0.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 288              		.loc 2 776 0
 289 0008 094A     		ldr	r2, .L20+4
 290 000a 5060     		str	r0, [r2, #4]
 291              	.LVL18:
 292              	.LBB52:
 293              	.LBB53:
 692:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 294              		.loc 2 692 0
 295 000c 0948     		ldr	r0, .L20+8
ARM GAS  /tmp/cc9IMJG7.s 			page 31


 296              	.LVL19:
 297 000e 036A     		ldr	r3, [r0, #32]
 298 0010 1B02     		lsls	r3, r3, #8
 299 0012 1B0A     		lsrs	r3, r3, #8
 300 0014 C021     		movs	r1, #192
 301 0016 0906     		lsls	r1, r1, #24
 302 0018 0B43     		orrs	r3, r1
 303 001a 0362     		str	r3, [r0, #32]
 304              	.LVL20:
 305              	.LBE53:
 306              	.LBE52:
 777:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 778:cube/Drivers/CMSIS/Include/core_cm0.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 307              		.loc 2 778 0
 308 001c 0023     		movs	r3, #0
 309 001e 9360     		str	r3, [r2, #8]
 779:cube/Drivers/CMSIS/Include/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 310              		.loc 2 779 0
 311 0020 0733     		adds	r3, r3, #7
 312 0022 1360     		str	r3, [r2]
 780:cube/Drivers/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 781:cube/Drivers/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
 782:cube/Drivers/CMSIS/Include/core_cm0.h ****   return (0UL);                                                     /* Function successful */
 313              		.loc 2 782 0
 314 0024 0020     		movs	r0, #0
 315              	.LVL21:
 316              	.L17:
 317              	.LBE51:
 318              	.LBE50:
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 319              		.loc 1 213 0
 320              		@ sp needed
 321 0026 7047     		bx	lr
 322              	.LVL22:
 323              	.L19:
 324              	.LBB55:
 325              	.LBB54:
 773:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 326              		.loc 2 773 0
 327 0028 0120     		movs	r0, #1
 328              	.LVL23:
 329              	.LBE54:
 330              	.LBE55:
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 331              		.loc 1 212 0
 332 002a FCE7     		b	.L17
 333              	.L21:
 334              		.align	2
 335              	.L20:
 336 002c FFFFFF00 		.word	16777215
 337 0030 10E000E0 		.word	-536813552
 338 0034 00ED00E0 		.word	-536810240
 339              		.cfi_endproc
 340              	.LFE41:
 342              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 343              		.align	1
ARM GAS  /tmp/cc9IMJG7.s 			page 32


 344              		.global	HAL_NVIC_GetPriority
 345              		.syntax unified
 346              		.code	16
 347              		.thumb_func
 348              		.fpu softvfp
 350              	HAL_NVIC_GetPriority:
 351              	.LFB42:
 214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @}
 216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
 219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *  @brief   Cortex control functions
 220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *
 221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @verbatim
 222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
 226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities.
 228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @endverbatim
 231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 352              		.loc 1 243 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357              	.LVL24:
 358              	.LBB58:
 359              	.LBB59:
 715:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 360              		.loc 2 715 0
 361 0000 0028     		cmp	r0, #0
 362 0002 0CDB     		blt	.L25
 721:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 363              		.loc 2 721 0
 364 0004 8308     		lsrs	r3, r0, #2
 365 0006 C033     		adds	r3, r3, #192
 366 0008 9B00     		lsls	r3, r3, #2
 367 000a 0E4A     		ldr	r2, .L26
 368 000c 9B58     		ldr	r3, [r3, r2]
 369 000e 0322     		movs	r2, #3
ARM GAS  /tmp/cc9IMJG7.s 			page 33


 370 0010 1040     		ands	r0, r2
 371              	.LVL25:
 372 0012 C000     		lsls	r0, r0, #3
 373 0014 C340     		lsrs	r3, r3, r0
 374 0016 9809     		lsrs	r0, r3, #6
 375 0018 0323     		movs	r3, #3
 376 001a 1840     		ands	r0, r3
 377              	.LVL26:
 378              	.L22:
 379              	.LBE59:
 380              	.LBE58:
 244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 381              		.loc 1 246 0
 382              		@ sp needed
 383 001c 7047     		bx	lr
 384              	.LVL27:
 385              	.L25:
 386              	.LBB61:
 387              	.LBB60:
 717:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 388              		.loc 2 717 0
 389 001e C0B2     		uxtb	r0, r0
 390 0020 0F23     		movs	r3, #15
 391 0022 0340     		ands	r3, r0
 392 0024 083B     		subs	r3, r3, #8
 393 0026 9B08     		lsrs	r3, r3, #2
 394 0028 0633     		adds	r3, r3, #6
 395 002a 9B00     		lsls	r3, r3, #2
 396 002c 064A     		ldr	r2, .L26+4
 397 002e 9446     		mov	ip, r2
 398 0030 6344     		add	r3, r3, ip
 399 0032 5B68     		ldr	r3, [r3, #4]
 400 0034 0322     		movs	r2, #3
 401 0036 1040     		ands	r0, r2
 402              	.LVL28:
 403 0038 C000     		lsls	r0, r0, #3
 404 003a C340     		lsrs	r3, r3, r0
 405 003c 9B09     		lsrs	r3, r3, #6
 406 003e 0320     		movs	r0, #3
 407 0040 1840     		ands	r0, r3
 408 0042 EBE7     		b	.L22
 409              	.L27:
 410              		.align	2
 411              	.L26:
 412 0044 00E100E0 		.word	-536813312
 413 0048 00ED00E0 		.word	-536810240
 414              	.LBE60:
 415              	.LBE61:
 416              		.cfi_endproc
 417              	.LFE42:
 419              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 420              		.align	1
 421              		.global	HAL_NVIC_SetPendingIRQ
 422              		.syntax unified
 423              		.code	16
ARM GAS  /tmp/cc9IMJG7.s 			page 34


 424              		.thumb_func
 425              		.fpu softvfp
 427              	HAL_NVIC_SetPendingIRQ:
 428              	.LFB43:
 247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 429              		.loc 1 256 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434              	.LVL29:
 435              	.LBB62:
 436              	.LBB63:
 666:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 437              		.loc 2 666 0
 438 0000 1F23     		movs	r3, #31
 439 0002 1840     		ands	r0, r3
 440              	.LVL30:
 441 0004 1E3B     		subs	r3, r3, #30
 442 0006 8340     		lsls	r3, r3, r0
 443 0008 0249     		ldr	r1, .L29
 444 000a 8022     		movs	r2, #128
 445 000c 5200     		lsls	r2, r2, #1
 446 000e 8B50     		str	r3, [r1, r2]
 447              	.LVL31:
 448              	.LBE63:
 449              	.LBE62:
 257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Set interrupt pending */
 261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 450              		.loc 1 262 0
 451              		@ sp needed
 452 0010 7047     		bx	lr
 453              	.L30:
 454 0012 C046     		.align	2
 455              	.L29:
 456 0014 00E100E0 		.word	-536813312
 457              		.cfi_endproc
 458              	.LFE43:
 460              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 461              		.align	1
 462              		.global	HAL_NVIC_GetPendingIRQ
 463              		.syntax unified
 464              		.code	16
 465              		.thumb_func
ARM GAS  /tmp/cc9IMJG7.s 			page 35


 466              		.fpu softvfp
 468              	HAL_NVIC_GetPendingIRQ:
 469              	.LFB44:
 263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC
 266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 470              		.loc 1 274 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475              	.LVL32:
 476              	.LBB64:
 477              	.LBB65:
 655:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 478              		.loc 2 655 0
 479 0000 044A     		ldr	r2, .L32
 480 0002 8023     		movs	r3, #128
 481 0004 5B00     		lsls	r3, r3, #1
 482 0006 D358     		ldr	r3, [r2, r3]
 483 0008 1F22     		movs	r2, #31
 484 000a 1040     		ands	r0, r2
 485              	.LVL33:
 486 000c C340     		lsrs	r3, r3, r0
 487 000e 0120     		movs	r0, #1
 488 0010 1840     		ands	r0, r3
 489              	.LVL34:
 490              	.LBE65:
 491              	.LBE64:
 275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 492              		.loc 1 280 0
 493              		@ sp needed
 494 0012 7047     		bx	lr
 495              	.L33:
 496              		.align	2
 497              	.L32:
 498 0014 00E100E0 		.word	-536813312
 499              		.cfi_endproc
 500              	.LFE44:
 502              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 503              		.align	1
 504              		.global	HAL_NVIC_ClearPendingIRQ
 505              		.syntax unified
ARM GAS  /tmp/cc9IMJG7.s 			page 36


 506              		.code	16
 507              		.thumb_func
 508              		.fpu softvfp
 510              	HAL_NVIC_ClearPendingIRQ:
 511              	.LFB45:
 281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 512              		.loc 1 290 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517              	.LVL35:
 518              	.LBB66:
 519              	.LBB67:
 677:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 520              		.loc 2 677 0
 521 0000 1F23     		movs	r3, #31
 522 0002 1840     		ands	r0, r3
 523              	.LVL36:
 524 0004 1E3B     		subs	r3, r3, #30
 525 0006 8340     		lsls	r3, r3, r0
 526 0008 0249     		ldr	r1, .L35
 527 000a C022     		movs	r2, #192
 528 000c 5200     		lsls	r2, r2, #1
 529 000e 8B50     		str	r3, [r1, r2]
 530              	.LVL37:
 531              	.LBE67:
 532              	.LBE66:
 291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Clear pending interrupt */
 295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 533              		.loc 1 296 0
 534              		@ sp needed
 535 0010 7047     		bx	lr
 536              	.L36:
 537 0012 C046     		.align	2
 538              	.L35:
 539 0014 00E100E0 		.word	-536813312
 540              		.cfi_endproc
 541              	.LFE45:
 543              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 544              		.align	1
 545              		.global	HAL_SYSTICK_CLKSourceConfig
 546              		.syntax unified
 547              		.code	16
ARM GAS  /tmp/cc9IMJG7.s 			page 37


 548              		.thumb_func
 549              		.fpu softvfp
 551              	HAL_SYSTICK_CLKSourceConfig:
 552              	.LFB46:
 297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 553              		.loc 1 307 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 558              	.LVL38:
 308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 559              		.loc 1 310 0
 560 0000 0428     		cmp	r0, #4
 561 0002 05D0     		beq	.L40
 311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   {
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   else
 315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   {
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 562              		.loc 1 316 0
 563 0004 054A     		ldr	r2, .L41
 564 0006 1368     		ldr	r3, [r2]
 565 0008 0421     		movs	r1, #4
 566 000a 8B43     		bics	r3, r1
 567 000c 1360     		str	r3, [r2]
 568              	.L37:
 317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 569              		.loc 1 318 0
 570              		@ sp needed
 571 000e 7047     		bx	lr
 572              	.L40:
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 573              		.loc 1 312 0
 574 0010 024A     		ldr	r2, .L41
 575 0012 1368     		ldr	r3, [r2]
 576 0014 0421     		movs	r1, #4
 577 0016 0B43     		orrs	r3, r1
 578 0018 1360     		str	r3, [r2]
 579 001a F8E7     		b	.L37
 580              	.L42:
 581              		.align	2
 582              	.L41:
ARM GAS  /tmp/cc9IMJG7.s 			page 38


 583 001c 10E000E0 		.word	-536813552
 584              		.cfi_endproc
 585              	.LFE46:
 587              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 588              		.align	1
 589              		.weak	HAL_SYSTICK_Callback
 590              		.syntax unified
 591              		.code	16
 592              		.thumb_func
 593              		.fpu softvfp
 595              	HAL_SYSTICK_Callback:
 596              	.LFB48:
 319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 597              		.loc 1 334 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    */
 338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 602              		.loc 1 338 0
 603              		@ sp needed
 604 0000 7047     		bx	lr
 605              		.cfi_endproc
 606              	.LFE48:
 608              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 609              		.align	1
 610              		.global	HAL_SYSTICK_IRQHandler
 611              		.syntax unified
 612              		.code	16
 613              		.thumb_func
 614              		.fpu softvfp
 616              	HAL_SYSTICK_IRQHandler:
 617              	.LFB47:
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 618              		.loc 1 325 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc9IMJG7.s 			page 39


 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 4, -8
 625              		.cfi_offset 14, -4
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 626              		.loc 1 326 0
 627 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 628              	.LVL39:
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 629              		.loc 1 327 0
 630              		@ sp needed
 631 0006 10BD     		pop	{r4, pc}
 632              		.cfi_endproc
 633              	.LFE47:
 635              		.text
 636              	.Letext0:
 637              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 638              		.file 5 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
 639              		.file 6 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 640              		.file 7 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 641              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 642              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
 643              		.file 10 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/
 644              		.file 11 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/re
ARM GAS  /tmp/cc9IMJG7.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_cortex.c
     /tmp/cc9IMJG7.s:16     .text.HAL_NVIC_SetPriority:0000000000000000 $t
     /tmp/cc9IMJG7.s:23     .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
     /tmp/cc9IMJG7.s:110    .text.HAL_NVIC_SetPriority:0000000000000058 $d
     /tmp/cc9IMJG7.s:118    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
     /tmp/cc9IMJG7.s:125    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
     /tmp/cc9IMJG7.s:152    .text.HAL_NVIC_EnableIRQ:0000000000000010 $d
     /tmp/cc9IMJG7.s:157    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
     /tmp/cc9IMJG7.s:164    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
     /tmp/cc9IMJG7.s:192    .text.HAL_NVIC_DisableIRQ:0000000000000010 $d
     /tmp/cc9IMJG7.s:197    .text.HAL_NVIC_SystemReset:0000000000000000 $t
     /tmp/cc9IMJG7.s:204    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
     /tmp/cc9IMJG7.s:255    .text.HAL_NVIC_SystemReset:0000000000000014 $d
     /tmp/cc9IMJG7.s:265    .text.HAL_SYSTICK_Config:0000000000000000 $t
     /tmp/cc9IMJG7.s:272    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
     /tmp/cc9IMJG7.s:336    .text.HAL_SYSTICK_Config:000000000000002c $d
     /tmp/cc9IMJG7.s:343    .text.HAL_NVIC_GetPriority:0000000000000000 $t
     /tmp/cc9IMJG7.s:350    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
     /tmp/cc9IMJG7.s:412    .text.HAL_NVIC_GetPriority:0000000000000044 $d
     /tmp/cc9IMJG7.s:420    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
     /tmp/cc9IMJG7.s:427    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
     /tmp/cc9IMJG7.s:456    .text.HAL_NVIC_SetPendingIRQ:0000000000000014 $d
     /tmp/cc9IMJG7.s:461    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
     /tmp/cc9IMJG7.s:468    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
     /tmp/cc9IMJG7.s:498    .text.HAL_NVIC_GetPendingIRQ:0000000000000014 $d
     /tmp/cc9IMJG7.s:503    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/cc9IMJG7.s:510    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
     /tmp/cc9IMJG7.s:539    .text.HAL_NVIC_ClearPendingIRQ:0000000000000014 $d
     /tmp/cc9IMJG7.s:544    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
     /tmp/cc9IMJG7.s:551    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
     /tmp/cc9IMJG7.s:583    .text.HAL_SYSTICK_CLKSourceConfig:000000000000001c $d
     /tmp/cc9IMJG7.s:588    .text.HAL_SYSTICK_Callback:0000000000000000 $t
     /tmp/cc9IMJG7.s:595    .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
     /tmp/cc9IMJG7.s:609    .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
     /tmp/cc9IMJG7.s:616    .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
                           .group:0000000000000000 wm4.0.f4162676b8f623651f7a1199aa7e48f7
                           .group:0000000000000000 wm4.main.h.42.3e9602f258f21c216c24749e16771da2
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.e02fa95cc55e74dee1039d0a6f374aae
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
ARM GAS  /tmp/cc9IMJG7.s 			page 41


                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

NO UNDEFINED SYMBOLS
