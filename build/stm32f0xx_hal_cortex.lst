ARM GAS  /tmp/ccrKzLA6.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_cortex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	NVIC_EnableIRQ:
  23              	.LFB25:
  24              		.file 1 "cube/Drivers/CMSIS/Include/core_cm0.h"
   1:cube/Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:cube/Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:cube/Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:cube/Drivers/CMSIS/Include/core_cm0.h **** 
   9:cube/Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:cube/Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:cube/Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:cube/Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:cube/Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:cube/Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:cube/Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:cube/Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:cube/Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:cube/Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:cube/Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:cube/Drivers/CMSIS/Include/core_cm0.h ****    *
  21:cube/Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:cube/Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:cube/Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:cube/Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:cube/Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:cube/Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:cube/Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:cube/Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:cube/Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:cube/Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:cube/Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:cube/Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  34:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrKzLA6.s 			page 2


  35:cube/Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:cube/Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:cube/Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  41:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  44:cube/Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  46:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:cube/Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  50:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
  51:cube/Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:cube/Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  54:cube/Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:cube/Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  57:cube/Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:cube/Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  60:cube/Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:cube/Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
  63:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  64:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  65:cube/Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:cube/Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
  69:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
  72:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  73:cube/Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:cube/Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  79:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  81:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  82:cube/Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  87:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrKzLA6.s 			page 3


  92:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:cube/Drivers/CMSIS/Include/core_cm0.h **** 
  97:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 102:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 106:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 111:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 117:cube/Drivers/CMSIS/Include/core_cm0.h **** #else
 118:cube/Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 121:cube/Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:cube/Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 124:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 126:cube/Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 131:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 136:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 141:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 146:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /tmp/ccrKzLA6.s 			page 4


 149:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 151:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 156:cube/Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:cube/Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:cube/Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 161:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 163:cube/Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:cube/Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 166:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 168:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 170:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 172:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 174:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:cube/Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 177:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:cube/Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 181:cube/Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:cube/Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:cube/Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:cube/Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:cube/Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 188:cube/Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:cube/Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:cube/Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 193:cube/Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:cube/Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:cube/Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:cube/Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 199:cube/Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 201:cube/Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 203:cube/Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:cube/Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:cube/Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
ARM GAS  /tmp/ccrKzLA6.s 			page 5


 206:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 207:cube/Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:cube/Drivers/CMSIS/Include/core_cm0.h **** #else
 210:cube/Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:cube/Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 215:cube/Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:cube/Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 220:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 222:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 223:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 224:cube/Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:cube/Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:cube/Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 233:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 236:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 237:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 238:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 243:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 244:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 245:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 247:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 249:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 251:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:cube/Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 260:cube/Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
ARM GAS  /tmp/ccrKzLA6.s 			page 6


 263:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 264:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 267:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 270:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:cube/Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 273:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 274:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 275:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 277:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 279:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 281:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:cube/Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 287:cube/Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:cube/Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:cube/Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 291:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 292:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 293:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 295:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 297:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 299:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:cube/Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 311:cube/Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 315:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 318:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccrKzLA6.s 			page 7


 320:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 321:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 324:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 327:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:cube/Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 330:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 331:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 332:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 334:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 336:cube/Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 338:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:cube/Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:cube/Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:cube/Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:cube/Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 345:cube/Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:cube/Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:cube/Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 349:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 351:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 352:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 353:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 358:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 359:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 360:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 362:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 364:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:cube/Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 376:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
ARM GAS  /tmp/ccrKzLA6.s 			page 8


 377:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 378:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 379:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 380:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 385:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 386:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 387:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 389:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 391:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:cube/Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:cube/Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 402:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 406:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 409:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 412:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 415:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 418:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 422:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 425:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 428:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 431:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrKzLA6.s 			page 9


 434:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 437:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 440:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 443:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 446:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 450:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 453:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 456:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 459:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 462:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 466:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 469:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 472:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 476:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 479:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 483:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 485:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 486:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 487:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /tmp/ccrKzLA6.s 			page 10


 491:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 492:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 493:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 494:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 496:cube/Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 498:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:cube/Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:cube/Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 504:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 508:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 511:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 514:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 517:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 521:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 525:cube/Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 529:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 532:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 535:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 537:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 538:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 539:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:cube/Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 545:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 547:cube/Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrKzLA6.s 			page 11


 548:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 549:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 554:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 555:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 556:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 561:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 563:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 564:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 569:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 571:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 573:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 574:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 575:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 580:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 581:cube/Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:cube/Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 587:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:cube/Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:cube/Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 591:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 592:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 594:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 595:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 596:cube/Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:cube/Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:cube/Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:cube/Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:cube/Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 604:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
ARM GAS  /tmp/ccrKzLA6.s 			page 12


 605:cube/Drivers/CMSIS/Include/core_cm0.h **** */
 606:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 607:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 608:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 609:cube/Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 611:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 616:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 617:cube/Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:cube/Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:cube/Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 623:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 624:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 625:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 629:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:cube/Drivers/CMSIS/Include/core_cm0.h **** {
  25              		.loc 1 630 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 0200     		movs	r2, r0
  38 0008 FB1D     		adds	r3, r7, #7
  39 000a 1A70     		strb	r2, [r3]
 631:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  40              		.loc 1 631 0
  41 000c FB1D     		adds	r3, r7, #7
  42 000e 1B78     		ldrb	r3, [r3]
  43 0010 1A00     		movs	r2, r3
  44 0012 1F23     		movs	r3, #31
  45 0014 1A40     		ands	r2, r3
  46 0016 044B     		ldr	r3, .L2
  47 0018 0121     		movs	r1, #1
  48 001a 9140     		lsls	r1, r1, r2
  49 001c 0A00     		movs	r2, r1
  50 001e 1A60     		str	r2, [r3]
 632:cube/Drivers/CMSIS/Include/core_cm0.h **** }
  51              		.loc 1 632 0
  52 0020 C046     		nop
  53 0022 BD46     		mov	sp, r7
ARM GAS  /tmp/ccrKzLA6.s 			page 13


  54 0024 02B0     		add	sp, sp, #8
  55              		@ sp needed
  56 0026 80BD     		pop	{r7, pc}
  57              	.L3:
  58              		.align	2
  59              	.L2:
  60 0028 00E100E0 		.word	-536813312
  61              		.cfi_endproc
  62              	.LFE25:
  64              		.section	.text.NVIC_DisableIRQ,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.code	16
  68              		.thumb_func
  69              		.fpu softvfp
  71              	NVIC_DisableIRQ:
  72              	.LFB26:
 633:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 634:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 635:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 636:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 640:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:cube/Drivers/CMSIS/Include/core_cm0.h **** {
  73              		.loc 1 641 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 82B0     		sub	sp, sp, #8
  82              		.cfi_def_cfa_offset 16
  83 0004 00AF     		add	r7, sp, #0
  84              		.cfi_def_cfa_register 7
  85 0006 0200     		movs	r2, r0
  86 0008 FB1D     		adds	r3, r7, #7
  87 000a 1A70     		strb	r2, [r3]
 642:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  88              		.loc 1 642 0
  89 000c FB1D     		adds	r3, r7, #7
  90 000e 1B78     		ldrb	r3, [r3]
  91 0010 1A00     		movs	r2, r3
  92 0012 1F23     		movs	r3, #31
  93 0014 1340     		ands	r3, r2
  94 0016 0549     		ldr	r1, .L5
  95 0018 0122     		movs	r2, #1
  96 001a 9A40     		lsls	r2, r2, r3
  97 001c 1300     		movs	r3, r2
  98 001e 8022     		movs	r2, #128
  99 0020 8B50     		str	r3, [r1, r2]
 643:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 100              		.loc 1 643 0
 101 0022 C046     		nop
ARM GAS  /tmp/ccrKzLA6.s 			page 14


 102 0024 BD46     		mov	sp, r7
 103 0026 02B0     		add	sp, sp, #8
 104              		@ sp needed
 105 0028 80BD     		pop	{r7, pc}
 106              	.L6:
 107 002a C046     		.align	2
 108              	.L5:
 109 002c 00E100E0 		.word	-536813312
 110              		.cfi_endproc
 111              	.LFE26:
 113              		.section	.text.NVIC_GetPendingIRQ,"ax",%progbits
 114              		.align	1
 115              		.syntax unified
 116              		.code	16
 117              		.thumb_func
 118              		.fpu softvfp
 120              	NVIC_GetPendingIRQ:
 121              	.LFB27:
 644:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 645:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 646:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 647:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 653:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 122              		.loc 1 654 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 7, -8
 129              		.cfi_offset 14, -4
 130 0002 82B0     		sub	sp, sp, #8
 131              		.cfi_def_cfa_offset 16
 132 0004 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
 134 0006 0200     		movs	r2, r0
 135 0008 FB1D     		adds	r3, r7, #7
 136 000a 1A70     		strb	r2, [r3]
 655:cube/Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 137              		.loc 1 655 0
 138 000c 084A     		ldr	r2, .L9
 139 000e 8023     		movs	r3, #128
 140 0010 5B00     		lsls	r3, r3, #1
 141 0012 D258     		ldr	r2, [r2, r3]
 142 0014 FB1D     		adds	r3, r7, #7
 143 0016 1B78     		ldrb	r3, [r3]
 144 0018 1900     		movs	r1, r3
 145 001a 1F23     		movs	r3, #31
 146 001c 0B40     		ands	r3, r1
 147 001e DA40     		lsrs	r2, r2, r3
 148 0020 1300     		movs	r3, r2
ARM GAS  /tmp/ccrKzLA6.s 			page 15


 149 0022 0122     		movs	r2, #1
 150 0024 1340     		ands	r3, r2
 656:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 151              		.loc 1 656 0
 152 0026 1800     		movs	r0, r3
 153 0028 BD46     		mov	sp, r7
 154 002a 02B0     		add	sp, sp, #8
 155              		@ sp needed
 156 002c 80BD     		pop	{r7, pc}
 157              	.L10:
 158 002e C046     		.align	2
 159              	.L9:
 160 0030 00E100E0 		.word	-536813312
 161              		.cfi_endproc
 162              	.LFE27:
 164              		.section	.text.NVIC_SetPendingIRQ,"ax",%progbits
 165              		.align	1
 166              		.syntax unified
 167              		.code	16
 168              		.thumb_func
 169              		.fpu softvfp
 171              	NVIC_SetPendingIRQ:
 172              	.LFB28:
 657:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 658:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 659:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 660:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 664:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 173              		.loc 1 665 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 8
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 82B0     		sub	sp, sp, #8
 182              		.cfi_def_cfa_offset 16
 183 0004 00AF     		add	r7, sp, #0
 184              		.cfi_def_cfa_register 7
 185 0006 0200     		movs	r2, r0
 186 0008 FB1D     		adds	r3, r7, #7
 187 000a 1A70     		strb	r2, [r3]
 666:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 188              		.loc 1 666 0
 189 000c FB1D     		adds	r3, r7, #7
 190 000e 1B78     		ldrb	r3, [r3]
 191 0010 1A00     		movs	r2, r3
 192 0012 1F23     		movs	r3, #31
 193 0014 1340     		ands	r3, r2
 194 0016 0549     		ldr	r1, .L12
 195 0018 0122     		movs	r2, #1
 196 001a 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccrKzLA6.s 			page 16


 197 001c 8023     		movs	r3, #128
 198 001e 5B00     		lsls	r3, r3, #1
 199 0020 CA50     		str	r2, [r1, r3]
 667:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 200              		.loc 1 667 0
 201 0022 C046     		nop
 202 0024 BD46     		mov	sp, r7
 203 0026 02B0     		add	sp, sp, #8
 204              		@ sp needed
 205 0028 80BD     		pop	{r7, pc}
 206              	.L13:
 207 002a C046     		.align	2
 208              	.L12:
 209 002c 00E100E0 		.word	-536813312
 210              		.cfi_endproc
 211              	.LFE28:
 213              		.section	.text.NVIC_ClearPendingIRQ,"ax",%progbits
 214              		.align	1
 215              		.syntax unified
 216              		.code	16
 217              		.thumb_func
 218              		.fpu softvfp
 220              	NVIC_ClearPendingIRQ:
 221              	.LFB29:
 668:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 669:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 670:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 671:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 675:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 222              		.loc 1 676 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 8
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0000 80B5     		push	{r7, lr}
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 0002 82B0     		sub	sp, sp, #8
 231              		.cfi_def_cfa_offset 16
 232 0004 00AF     		add	r7, sp, #0
 233              		.cfi_def_cfa_register 7
 234 0006 0200     		movs	r2, r0
 235 0008 FB1D     		adds	r3, r7, #7
 236 000a 1A70     		strb	r2, [r3]
 677:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 237              		.loc 1 677 0
 238 000c FB1D     		adds	r3, r7, #7
 239 000e 1B78     		ldrb	r3, [r3]
 240 0010 1A00     		movs	r2, r3
 241 0012 1F23     		movs	r3, #31
 242 0014 1340     		ands	r3, r2
 243 0016 0549     		ldr	r1, .L15
 244 0018 0122     		movs	r2, #1
ARM GAS  /tmp/ccrKzLA6.s 			page 17


 245 001a 9A40     		lsls	r2, r2, r3
 246 001c C023     		movs	r3, #192
 247 001e 5B00     		lsls	r3, r3, #1
 248 0020 CA50     		str	r2, [r1, r3]
 678:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 249              		.loc 1 678 0
 250 0022 C046     		nop
 251 0024 BD46     		mov	sp, r7
 252 0026 02B0     		add	sp, sp, #8
 253              		@ sp needed
 254 0028 80BD     		pop	{r7, pc}
 255              	.L16:
 256 002a C046     		.align	2
 257              	.L15:
 258 002c 00E100E0 		.word	-536813312
 259              		.cfi_endproc
 260              	.LFE29:
 262              		.section	.text.NVIC_SetPriority,"ax",%progbits
 263              		.align	1
 264              		.syntax unified
 265              		.code	16
 266              		.thumb_func
 267              		.fpu softvfp
 269              	NVIC_SetPriority:
 270              	.LFB30:
 679:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 680:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 681:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 682:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:cube/Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 688:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 271              		.loc 1 689 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 8
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 90B5     		push	{r4, r7, lr}
 276              		.cfi_def_cfa_offset 12
 277              		.cfi_offset 4, -12
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 83B0     		sub	sp, sp, #12
 281              		.cfi_def_cfa_offset 24
 282 0004 00AF     		add	r7, sp, #0
 283              		.cfi_def_cfa_register 7
 284 0006 0200     		movs	r2, r0
 285 0008 3960     		str	r1, [r7]
 286 000a FB1D     		adds	r3, r7, #7
 287 000c 1A70     		strb	r2, [r3]
 690:cube/Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 288              		.loc 1 690 0
 289 000e FB1D     		adds	r3, r7, #7
 290 0010 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccrKzLA6.s 			page 18


 291 0012 7F2B     		cmp	r3, #127
 292 0014 32D9     		bls	.L18
 691:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 692:cube/Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 293              		.loc 1 692 0
 294 0016 2F4A     		ldr	r2, .L21
 295 0018 FB1D     		adds	r3, r7, #7
 296 001a 1B78     		ldrb	r3, [r3]
 297 001c 1900     		movs	r1, r3
 298 001e 0F23     		movs	r3, #15
 299 0020 0B40     		ands	r3, r1
 300 0022 083B     		subs	r3, r3, #8
 301 0024 9B08     		lsrs	r3, r3, #2
 302 0026 0633     		adds	r3, r3, #6
 303 0028 9B00     		lsls	r3, r3, #2
 304 002a D318     		adds	r3, r2, r3
 305 002c 0433     		adds	r3, r3, #4
 306 002e 1B68     		ldr	r3, [r3]
 307 0030 FA1D     		adds	r2, r7, #7
 308 0032 1278     		ldrb	r2, [r2]
 309 0034 1100     		movs	r1, r2
 310 0036 0322     		movs	r2, #3
 311 0038 0A40     		ands	r2, r1
 312 003a D200     		lsls	r2, r2, #3
 313 003c FF21     		movs	r1, #255
 314 003e 9140     		lsls	r1, r1, r2
 315 0040 0A00     		movs	r2, r1
 316 0042 D243     		mvns	r2, r2
 317 0044 1A40     		ands	r2, r3
 318 0046 1100     		movs	r1, r2
 693:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 319              		.loc 1 693 0
 320 0048 3B68     		ldr	r3, [r7]
 321 004a 9B01     		lsls	r3, r3, #6
 322 004c FF22     		movs	r2, #255
 323 004e 1A40     		ands	r2, r3
 324 0050 FB1D     		adds	r3, r7, #7
 325 0052 1B78     		ldrb	r3, [r3]
 326 0054 1800     		movs	r0, r3
 327 0056 0323     		movs	r3, #3
 328 0058 0340     		ands	r3, r0
 329 005a DB00     		lsls	r3, r3, #3
 330 005c 9A40     		lsls	r2, r2, r3
 692:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 331              		.loc 1 692 0
 332 005e 1D48     		ldr	r0, .L21
 333 0060 FB1D     		adds	r3, r7, #7
 334 0062 1B78     		ldrb	r3, [r3]
 335 0064 1C00     		movs	r4, r3
 336 0066 0F23     		movs	r3, #15
 337 0068 2340     		ands	r3, r4
 338 006a 083B     		subs	r3, r3, #8
 339 006c 9B08     		lsrs	r3, r3, #2
 340 006e 0A43     		orrs	r2, r1
 341 0070 0633     		adds	r3, r3, #6
 342 0072 9B00     		lsls	r3, r3, #2
 343 0074 C318     		adds	r3, r0, r3
ARM GAS  /tmp/ccrKzLA6.s 			page 19


 344 0076 0433     		adds	r3, r3, #4
 345 0078 1A60     		str	r2, [r3]
 694:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 695:cube/Drivers/CMSIS/Include/core_cm0.h ****   else
 696:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 697:cube/Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 700:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 346              		.loc 1 700 0
 347 007a 27E0     		b	.L20
 348              	.L18:
 697:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 349              		.loc 1 697 0
 350 007c 164A     		ldr	r2, .L21+4
 351 007e FB1D     		adds	r3, r7, #7
 352 0080 1B78     		ldrb	r3, [r3]
 353 0082 5BB2     		sxtb	r3, r3
 354 0084 9B08     		lsrs	r3, r3, #2
 355 0086 C033     		adds	r3, r3, #192
 356 0088 9B00     		lsls	r3, r3, #2
 357 008a 9B58     		ldr	r3, [r3, r2]
 358 008c FA1D     		adds	r2, r7, #7
 359 008e 1278     		ldrb	r2, [r2]
 360 0090 1100     		movs	r1, r2
 361 0092 0322     		movs	r2, #3
 362 0094 0A40     		ands	r2, r1
 363 0096 D200     		lsls	r2, r2, #3
 364 0098 FF21     		movs	r1, #255
 365 009a 9140     		lsls	r1, r1, r2
 366 009c 0A00     		movs	r2, r1
 367 009e D243     		mvns	r2, r2
 368 00a0 1A40     		ands	r2, r3
 369 00a2 1100     		movs	r1, r2
 698:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 370              		.loc 1 698 0
 371 00a4 3B68     		ldr	r3, [r7]
 372 00a6 9B01     		lsls	r3, r3, #6
 373 00a8 FF22     		movs	r2, #255
 374 00aa 1A40     		ands	r2, r3
 375 00ac FB1D     		adds	r3, r7, #7
 376 00ae 1B78     		ldrb	r3, [r3]
 377 00b0 1800     		movs	r0, r3
 378 00b2 0323     		movs	r3, #3
 379 00b4 0340     		ands	r3, r0
 380 00b6 DB00     		lsls	r3, r3, #3
 381 00b8 9A40     		lsls	r2, r2, r3
 697:cube/Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 382              		.loc 1 697 0
 383 00ba 0748     		ldr	r0, .L21+4
 384 00bc FB1D     		adds	r3, r7, #7
 385 00be 1B78     		ldrb	r3, [r3]
 386 00c0 5BB2     		sxtb	r3, r3
 387 00c2 9B08     		lsrs	r3, r3, #2
 388 00c4 0A43     		orrs	r2, r1
 389 00c6 C033     		adds	r3, r3, #192
 390 00c8 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccrKzLA6.s 			page 20


 391 00ca 1A50     		str	r2, [r3, r0]
 392              	.L20:
 393              		.loc 1 700 0
 394 00cc C046     		nop
 395 00ce BD46     		mov	sp, r7
 396 00d0 03B0     		add	sp, sp, #12
 397              		@ sp needed
 398 00d2 90BD     		pop	{r4, r7, pc}
 399              	.L22:
 400              		.align	2
 401              	.L21:
 402 00d4 00ED00E0 		.word	-536810240
 403 00d8 00E100E0 		.word	-536813312
 404              		.cfi_endproc
 405              	.LFE30:
 407              		.section	.text.NVIC_GetPriority,"ax",%progbits
 408              		.align	1
 409              		.syntax unified
 410              		.code	16
 411              		.thumb_func
 412              		.fpu softvfp
 414              	NVIC_GetPriority:
 415              	.LFB31:
 701:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 702:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 703:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 704:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:cube/Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:cube/Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:cube/Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 712:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 416              		.loc 1 713 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 0000 80B5     		push	{r7, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 82B0     		sub	sp, sp, #8
 425              		.cfi_def_cfa_offset 16
 426 0004 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 428 0006 0200     		movs	r2, r0
 429 0008 FB1D     		adds	r3, r7, #7
 430 000a 1A70     		strb	r2, [r3]
 714:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 715:cube/Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 431              		.loc 1 715 0
 432 000c FB1D     		adds	r3, r7, #7
 433 000e 1B78     		ldrb	r3, [r3]
 434 0010 7F2B     		cmp	r3, #127
ARM GAS  /tmp/ccrKzLA6.s 			page 21


 435 0012 18D9     		bls	.L24
 716:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 717:cube/Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 436              		.loc 1 717 0
 437 0014 174A     		ldr	r2, .L26
 438 0016 FB1D     		adds	r3, r7, #7
 439 0018 1B78     		ldrb	r3, [r3]
 440 001a 1900     		movs	r1, r3
 441 001c 0F23     		movs	r3, #15
 442 001e 0B40     		ands	r3, r1
 443 0020 083B     		subs	r3, r3, #8
 444 0022 9B08     		lsrs	r3, r3, #2
 445 0024 0633     		adds	r3, r3, #6
 446 0026 9B00     		lsls	r3, r3, #2
 447 0028 D318     		adds	r3, r2, r3
 448 002a 0433     		adds	r3, r3, #4
 449 002c 1A68     		ldr	r2, [r3]
 450 002e FB1D     		adds	r3, r7, #7
 451 0030 1B78     		ldrb	r3, [r3]
 452 0032 1900     		movs	r1, r3
 453 0034 0323     		movs	r3, #3
 454 0036 0B40     		ands	r3, r1
 455 0038 DB00     		lsls	r3, r3, #3
 456 003a DA40     		lsrs	r2, r2, r3
 457 003c 1300     		movs	r3, r2
 458 003e 9B09     		lsrs	r3, r3, #6
 459 0040 0322     		movs	r2, #3
 460 0042 1340     		ands	r3, r2
 461 0044 12E0     		b	.L25
 462              	.L24:
 718:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 719:cube/Drivers/CMSIS/Include/core_cm0.h ****   else
 720:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 721:cube/Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 463              		.loc 1 721 0
 464 0046 0C4A     		ldr	r2, .L26+4
 465 0048 FB1D     		adds	r3, r7, #7
 466 004a 1B78     		ldrb	r3, [r3]
 467 004c 5BB2     		sxtb	r3, r3
 468 004e 9B08     		lsrs	r3, r3, #2
 469 0050 C033     		adds	r3, r3, #192
 470 0052 9B00     		lsls	r3, r3, #2
 471 0054 9A58     		ldr	r2, [r3, r2]
 472 0056 FB1D     		adds	r3, r7, #7
 473 0058 1B78     		ldrb	r3, [r3]
 474 005a 1900     		movs	r1, r3
 475 005c 0323     		movs	r3, #3
 476 005e 0B40     		ands	r3, r1
 477 0060 DB00     		lsls	r3, r3, #3
 478 0062 DA40     		lsrs	r2, r2, r3
 479 0064 1300     		movs	r3, r2
 480 0066 9B09     		lsrs	r3, r3, #6
 481 0068 0322     		movs	r2, #3
 482 006a 1340     		ands	r3, r2
 483              	.L25:
 722:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 723:cube/Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /tmp/ccrKzLA6.s 			page 22


 484              		.loc 1 723 0
 485 006c 1800     		movs	r0, r3
 486 006e BD46     		mov	sp, r7
 487 0070 02B0     		add	sp, sp, #8
 488              		@ sp needed
 489 0072 80BD     		pop	{r7, pc}
 490              	.L27:
 491              		.align	2
 492              	.L26:
 493 0074 00ED00E0 		.word	-536810240
 494 0078 00E100E0 		.word	-536813312
 495              		.cfi_endproc
 496              	.LFE31:
 498              		.section	.text.NVIC_SystemReset,"ax",%progbits
 499              		.align	1
 500              		.syntax unified
 501              		.code	16
 502              		.thumb_func
 503              		.fpu softvfp
 505              	NVIC_SystemReset:
 506              	.LFB32:
 724:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 725:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 726:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 727:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 730:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 507              		.loc 1 731 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 1, uses_anonymous_args = 0
 511 0000 80B5     		push	{r7, lr}
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
 515 0002 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517              	.LBB8:
 518              	.LBB9:
 519              		.file 2 "cube/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
ARM GAS  /tmp/ccrKzLA6.s 			page 23


  16:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccrKzLA6.s 			page 24


  73:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
ARM GAS  /tmp/ccrKzLA6.s 			page 25


 130:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  /tmp/ccrKzLA6.s 			page 26


 187:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccrKzLA6.s 			page 27


 244:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccrKzLA6.s 			page 28


 301:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrKzLA6.s 			page 29


 358:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/ccrKzLA6.s 			page 30


 415:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 520              		.loc 2 429 0
 521              		.syntax divided
 522              	@ 429 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 523 0004 BFF34F8F 		dsb 0xF
 524              	@ 0 "" 2
 525              		.thumb
 526              		.syntax unified
 527              	.LBE9:
 528              	.LBE8:
 732:cube/Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:cube/Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:cube/Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 529              		.loc 1 734 0
 530 0008 034B     		ldr	r3, .L30
 531 000a 044A     		ldr	r2, .L30+4
 532 000c DA60     		str	r2, [r3, #12]
 533              	.LBB10:
 534              	.LBB11:
 535              		.loc 2 429 0
 536              		.syntax divided
 537              	@ 429 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 538 000e BFF34F8F 		dsb 0xF
 539              	@ 0 "" 2
 540              		.thumb
 541              		.syntax unified
 542              	.L29:
 543              	.LBE11:
 544              	.LBE10:
 545              	.LBB12:
 546              	.LBB13:
 375:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 547              		.loc 2 375 0 discriminator 1
 548              		.syntax divided
 549              	@ 375 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 550 0012 C046     		nop
 551              	@ 0 "" 2
 552              		.thumb
 553              		.syntax unified
 554              	.LBE13:
 555              	.LBE12:
 735:cube/Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:cube/Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
ARM GAS  /tmp/ccrKzLA6.s 			page 31


 737:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 738:cube/Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 739:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 740:cube/Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 556              		.loc 1 740 0 discriminator 1
 557 0014 FDE7     		b	.L29
 558              	.L31:
 559 0016 C046     		.align	2
 560              	.L30:
 561 0018 00ED00E0 		.word	-536810240
 562 001c 0400FA05 		.word	100270084
 563              		.cfi_endproc
 564              	.LFE32:
 566              		.section	.text.SysTick_Config,"ax",%progbits
 567              		.align	1
 568              		.syntax unified
 569              		.code	16
 570              		.thumb_func
 571              		.fpu softvfp
 573              	SysTick_Config:
 574              	.LFB33:
 741:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 742:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 743:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 744:cube/Drivers/CMSIS/Include/core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 745:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 746:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 747:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 748:cube/Drivers/CMSIS/Include/core_cm0.h **** /* ##################################    SysTick function  ########################################
 749:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 750:cube/Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 751:cube/Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
 752:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that configure the System.
 753:cube/Drivers/CMSIS/Include/core_cm0.h ****   @{
 754:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 755:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 756:cube/Drivers/CMSIS/Include/core_cm0.h **** #if (__Vendor_SysTickConfig == 0U)
 757:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 758:cube/Drivers/CMSIS/Include/core_cm0.h **** /**
 759:cube/Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Tick Configuration
 760:cube/Drivers/CMSIS/Include/core_cm0.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 761:cube/Drivers/CMSIS/Include/core_cm0.h ****            Counter is in free running mode to generate periodic interrupts.
 762:cube/Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  ticks  Number of ticks between two interrupts.
 763:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return          0  Function succeeded.
 764:cube/Drivers/CMSIS/Include/core_cm0.h ****   \return          1  Function failed.
 765:cube/Drivers/CMSIS/Include/core_cm0.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 766:cube/Drivers/CMSIS/Include/core_cm0.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
 767:cube/Drivers/CMSIS/Include/core_cm0.h ****            must contain a vendor-specific implementation of this function.
 768:cube/Drivers/CMSIS/Include/core_cm0.h ****  */
 769:cube/Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 770:cube/Drivers/CMSIS/Include/core_cm0.h **** {
 575              		.loc 1 770 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 8
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579 0000 80B5     		push	{r7, lr}
 580              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrKzLA6.s 			page 32


 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 82B0     		sub	sp, sp, #8
 584              		.cfi_def_cfa_offset 16
 585 0004 00AF     		add	r7, sp, #0
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 771:cube/Drivers/CMSIS/Include/core_cm0.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 588              		.loc 1 771 0
 589 0008 7B68     		ldr	r3, [r7, #4]
 590 000a 013B     		subs	r3, r3, #1
 591 000c 0C4A     		ldr	r2, .L35
 592 000e 9342     		cmp	r3, r2
 593 0010 01D9     		bls	.L33
 772:cube/Drivers/CMSIS/Include/core_cm0.h ****   {
 773:cube/Drivers/CMSIS/Include/core_cm0.h ****     return (1UL);                                                   /* Reload value impossible */
 594              		.loc 1 773 0
 595 0012 0123     		movs	r3, #1
 596 0014 10E0     		b	.L34
 597              	.L33:
 774:cube/Drivers/CMSIS/Include/core_cm0.h ****   }
 775:cube/Drivers/CMSIS/Include/core_cm0.h **** 
 776:cube/Drivers/CMSIS/Include/core_cm0.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 598              		.loc 1 776 0
 599 0016 0B4B     		ldr	r3, .L35+4
 600 0018 7A68     		ldr	r2, [r7, #4]
 601 001a 013A     		subs	r2, r2, #1
 602 001c 5A60     		str	r2, [r3, #4]
 777:cube/Drivers/CMSIS/Include/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 603              		.loc 1 777 0
 604 001e 0123     		movs	r3, #1
 605 0020 5B42     		rsbs	r3, r3, #0
 606 0022 0321     		movs	r1, #3
 607 0024 1800     		movs	r0, r3
 608 0026 FFF7FEFF 		bl	NVIC_SetPriority
 778:cube/Drivers/CMSIS/Include/core_cm0.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 609              		.loc 1 778 0
 610 002a 064B     		ldr	r3, .L35+4
 611 002c 0022     		movs	r2, #0
 612 002e 9A60     		str	r2, [r3, #8]
 779:cube/Drivers/CMSIS/Include/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 613              		.loc 1 779 0
 614 0030 044B     		ldr	r3, .L35+4
 615 0032 0722     		movs	r2, #7
 616 0034 1A60     		str	r2, [r3]
 780:cube/Drivers/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 781:cube/Drivers/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
 782:cube/Drivers/CMSIS/Include/core_cm0.h ****   return (0UL);                                                     /* Function successful */
 617              		.loc 1 782 0
 618 0036 0023     		movs	r3, #0
 619              	.L34:
 783:cube/Drivers/CMSIS/Include/core_cm0.h **** }
 620              		.loc 1 783 0
 621 0038 1800     		movs	r0, r3
 622 003a BD46     		mov	sp, r7
 623 003c 02B0     		add	sp, sp, #8
 624              		@ sp needed
ARM GAS  /tmp/ccrKzLA6.s 			page 33


 625 003e 80BD     		pop	{r7, pc}
 626              	.L36:
 627              		.align	2
 628              	.L35:
 629 0040 FFFFFF00 		.word	16777215
 630 0044 10E000E0 		.word	-536813552
 631              		.cfi_endproc
 632              	.LFE33:
 634              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
 635              		.align	1
 636              		.global	HAL_NVIC_SetPriority
 637              		.syntax unified
 638              		.code	16
 639              		.thumb_func
 640              		.fpu softvfp
 642              	HAL_NVIC_SetPriority:
 643              	.LFB37:
 644              		.file 3 "cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c"
   1:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
   2:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************
   3:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @file    stm32f0xx_hal_cortex.c
   4:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following
   7:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
   9:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  11:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *  @verbatim
  12:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
  13:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
  15:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  16:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]  
  17:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  18:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     ===========================================================
  19:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  20:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  21:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     The Cortex-M0 exceptions are managed by CMSIS functions.
  22:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels. 
  23:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****              The priority can be 0..3. 
  24:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  25:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  26:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         -@- Priority Order:
  27:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             (#@) Lowest priority.
  28:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).  
  29:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  30:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority()
  31:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  32:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ()
  33:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       
  34:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       -@-  Negative value of IRQn_Type are not allowed.
  35:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  36:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  37:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  38:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  39:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     ========================================================
ARM GAS  /tmp/ccrKzLA6.s 			page 34


  40:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  41:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     Setup SysTick Timer for time base. 
  42:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****            
  43:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  44:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        is a CMSIS function that:
  45:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  46:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  47:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  48:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  49:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  50:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  51:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     
  52:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  53:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  54:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The HAL_SYSTICK_CLKSourceConfig() macro is defined
  55:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        inside the stm32f0xx_hal_cortex.h file.
  56:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  57:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  58:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  59:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  60:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  61:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  62:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  63:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  64:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  65:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  66:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  67:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   @endverbatim
  68:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************
  69:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @attention
  70:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  71:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  72:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  73:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  74:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * are permitted provided that the following conditions are met:
  75:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  76:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer.
  77:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  78:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer in the documentation
  79:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      and/or other materials provided with the distribution.
  80:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  81:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      may be used to endorse or promote products derived from this software
  82:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      without specific prior written permission.
  83:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  84:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  85:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  86:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  87:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  88:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  89:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  90:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  91:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  92:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  93:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  94:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  95:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************  
  96:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
ARM GAS  /tmp/ccrKzLA6.s 			page 35


  97:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  98:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  99:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** #include "stm32f0xx_hal.h"
 100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @addtogroup STM32F0xx_HAL_Driver
 102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
 106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief CORTEX CORTEX HAL module driver
 107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
 111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private typedef -----------------------------------------------------------*/
 113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private define ------------------------------------------------------------*/
 114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private macro -------------------------------------------------------------*/
 115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
 116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
 117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Exported functions ---------------------------------------------------------*/
 118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
 125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions
 126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *
 127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @verbatim
 128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
 132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       Systick functionalities 
 134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @endverbatim
 136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f0xx.h file)
 144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  PreemptPriority The preemption priority for the IRQn channel.
 145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority
 147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
 149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0 based products.   
 150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** { 
ARM GAS  /tmp/ccrKzLA6.s 			page 36


 645              		.loc 3 153 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 16
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649 0000 80B5     		push	{r7, lr}
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 7, -8
 652              		.cfi_offset 14, -4
 653 0002 84B0     		sub	sp, sp, #16
 654              		.cfi_def_cfa_offset 24
 655 0004 00AF     		add	r7, sp, #0
 656              		.cfi_def_cfa_register 7
 657 0006 B960     		str	r1, [r7, #8]
 658 0008 7A60     		str	r2, [r7, #4]
 659 000a 0F21     		movs	r1, #15
 660 000c 7B18     		adds	r3, r7, r1
 661 000e 021C     		adds	r2, r0, #0
 662 0010 1A70     		strb	r2, [r3]
 154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
 663              		.loc 3 156 0
 664 0012 BA68     		ldr	r2, [r7, #8]
 665 0014 7B18     		adds	r3, r7, r1
 666 0016 1B78     		ldrb	r3, [r3]
 667 0018 5BB2     		sxtb	r3, r3
 668 001a 1100     		movs	r1, r2
 669 001c 1800     		movs	r0, r3
 670 001e FFF7FEFF 		bl	NVIC_SetPriority
 157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 671              		.loc 3 157 0
 672 0022 C046     		nop
 673 0024 BD46     		mov	sp, r7
 674 0026 04B0     		add	sp, sp, #16
 675              		@ sp needed
 676 0028 80BD     		pop	{r7, pc}
 677              		.cfi_endproc
 678              	.LFE37:
 680              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 681              		.align	1
 682              		.global	HAL_NVIC_EnableIRQ
 683              		.syntax unified
 684              		.code	16
 685              		.thumb_func
 686              		.fpu softvfp
 688              	HAL_NVIC_EnableIRQ:
 689              	.LFB38:
 158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         function should be called before. 
 163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
ARM GAS  /tmp/ccrKzLA6.s 			page 37


 168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 690              		.loc 3 169 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 8
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694 0000 80B5     		push	{r7, lr}
 695              		.cfi_def_cfa_offset 8
 696              		.cfi_offset 7, -8
 697              		.cfi_offset 14, -4
 698 0002 82B0     		sub	sp, sp, #8
 699              		.cfi_def_cfa_offset 16
 700 0004 00AF     		add	r7, sp, #0
 701              		.cfi_def_cfa_register 7
 702 0006 0200     		movs	r2, r0
 703 0008 FB1D     		adds	r3, r7, #7
 704 000a 1A70     		strb	r2, [r3]
 170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Enable interrupt */
 174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 705              		.loc 3 174 0
 706 000c FB1D     		adds	r3, r7, #7
 707 000e 1B78     		ldrb	r3, [r3]
 708 0010 5BB2     		sxtb	r3, r3
 709 0012 1800     		movs	r0, r3
 710 0014 FFF7FEFF 		bl	NVIC_EnableIRQ
 175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 711              		.loc 3 175 0
 712 0018 C046     		nop
 713 001a BD46     		mov	sp, r7
 714 001c 02B0     		add	sp, sp, #8
 715              		@ sp needed
 716 001e 80BD     		pop	{r7, pc}
 717              		.cfi_endproc
 718              	.LFE38:
 720              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 721              		.align	1
 722              		.global	HAL_NVIC_DisableIRQ
 723              		.syntax unified
 724              		.code	16
 725              		.thumb_func
 726              		.fpu softvfp
 728              	HAL_NVIC_DisableIRQ:
 729              	.LFB39:
 176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 730              		.loc 3 185 0
ARM GAS  /tmp/ccrKzLA6.s 			page 38


 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 8
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 80B5     		push	{r7, lr}
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 7, -8
 737              		.cfi_offset 14, -4
 738 0002 82B0     		sub	sp, sp, #8
 739              		.cfi_def_cfa_offset 16
 740 0004 00AF     		add	r7, sp, #0
 741              		.cfi_def_cfa_register 7
 742 0006 0200     		movs	r2, r0
 743 0008 FB1D     		adds	r3, r7, #7
 744 000a 1A70     		strb	r2, [r3]
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Disable interrupt */
 190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 745              		.loc 3 190 0
 746 000c FB1D     		adds	r3, r7, #7
 747 000e 1B78     		ldrb	r3, [r3]
 748 0010 5BB2     		sxtb	r3, r3
 749 0012 1800     		movs	r0, r3
 750 0014 FFF7FEFF 		bl	NVIC_DisableIRQ
 191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 751              		.loc 3 191 0
 752 0018 C046     		nop
 753 001a BD46     		mov	sp, r7
 754 001c 02B0     		add	sp, sp, #8
 755              		@ sp needed
 756 001e 80BD     		pop	{r7, pc}
 757              		.cfi_endproc
 758              	.LFE39:
 760              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 761              		.align	1
 762              		.global	HAL_NVIC_SystemReset
 763              		.syntax unified
 764              		.code	16
 765              		.thumb_func
 766              		.fpu softvfp
 768              	HAL_NVIC_SystemReset:
 769              	.LFB40:
 192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 770              		.loc 3 198 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774 0000 80B5     		push	{r7, lr}
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 7, -8
ARM GAS  /tmp/ccrKzLA6.s 			page 39


 777              		.cfi_offset 14, -4
 778 0002 00AF     		add	r7, sp, #0
 779              		.cfi_def_cfa_register 7
 199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* System Reset */
 200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SystemReset();
 780              		.loc 3 200 0
 781 0004 FFF7FEFF 		bl	NVIC_SystemReset
 201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 782              		.loc 3 201 0
 783 0008 C046     		nop
 784 000a BD46     		mov	sp, r7
 785              		@ sp needed
 786 000c 80BD     		pop	{r7, pc}
 787              		.cfi_endproc
 788              	.LFE40:
 790              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 791              		.align	1
 792              		.global	HAL_SYSTICK_Config
 793              		.syntax unified
 794              		.code	16
 795              		.thumb_func
 796              		.fpu softvfp
 798              	HAL_SYSTICK_Config:
 799              	.LFB41:
 202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *                  - 1  Function failed.
 209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 800              		.loc 3 211 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 8
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804 0000 80B5     		push	{r7, lr}
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 82B0     		sub	sp, sp, #8
 809              		.cfi_def_cfa_offset 16
 810 0004 00AF     		add	r7, sp, #0
 811              		.cfi_def_cfa_register 7
 812 0006 7860     		str	r0, [r7, #4]
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 813              		.loc 3 212 0
 814 0008 7B68     		ldr	r3, [r7, #4]
 815 000a 1800     		movs	r0, r3
 816 000c FFF7FEFF 		bl	SysTick_Config
 817 0010 0300     		movs	r3, r0
 213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 818              		.loc 3 213 0
 819 0012 1800     		movs	r0, r3
 820 0014 BD46     		mov	sp, r7
ARM GAS  /tmp/ccrKzLA6.s 			page 40


 821 0016 02B0     		add	sp, sp, #8
 822              		@ sp needed
 823 0018 80BD     		pop	{r7, pc}
 824              		.cfi_endproc
 825              	.LFE41:
 827              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 828              		.align	1
 829              		.global	HAL_NVIC_GetPriority
 830              		.syntax unified
 831              		.code	16
 832              		.thumb_func
 833              		.fpu softvfp
 835              	HAL_NVIC_GetPriority:
 836              	.LFB42:
 214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @}
 216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
 219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *  @brief   Cortex control functions
 220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *
 221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @verbatim
 222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
 226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities.
 228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @endverbatim
 231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 837              		.loc 3 243 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 8
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841 0000 80B5     		push	{r7, lr}
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 7, -8
 844              		.cfi_offset 14, -4
 845 0002 82B0     		sub	sp, sp, #8
 846              		.cfi_def_cfa_offset 16
 847 0004 00AF     		add	r7, sp, #0
 848              		.cfi_def_cfa_register 7
 849 0006 0200     		movs	r2, r0
ARM GAS  /tmp/ccrKzLA6.s 			page 41


 850 0008 FB1D     		adds	r3, r7, #7
 851 000a 1A70     		strb	r2, [r3]
 244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 852              		.loc 3 245 0
 853 000c FB1D     		adds	r3, r7, #7
 854 000e 1B78     		ldrb	r3, [r3]
 855 0010 5BB2     		sxtb	r3, r3
 856 0012 1800     		movs	r0, r3
 857 0014 FFF7FEFF 		bl	NVIC_GetPriority
 858 0018 0300     		movs	r3, r0
 246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 859              		.loc 3 246 0
 860 001a 1800     		movs	r0, r3
 861 001c BD46     		mov	sp, r7
 862 001e 02B0     		add	sp, sp, #8
 863              		@ sp needed
 864 0020 80BD     		pop	{r7, pc}
 865              		.cfi_endproc
 866              	.LFE42:
 868              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 869              		.align	1
 870              		.global	HAL_NVIC_SetPendingIRQ
 871              		.syntax unified
 872              		.code	16
 873              		.thumb_func
 874              		.fpu softvfp
 876              	HAL_NVIC_SetPendingIRQ:
 877              	.LFB43:
 247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 878              		.loc 3 256 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 8
 881              		@ frame_needed = 1, uses_anonymous_args = 0
 882 0000 80B5     		push	{r7, lr}
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 7, -8
 885              		.cfi_offset 14, -4
 886 0002 82B0     		sub	sp, sp, #8
 887              		.cfi_def_cfa_offset 16
 888 0004 00AF     		add	r7, sp, #0
 889              		.cfi_def_cfa_register 7
 890 0006 0200     		movs	r2, r0
 891 0008 FB1D     		adds	r3, r7, #7
 892 000a 1A70     		strb	r2, [r3]
 257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
ARM GAS  /tmp/ccrKzLA6.s 			page 42


 260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Set interrupt pending */
 261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 893              		.loc 3 261 0
 894 000c FB1D     		adds	r3, r7, #7
 895 000e 1B78     		ldrb	r3, [r3]
 896 0010 5BB2     		sxtb	r3, r3
 897 0012 1800     		movs	r0, r3
 898 0014 FFF7FEFF 		bl	NVIC_SetPendingIRQ
 262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 899              		.loc 3 262 0
 900 0018 C046     		nop
 901 001a BD46     		mov	sp, r7
 902 001c 02B0     		add	sp, sp, #8
 903              		@ sp needed
 904 001e 80BD     		pop	{r7, pc}
 905              		.cfi_endproc
 906              	.LFE43:
 908              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 909              		.align	1
 910              		.global	HAL_NVIC_GetPendingIRQ
 911              		.syntax unified
 912              		.code	16
 913              		.thumb_func
 914              		.fpu softvfp
 916              	HAL_NVIC_GetPendingIRQ:
 917              	.LFB44:
 263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC
 266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 918              		.loc 3 274 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 8
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 0002 82B0     		sub	sp, sp, #8
 927              		.cfi_def_cfa_offset 16
 928 0004 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 930 0006 0200     		movs	r2, r0
 931 0008 FB1D     		adds	r3, r7, #7
 932 000a 1A70     		strb	r2, [r3]
 275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
ARM GAS  /tmp/ccrKzLA6.s 			page 43


 279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 933              		.loc 3 279 0
 934 000c FB1D     		adds	r3, r7, #7
 935 000e 1B78     		ldrb	r3, [r3]
 936 0010 5BB2     		sxtb	r3, r3
 937 0012 1800     		movs	r0, r3
 938 0014 FFF7FEFF 		bl	NVIC_GetPendingIRQ
 939 0018 0300     		movs	r3, r0
 280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 940              		.loc 3 280 0
 941 001a 1800     		movs	r0, r3
 942 001c BD46     		mov	sp, r7
 943 001e 02B0     		add	sp, sp, #8
 944              		@ sp needed
 945 0020 80BD     		pop	{r7, pc}
 946              		.cfi_endproc
 947              	.LFE44:
 949              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 950              		.align	1
 951              		.global	HAL_NVIC_ClearPendingIRQ
 952              		.syntax unified
 953              		.code	16
 954              		.thumb_func
 955              		.fpu softvfp
 957              	HAL_NVIC_ClearPendingIRQ:
 958              	.LFB45:
 281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 959              		.loc 3 290 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 8
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 80B5     		push	{r7, lr}
 964              		.cfi_def_cfa_offset 8
 965              		.cfi_offset 7, -8
 966              		.cfi_offset 14, -4
 967 0002 82B0     		sub	sp, sp, #8
 968              		.cfi_def_cfa_offset 16
 969 0004 00AF     		add	r7, sp, #0
 970              		.cfi_def_cfa_register 7
 971 0006 0200     		movs	r2, r0
 972 0008 FB1D     		adds	r3, r7, #7
 973 000a 1A70     		strb	r2, [r3]
 291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Clear pending interrupt */
 295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 974              		.loc 3 295 0
ARM GAS  /tmp/ccrKzLA6.s 			page 44


 975 000c FB1D     		adds	r3, r7, #7
 976 000e 1B78     		ldrb	r3, [r3]
 977 0010 5BB2     		sxtb	r3, r3
 978 0012 1800     		movs	r0, r3
 979 0014 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 980              		.loc 3 296 0
 981 0018 C046     		nop
 982 001a BD46     		mov	sp, r7
 983 001c 02B0     		add	sp, sp, #8
 984              		@ sp needed
 985 001e 80BD     		pop	{r7, pc}
 986              		.cfi_endproc
 987              	.LFE45:
 989              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 990              		.align	1
 991              		.global	HAL_SYSTICK_CLKSourceConfig
 992              		.syntax unified
 993              		.code	16
 994              		.thumb_func
 995              		.fpu softvfp
 997              	HAL_SYSTICK_CLKSourceConfig:
 998              	.LFB46:
 297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 999              		.loc 3 307 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 8
 1002              		@ frame_needed = 1, uses_anonymous_args = 0
 1003 0000 80B5     		push	{r7, lr}
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 7, -8
 1006              		.cfi_offset 14, -4
 1007 0002 82B0     		sub	sp, sp, #8
 1008              		.cfi_def_cfa_offset 16
 1009 0004 00AF     		add	r7, sp, #0
 1010              		.cfi_def_cfa_register 7
 1011 0006 7860     		str	r0, [r7, #4]
 308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 1012              		.loc 3 310 0
 1013 0008 7B68     		ldr	r3, [r7, #4]
 1014 000a 042B     		cmp	r3, #4
 1015 000c 06D1     		bne	.L50
 311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   {
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 1016              		.loc 3 312 0
ARM GAS  /tmp/ccrKzLA6.s 			page 45


 1017 000e 084B     		ldr	r3, .L53
 1018 0010 1A68     		ldr	r2, [r3]
 1019 0012 074B     		ldr	r3, .L53
 1020 0014 0421     		movs	r1, #4
 1021 0016 0A43     		orrs	r2, r1
 1022 0018 1A60     		str	r2, [r3]
 313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   else
 315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   {
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1023              		.loc 3 318 0
 1024 001a 05E0     		b	.L52
 1025              	.L50:
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 1026              		.loc 3 316 0
 1027 001c 044B     		ldr	r3, .L53
 1028 001e 1A68     		ldr	r2, [r3]
 1029 0020 034B     		ldr	r3, .L53
 1030 0022 0421     		movs	r1, #4
 1031 0024 8A43     		bics	r2, r1
 1032 0026 1A60     		str	r2, [r3]
 1033              	.L52:
 1034              		.loc 3 318 0
 1035 0028 C046     		nop
 1036 002a BD46     		mov	sp, r7
 1037 002c 02B0     		add	sp, sp, #8
 1038              		@ sp needed
 1039 002e 80BD     		pop	{r7, pc}
 1040              	.L54:
 1041              		.align	2
 1042              	.L53:
 1043 0030 10E000E0 		.word	-536813552
 1044              		.cfi_endproc
 1045              	.LFE46:
 1047              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 1048              		.align	1
 1049              		.global	HAL_SYSTICK_IRQHandler
 1050              		.syntax unified
 1051              		.code	16
 1052              		.thumb_func
 1053              		.fpu softvfp
 1055              	HAL_SYSTICK_IRQHandler:
 1056              	.LFB47:
 319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1057              		.loc 3 325 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccrKzLA6.s 			page 46


 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0002 00AF     		add	r7, sp, #0
 1066              		.cfi_def_cfa_register 7
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 1067              		.loc 3 326 0
 1068 0004 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1069              		.loc 3 327 0
 1070 0008 C046     		nop
 1071 000a BD46     		mov	sp, r7
 1072              		@ sp needed
 1073 000c 80BD     		pop	{r7, pc}
 1074              		.cfi_endproc
 1075              	.LFE47:
 1077              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 1078              		.align	1
 1079              		.weak	HAL_SYSTICK_Callback
 1080              		.syntax unified
 1081              		.code	16
 1082              		.thumb_func
 1083              		.fpu softvfp
 1085              	HAL_SYSTICK_Callback:
 1086              	.LFB48:
 328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1087              		.loc 3 334 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 1, uses_anonymous_args = 0
 1091 0000 80B5     		push	{r7, lr}
 1092              		.cfi_def_cfa_offset 8
 1093              		.cfi_offset 7, -8
 1094              		.cfi_offset 14, -4
 1095 0002 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    */
 338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1097              		.loc 3 338 0
 1098 0004 C046     		nop
 1099 0006 BD46     		mov	sp, r7
 1100              		@ sp needed
 1101 0008 80BD     		pop	{r7, pc}
 1102              		.cfi_endproc
 1103              	.LFE48:
 1105              		.text
 1106              	.Letext0:
 1107              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1108              		.file 5 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
ARM GAS  /tmp/ccrKzLA6.s 			page 47


 1109              		.file 6 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 1110              		.file 7 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1111              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 1112              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
 1113              		.file 10 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/
 1114              		.file 11 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/re
ARM GAS  /tmp/ccrKzLA6.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_cortex.c
     /tmp/ccrKzLA6.s:16     .text.NVIC_EnableIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:22     .text.NVIC_EnableIRQ:0000000000000000 NVIC_EnableIRQ
     /tmp/ccrKzLA6.s:60     .text.NVIC_EnableIRQ:0000000000000028 $d
     /tmp/ccrKzLA6.s:65     .text.NVIC_DisableIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:71     .text.NVIC_DisableIRQ:0000000000000000 NVIC_DisableIRQ
     /tmp/ccrKzLA6.s:109    .text.NVIC_DisableIRQ:000000000000002c $d
     /tmp/ccrKzLA6.s:114    .text.NVIC_GetPendingIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:120    .text.NVIC_GetPendingIRQ:0000000000000000 NVIC_GetPendingIRQ
     /tmp/ccrKzLA6.s:160    .text.NVIC_GetPendingIRQ:0000000000000030 $d
     /tmp/ccrKzLA6.s:165    .text.NVIC_SetPendingIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:171    .text.NVIC_SetPendingIRQ:0000000000000000 NVIC_SetPendingIRQ
     /tmp/ccrKzLA6.s:209    .text.NVIC_SetPendingIRQ:000000000000002c $d
     /tmp/ccrKzLA6.s:214    .text.NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:220    .text.NVIC_ClearPendingIRQ:0000000000000000 NVIC_ClearPendingIRQ
     /tmp/ccrKzLA6.s:258    .text.NVIC_ClearPendingIRQ:000000000000002c $d
     /tmp/ccrKzLA6.s:263    .text.NVIC_SetPriority:0000000000000000 $t
     /tmp/ccrKzLA6.s:269    .text.NVIC_SetPriority:0000000000000000 NVIC_SetPriority
     /tmp/ccrKzLA6.s:402    .text.NVIC_SetPriority:00000000000000d4 $d
     /tmp/ccrKzLA6.s:408    .text.NVIC_GetPriority:0000000000000000 $t
     /tmp/ccrKzLA6.s:414    .text.NVIC_GetPriority:0000000000000000 NVIC_GetPriority
     /tmp/ccrKzLA6.s:493    .text.NVIC_GetPriority:0000000000000074 $d
     /tmp/ccrKzLA6.s:499    .text.NVIC_SystemReset:0000000000000000 $t
     /tmp/ccrKzLA6.s:505    .text.NVIC_SystemReset:0000000000000000 NVIC_SystemReset
     /tmp/ccrKzLA6.s:561    .text.NVIC_SystemReset:0000000000000018 $d
     /tmp/ccrKzLA6.s:567    .text.SysTick_Config:0000000000000000 $t
     /tmp/ccrKzLA6.s:573    .text.SysTick_Config:0000000000000000 SysTick_Config
     /tmp/ccrKzLA6.s:629    .text.SysTick_Config:0000000000000040 $d
     /tmp/ccrKzLA6.s:635    .text.HAL_NVIC_SetPriority:0000000000000000 $t
     /tmp/ccrKzLA6.s:642    .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
     /tmp/ccrKzLA6.s:681    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:688    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
     /tmp/ccrKzLA6.s:721    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:728    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
     /tmp/ccrKzLA6.s:761    .text.HAL_NVIC_SystemReset:0000000000000000 $t
     /tmp/ccrKzLA6.s:768    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
     /tmp/ccrKzLA6.s:791    .text.HAL_SYSTICK_Config:0000000000000000 $t
     /tmp/ccrKzLA6.s:798    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
     /tmp/ccrKzLA6.s:828    .text.HAL_NVIC_GetPriority:0000000000000000 $t
     /tmp/ccrKzLA6.s:835    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
     /tmp/ccrKzLA6.s:869    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:876    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
     /tmp/ccrKzLA6.s:909    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:916    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
     /tmp/ccrKzLA6.s:950    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/ccrKzLA6.s:957    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
     /tmp/ccrKzLA6.s:990    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
     /tmp/ccrKzLA6.s:997    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
     /tmp/ccrKzLA6.s:1043   .text.HAL_SYSTICK_CLKSourceConfig:0000000000000030 $d
     /tmp/ccrKzLA6.s:1048   .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
     /tmp/ccrKzLA6.s:1055   .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
     /tmp/ccrKzLA6.s:1085   .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
     /tmp/ccrKzLA6.s:1078   .text.HAL_SYSTICK_Callback:0000000000000000 $t
                           .group:0000000000000000 wm4.0.b7c3d577b02d87ac381ee43eef398462
                           .group:0000000000000000 wm4.main.h.42.3939338cba6ab0a8b761d08be8206d51
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.b0c07d2233f75e3b04f03d95093d88ca
ARM GAS  /tmp/ccrKzLA6.s 			page 49


                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart.h.38.e5eada3cdf37ca88de33bd21ddd21a5e
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart_ex.h.38.9430c2ca5ec832677dbe7308c46115fd
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

NO UNDEFINED SYMBOLS
