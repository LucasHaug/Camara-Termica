ARM GAS  /tmp/ccsJUVTr.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_dma.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_DMA_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_DMA_Init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_DMA_Init:
  24              	.LFB37:
  25              		.file 1 "cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c"
   1:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
   2:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   ******************************************************************************
   3:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @file    stm32f0xx_hal_dma.c
   4:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief   DMA HAL module driver.
   6:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *    
   7:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *         This file provides firmware functions to manage the following 
   8:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *         functionalities of the Direct Memory Access (DMA) peripheral:
   9:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *           + Initialization and de-initialization functions
  10:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *           + IO operation functions
  11:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *           + Peripheral State and errors functions
  12:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   @verbatim     
  13:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   ==============================================================================      
  14:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                         ##### How to use this driver #####
  15:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   ============================================================================== 
  16:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   [..]
  17:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****    (#) Enable and configure the peripheral to be connected to the DMA Channel
  18:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        (except for internal SRAM / FLASH memories: no initialization is 
  19:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        necessary). Please refer to Reference manual for connection between peripherals
  20:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        and DMA requests .
  21:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  22:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****    (#) For a given Channel, program the required configuration through the following parameters:   
  23:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        Transfer Direction, Source and Destination data formats, 
  24:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        Circular or Normal mode, Channel Priority level, Source and Destination Increment mode, 
  25:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        using HAL_DMA_Init() function.
  26:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  27:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****    (#) Use HAL_DMA_GetState() function to return the DMA state and HAL_DMA_GetError() in case of er
  28:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        detection.
  29:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                     
  30:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****    (#) Use HAL_DMA_Abort() function to abort the current transfer
  31:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                    
  32:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      -@-   In Memory-to-Memory transfer mode, Circular mode is not allowed.
  33:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      *** Polling mode IO operation ***
ARM GAS  /tmp/ccsJUVTr.s 			page 2


  34:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      =================================   
  35:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     [..] 
  36:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Use HAL_DMA_Start() to start DMA transfer after the configuration of Source 
  37:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           address and destination address and the Length of data to be transferred
  38:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Use HAL_DMA_PollForTransfer() to poll for the end of current transfer, in this  
  39:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           case a fixed Timeout can be configured by User depending from his application.
  40:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  41:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      *** Interrupt mode IO operation ***    
  42:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      =================================== 
  43:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     [..]
  44:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()
  45:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ() 
  46:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of  
  47:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           Source address and destination address and the Length of data to be transferred. 
  48:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           In this case the DMA interrupt is configured 
  49:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Use HAL_DMA_Channel_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine
  50:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can 
  51:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           add his own function by customization of function pointer XferCpltCallback and 
  52:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           XferErrorCallback (i.e a member of DMA handle structure). 
  53:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  54:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      *** DMA HAL driver macros list ***
  55:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      ============================================= 
  56:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      [..]
  57:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        Below the list of most used macros in DMA HAL driver.
  58:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  59:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      [..] 
  60:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (@) You can refer to the DMA HAL driver header file for more useful macros  
  61:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  62:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   @endverbatim
  63:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   ******************************************************************************
  64:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @attention
  65:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *
  66:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  67:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *
  68:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * Redistribution and use in source and binary forms, with or without modification,
  69:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * are permitted provided that the following conditions are met:
  70:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  71:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *      this list of conditions and the following disclaimer.
  72:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  73:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *      this list of conditions and the following disclaimer in the documentation
  74:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *      and/or other materials provided with the distribution.
  75:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  76:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *      may be used to endorse or promote products derived from this software
  77:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *      without specific prior written permission.
  78:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *
  79:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  80:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  81:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  82:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  83:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  84:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  85:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  86:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  87:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  88:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  89:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *
  90:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   ******************************************************************************
ARM GAS  /tmp/ccsJUVTr.s 			page 3


  91:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */ 
  92:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  93:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Includes ------------------------------------------------------------------*/
  94:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** #include "stm32f0xx_hal.h"
  95:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
  96:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @addtogroup STM32F0xx_HAL_Driver
  97:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
  98:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
  99:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @defgroup DMA DMA
 102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief DMA HAL module driver
 103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** #ifdef HAL_DMA_MODULE_ENABLED
 107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Private typedef -----------------------------------------------------------*/
 109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Private define ------------------------------------------------------------*/
 110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Private macro -------------------------------------------------------------*/
 111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Private variables ---------------------------------------------------------*/
 112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Private function prototypes -----------------------------------------------*/
 113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @defgroup DMA_Private_Functions DMA Private Functions
 114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32
 117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma);
 118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @}
 120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Exported functions ---------------------------------------------------------*/
 123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @defgroup DMA_Exported_Functions DMA Exported Functions
 125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @defgroup DMA_Exported_Functions_Group1 Initialization and de-initialization functions
 129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  *  @brief   Initialization and de-initialization functions 
 130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  *
 131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** @verbatim   
 132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  ===============================================================================
 133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****              ##### Initialization and de-initialization functions  #####
 134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  ===============================================================================  
 135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     [..]
 136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     This section provides functions allowing to initialize the DMA Channel source
 137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     and destination addresses, incrementation and data sizes, transfer direction, 
 138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     circular/normal mode selection, memory-to-memory mode selection and Channel priority value.
 139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     [..]
 140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     The HAL_DMA_Init() function follows the DMA configuration procedures as described in
 141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     reference manual.  
 142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** @endverbatim
 144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
ARM GAS  /tmp/ccsJUVTr.s 			page 4


 148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Initialize the DMA according to the specified
 149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *         parameters in the DMA_InitTypeDef and initialize the associated handle.
 150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *               the configuration information for the specified DMA Channel.  
 152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** { 
  26              		.loc 1 155 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 84B0     		sub	sp, sp, #16
  35              		.cfi_def_cfa_offset 24
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
 156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   uint32_t tmp = 0U;
  39              		.loc 1 156 0
  40 0008 0023     		movs	r3, #0
  41 000a FB60     		str	r3, [r7, #12]
 157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Check the DMA handle allocation */
 159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(NULL == hdma)
  42              		.loc 1 159 0
  43 000c 7B68     		ldr	r3, [r7, #4]
  44 000e 002B     		cmp	r3, #0
  45 0010 01D1     		bne	.L2
 160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     return HAL_ERROR;
  46              		.loc 1 161 0
  47 0012 0123     		movs	r3, #1
  48 0014 42E0     		b	.L3
  49              	.L2:
 162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Check the parameters */
 165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_MODE(hdma->Init.Mode));
 172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Change DMA peripheral state */
 175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->State = HAL_DMA_STATE_BUSY;
  50              		.loc 1 175 0
  51 0016 7B68     		ldr	r3, [r7, #4]
  52 0018 2122     		movs	r2, #33
  53 001a 0221     		movs	r1, #2
  54 001c 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/ccsJUVTr.s 			page 5


 176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Get the CR register value */
 178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   tmp = hdma->Instance->CCR;
  55              		.loc 1 178 0
  56 001e 7B68     		ldr	r3, [r7, #4]
  57 0020 1B68     		ldr	r3, [r3]
  58 0022 1B68     		ldr	r3, [r3]
  59 0024 FB60     		str	r3, [r7, #12]
 179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
 181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
  60              		.loc 1 181 0
  61 0026 FB68     		ldr	r3, [r7, #12]
  62 0028 1E4A     		ldr	r2, .L4
  63 002a 1340     		ands	r3, r2
  64 002c FB60     		str	r3, [r7, #12]
 182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                       DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
 183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                       DMA_CCR_DIR));
 184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Prepare the DMA Channel configuration */
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   tmp |=  hdma->Init.Direction        |
  65              		.loc 1 186 0
  66 002e 7B68     		ldr	r3, [r7, #4]
  67 0030 5A68     		ldr	r2, [r3, #4]
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.PeriphInc           | hdma->Init.MemInc           |
  68              		.loc 1 187 0
  69 0032 7B68     		ldr	r3, [r7, #4]
  70 0034 9B68     		ldr	r3, [r3, #8]
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.PeriphInc           | hdma->Init.MemInc           |
  71              		.loc 1 186 0
  72 0036 1A43     		orrs	r2, r3
  73              		.loc 1 187 0
  74 0038 7B68     		ldr	r3, [r7, #4]
  75 003a DB68     		ldr	r3, [r3, #12]
  76 003c 1A43     		orrs	r2, r3
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
  77              		.loc 1 188 0
  78 003e 7B68     		ldr	r3, [r7, #4]
  79 0040 1B69     		ldr	r3, [r3, #16]
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.PeriphInc           | hdma->Init.MemInc           |
  80              		.loc 1 187 0
  81 0042 1A43     		orrs	r2, r3
  82              		.loc 1 188 0
  83 0044 7B68     		ldr	r3, [r7, #4]
  84 0046 5B69     		ldr	r3, [r3, #20]
  85 0048 1A43     		orrs	r2, r3
 189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.Mode                | hdma->Init.Priority;
  86              		.loc 1 189 0
  87 004a 7B68     		ldr	r3, [r7, #4]
  88 004c 9B69     		ldr	r3, [r3, #24]
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
  89              		.loc 1 188 0
  90 004e 1A43     		orrs	r2, r3
  91              		.loc 1 189 0
  92 0050 7B68     		ldr	r3, [r7, #4]
  93 0052 DB69     		ldr	r3, [r3, #28]
  94 0054 1343     		orrs	r3, r2
ARM GAS  /tmp/ccsJUVTr.s 			page 6


 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           hdma->Init.PeriphInc           | hdma->Init.MemInc           |
  95              		.loc 1 186 0
  96 0056 FA68     		ldr	r2, [r7, #12]
  97 0058 1343     		orrs	r3, r2
  98 005a FB60     		str	r3, [r7, #12]
 190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Write to DMA Channel CR register */
 192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CCR = tmp;  
  99              		.loc 1 192 0
 100 005c 7B68     		ldr	r3, [r7, #4]
 101 005e 1B68     		ldr	r3, [r3]
 102 0060 FA68     		ldr	r2, [r7, #12]
 103 0062 1A60     		str	r2, [r3]
 193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Initialize DmaBaseAddress and ChannelIndex parameters used 
 195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
 196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   DMA_CalcBaseAndBitshift(hdma);
 104              		.loc 1 196 0
 105 0064 7B68     		ldr	r3, [r7, #4]
 106 0066 1800     		movs	r0, r3
 107 0068 FFF7FEFF 		bl	DMA_CalcBaseAndBitshift
 197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Clean callbacks */
 199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->XferCpltCallback = NULL;
 108              		.loc 1 199 0
 109 006c 7B68     		ldr	r3, [r7, #4]
 110 006e 0022     		movs	r2, #0
 111 0070 9A62     		str	r2, [r3, #40]
 200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->XferHalfCpltCallback = NULL;
 112              		.loc 1 200 0
 113 0072 7B68     		ldr	r3, [r7, #4]
 114 0074 0022     		movs	r2, #0
 115 0076 DA62     		str	r2, [r3, #44]
 201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->XferErrorCallback = NULL;
 116              		.loc 1 201 0
 117 0078 7B68     		ldr	r3, [r7, #4]
 118 007a 0022     		movs	r2, #0
 119 007c 1A63     		str	r2, [r3, #48]
 202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->XferAbortCallback = NULL;
 120              		.loc 1 202 0
 121 007e 7B68     		ldr	r3, [r7, #4]
 122 0080 0022     		movs	r2, #0
 123 0082 5A63     		str	r2, [r3, #52]
 203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Initialise the error code */
 205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 124              		.loc 1 205 0
 125 0084 7B68     		ldr	r3, [r7, #4]
 126 0086 0022     		movs	r2, #0
 127 0088 9A63     		str	r2, [r3, #56]
 206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Initialize the DMA state*/
 208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->State = HAL_DMA_STATE_READY;
 128              		.loc 1 208 0
 129 008a 7B68     		ldr	r3, [r7, #4]
 130 008c 2122     		movs	r2, #33
 131 008e 0121     		movs	r1, #1
ARM GAS  /tmp/ccsJUVTr.s 			page 7


 132 0090 9954     		strb	r1, [r3, r2]
 209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Allocate lock resource and initialize it */
 211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Lock = HAL_UNLOCKED;
 133              		.loc 1 211 0
 134 0092 7B68     		ldr	r3, [r7, #4]
 135 0094 2022     		movs	r2, #32
 136 0096 0021     		movs	r1, #0
 137 0098 9954     		strb	r1, [r3, r2]
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return HAL_OK;
 138              		.loc 1 213 0
 139 009a 0023     		movs	r3, #0
 140              	.L3:
 214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }  
 141              		.loc 1 214 0
 142 009c 1800     		movs	r0, r3
 143 009e BD46     		mov	sp, r7
 144 00a0 04B0     		add	sp, sp, #16
 145              		@ sp needed
 146 00a2 80BD     		pop	{r7, pc}
 147              	.L5:
 148              		.align	2
 149              	.L4:
 150 00a4 0FC0FFFF 		.word	-16369
 151              		.cfi_endproc
 152              	.LFE37:
 154              		.section	.text.HAL_DMA_DeInit,"ax",%progbits
 155              		.align	1
 156              		.global	HAL_DMA_DeInit
 157              		.syntax unified
 158              		.code	16
 159              		.thumb_func
 160              		.fpu softvfp
 162              	HAL_DMA_DeInit:
 163              	.LFB38:
 215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  DeInitialize the DMA peripheral 
 218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *               the configuration information for the specified DMA Channel.  
 220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 164              		.loc 1 223 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 8
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 0000 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 82B0     		sub	sp, sp, #8
 173              		.cfi_def_cfa_offset 16
 174 0004 00AF     		add	r7, sp, #0
 175              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccsJUVTr.s 			page 8


 176 0006 7860     		str	r0, [r7, #4]
 224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Check the DMA handle allocation */
 225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(NULL == hdma)
 177              		.loc 1 225 0
 178 0008 7B68     		ldr	r3, [r7, #4]
 179 000a 002B     		cmp	r3, #0
 180 000c 01D1     		bne	.L7
 226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     return HAL_ERROR;
 181              		.loc 1 227 0
 182 000e 0123     		movs	r3, #1
 183 0010 2FE0     		b	.L8
 184              	.L7:
 228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Check the parameters */
 231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Disable the selected DMA Channelx */
 234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CCR &= ~DMA_CCR_EN;
 185              		.loc 1 234 0
 186 0012 7B68     		ldr	r3, [r7, #4]
 187 0014 1B68     		ldr	r3, [r3]
 188 0016 1A68     		ldr	r2, [r3]
 189 0018 7B68     		ldr	r3, [r7, #4]
 190 001a 1B68     		ldr	r3, [r3]
 191 001c 0121     		movs	r1, #1
 192 001e 8A43     		bics	r2, r1
 193 0020 1A60     		str	r2, [r3]
 235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Reset DMA Channel control register */
 237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CCR  = 0U;
 194              		.loc 1 237 0
 195 0022 7B68     		ldr	r3, [r7, #4]
 196 0024 1B68     		ldr	r3, [r3]
 197 0026 0022     		movs	r2, #0
 198 0028 1A60     		str	r2, [r3]
 238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Reset DMA Channel Number of Data to Transfer register */
 240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CNDTR = 0U;
 199              		.loc 1 240 0
 200 002a 7B68     		ldr	r3, [r7, #4]
 201 002c 1B68     		ldr	r3, [r3]
 202 002e 0022     		movs	r2, #0
 203 0030 5A60     		str	r2, [r3, #4]
 241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Reset DMA Channel peripheral address register */
 243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CPAR  = 0U;
 204              		.loc 1 243 0
 205 0032 7B68     		ldr	r3, [r7, #4]
 206 0034 1B68     		ldr	r3, [r3]
 207 0036 0022     		movs	r2, #0
 208 0038 9A60     		str	r2, [r3, #8]
 244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Reset DMA Channel memory address register */
 246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CMAR = 0U;
 209              		.loc 1 246 0
ARM GAS  /tmp/ccsJUVTr.s 			page 9


 210 003a 7B68     		ldr	r3, [r7, #4]
 211 003c 1B68     		ldr	r3, [r3]
 212 003e 0022     		movs	r2, #0
 213 0040 DA60     		str	r2, [r3, #12]
 247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /* Get DMA Base Address */  
 249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   DMA_CalcBaseAndBitshift(hdma);
 214              		.loc 1 249 0
 215 0042 7B68     		ldr	r3, [r7, #4]
 216 0044 1800     		movs	r0, r3
 217 0046 FFF7FEFF 		bl	DMA_CalcBaseAndBitshift
 250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Clear all flags */
 252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 218              		.loc 1 252 0
 219 004a 7B68     		ldr	r3, [r7, #4]
 220 004c 1A6C     		ldr	r2, [r3, #64]
 221 004e 7B68     		ldr	r3, [r7, #4]
 222 0050 DB6B     		ldr	r3, [r3, #60]
 223 0052 0121     		movs	r1, #1
 224 0054 9140     		lsls	r1, r1, r2
 225 0056 0A00     		movs	r2, r1
 226 0058 5A60     		str	r2, [r3, #4]
 253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Initialize the error code */
 255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 227              		.loc 1 255 0
 228 005a 7B68     		ldr	r3, [r7, #4]
 229 005c 0022     		movs	r2, #0
 230 005e 9A63     		str	r2, [r3, #56]
 256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Initialize the DMA state */
 258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->State = HAL_DMA_STATE_RESET;
 231              		.loc 1 258 0
 232 0060 7B68     		ldr	r3, [r7, #4]
 233 0062 2122     		movs	r2, #33
 234 0064 0021     		movs	r1, #0
 235 0066 9954     		strb	r1, [r3, r2]
 259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Release Lock */
 261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_UNLOCK(hdma);
 236              		.loc 1 261 0
 237 0068 7B68     		ldr	r3, [r7, #4]
 238 006a 2022     		movs	r2, #32
 239 006c 0021     		movs	r1, #0
 240 006e 9954     		strb	r1, [r3, r2]
 262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return HAL_OK;
 241              		.loc 1 263 0
 242 0070 0023     		movs	r3, #0
 243              	.L8:
 264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 244              		.loc 1 264 0
 245 0072 1800     		movs	r0, r3
 246 0074 BD46     		mov	sp, r7
 247 0076 02B0     		add	sp, sp, #8
 248              		@ sp needed
ARM GAS  /tmp/ccsJUVTr.s 			page 10


 249 0078 80BD     		pop	{r7, pc}
 250              		.cfi_endproc
 251              	.LFE38:
 253              		.section	.text.HAL_DMA_Start,"ax",%progbits
 254              		.align	1
 255              		.global	HAL_DMA_Start
 256              		.syntax unified
 257              		.code	16
 258              		.thumb_func
 259              		.fpu softvfp
 261              	HAL_DMA_Start:
 262              	.LFB39:
 265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @}
 268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @defgroup DMA_Exported_Functions_Group2 Input and Output operation functions 
 271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  *  @brief   I/O operation functions  
 272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  *
 273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** @verbatim   
 274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  ===============================================================================
 275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                       #####  IO operation functions  #####
 276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  ===============================================================================  
 277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     [..]  This section provides functions allowing to:
 278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Configure the source, destination address and data length and Start DMA transfer
 279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Configure the source, destination address and data length and 
 280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           Start DMA transfer with interrupt
 281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Abort DMA transfer
 282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Poll for transfer complete
 283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Handle DMA interrupt request  
 284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** @endverbatim
 286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Start the DMA Transfer.
 291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *              the configuration information for the specified DMA Channel.  
 293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  SrcAddress The source memory Buffer address
 294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  DstAddress The destination memory Buffer address
 295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  DataLength The length of data to be transferred from source to destination
 296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, 
 299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 263              		.loc 1 299 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 24
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 14, -4
 271 0002 86B0     		sub	sp, sp, #24
 272              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccsJUVTr.s 			page 11


 273 0004 00AF     		add	r7, sp, #0
 274              		.cfi_def_cfa_register 7
 275 0006 F860     		str	r0, [r7, #12]
 276 0008 B960     		str	r1, [r7, #8]
 277 000a 7A60     		str	r2, [r7, #4]
 278 000c 3B60     		str	r3, [r7]
 300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	HAL_StatusTypeDef status = HAL_OK;
 279              		.loc 1 300 0
 280 000e 1723     		movs	r3, #23
 281 0010 FB18     		adds	r3, r7, r3
 282 0012 0022     		movs	r2, #0
 283 0014 1A70     		strb	r2, [r3]
 301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Check the parameters */
 303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Process locked */
 306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_LOCK(hdma);
 284              		.loc 1 306 0
 285 0016 FB68     		ldr	r3, [r7, #12]
 286 0018 2022     		movs	r2, #32
 287 001a 9B5C     		ldrb	r3, [r3, r2]
 288 001c 012B     		cmp	r3, #1
 289 001e 01D1     		bne	.L10
 290              		.loc 1 306 0 is_stmt 0 discriminator 1
 291 0020 0223     		movs	r3, #2
 292 0022 32E0     		b	.L11
 293              	.L10:
 294              		.loc 1 306 0 discriminator 2
 295 0024 FB68     		ldr	r3, [r7, #12]
 296 0026 2022     		movs	r2, #32
 297 0028 0121     		movs	r1, #1
 298 002a 9954     		strb	r1, [r3, r2]
 307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_STATE_READY == hdma->State)
 299              		.loc 1 308 0 is_stmt 1 discriminator 2
 300 002c FB68     		ldr	r3, [r7, #12]
 301 002e 2122     		movs	r2, #33
 302 0030 9B5C     		ldrb	r3, [r3, r2]
 303 0032 DBB2     		uxtb	r3, r3
 304 0034 012B     		cmp	r3, #1
 305 0036 1DD1     		bne	.L12
 309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Change DMA peripheral state */  
 311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->State = HAL_DMA_STATE_BUSY;
 306              		.loc 1 311 0
 307 0038 FB68     		ldr	r3, [r7, #12]
 308 003a 2122     		movs	r2, #33
 309 003c 0221     		movs	r1, #2
 310 003e 9954     		strb	r1, [r3, r2]
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 311              		.loc 1 313 0
 312 0040 FB68     		ldr	r3, [r7, #12]
 313 0042 0022     		movs	r2, #0
 314 0044 9A63     		str	r2, [r3, #56]
 314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
ARM GAS  /tmp/ccsJUVTr.s 			page 12


 315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Disable the peripheral */
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 315              		.loc 1 316 0
 316 0046 FB68     		ldr	r3, [r7, #12]
 317 0048 1B68     		ldr	r3, [r3]
 318 004a 1A68     		ldr	r2, [r3]
 319 004c FB68     		ldr	r3, [r7, #12]
 320 004e 1B68     		ldr	r3, [r3]
 321 0050 0121     		movs	r1, #1
 322 0052 8A43     		bics	r2, r1
 323 0054 1A60     		str	r2, [r3]
 317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Configure the source, destination address and the data length */
 319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 324              		.loc 1 319 0
 325 0056 3B68     		ldr	r3, [r7]
 326 0058 7A68     		ldr	r2, [r7, #4]
 327 005a B968     		ldr	r1, [r7, #8]
 328 005c F868     		ldr	r0, [r7, #12]
 329 005e FFF7FEFF 		bl	DMA_SetConfig
 320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Enable the Peripheral */
 322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->Instance->CCR |= DMA_CCR_EN;  
 330              		.loc 1 322 0
 331 0062 FB68     		ldr	r3, [r7, #12]
 332 0064 1B68     		ldr	r3, [r3]
 333 0066 1A68     		ldr	r2, [r3]
 334 0068 FB68     		ldr	r3, [r7, #12]
 335 006a 1B68     		ldr	r3, [r3]
 336 006c 0121     		movs	r1, #1
 337 006e 0A43     		orrs	r2, r1
 338 0070 1A60     		str	r2, [r3]
 339 0072 07E0     		b	.L13
 340              	.L12:
 323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Process Unlocked */
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	__HAL_UNLOCK(hdma);
 341              		.loc 1 327 0
 342 0074 FB68     		ldr	r3, [r7, #12]
 343 0076 2022     		movs	r2, #32
 344 0078 0021     		movs	r1, #0
 345 007a 9954     		strb	r1, [r3, r2]
 328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Remain BUSY */
 330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	status = HAL_BUSY;
 346              		.loc 1 330 0
 347 007c 1723     		movs	r3, #23
 348 007e FB18     		adds	r3, r7, r3
 349 0080 0222     		movs	r2, #2
 350 0082 1A70     		strb	r2, [r3]
 351              	.L13:
 331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }  
 332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return status; 
 352              		.loc 1 333 0
ARM GAS  /tmp/ccsJUVTr.s 			page 13


 353 0084 1723     		movs	r3, #23
 354 0086 FB18     		adds	r3, r7, r3
 355 0088 1B78     		ldrb	r3, [r3]
 356              	.L11:
 334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** } 
 357              		.loc 1 334 0
 358 008a 1800     		movs	r0, r3
 359 008c BD46     		mov	sp, r7
 360 008e 06B0     		add	sp, sp, #24
 361              		@ sp needed
 362 0090 80BD     		pop	{r7, pc}
 363              		.cfi_endproc
 364              	.LFE39:
 366              		.section	.text.HAL_DMA_Start_IT,"ax",%progbits
 367              		.align	1
 368              		.global	HAL_DMA_Start_IT
 369              		.syntax unified
 370              		.code	16
 371              		.thumb_func
 372              		.fpu softvfp
 374              	HAL_DMA_Start_IT:
 375              	.LFB40:
 335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Start the DMA Transfer with interrupt enabled.
 338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 339:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                     the configuration information for the specified DMA Channel.  
 340:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  SrcAddress The source memory Buffer address
 341:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  DstAddress The destination memory Buffer address
 342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  DataLength The length of data to be transferred from source to destination
 343:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 344:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddres
 346:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 376              		.loc 1 346 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 24
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 380 0000 80B5     		push	{r7, lr}
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 86B0     		sub	sp, sp, #24
 385              		.cfi_def_cfa_offset 32
 386 0004 00AF     		add	r7, sp, #0
 387              		.cfi_def_cfa_register 7
 388 0006 F860     		str	r0, [r7, #12]
 389 0008 B960     		str	r1, [r7, #8]
 390 000a 7A60     		str	r2, [r7, #4]
 391 000c 3B60     		str	r3, [r7]
 347:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	HAL_StatusTypeDef status = HAL_OK;
 392              		.loc 1 347 0
 393 000e 1723     		movs	r3, #23
 394 0010 FB18     		adds	r3, r7, r3
 395 0012 0022     		movs	r2, #0
 396 0014 1A70     		strb	r2, [r3]
 348:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
ARM GAS  /tmp/ccsJUVTr.s 			page 14


 349:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Check the parameters */
 350:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 351:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 352:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Process locked */
 353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_LOCK(hdma);
 397              		.loc 1 353 0
 398 0016 FB68     		ldr	r3, [r7, #12]
 399 0018 2022     		movs	r2, #32
 400 001a 9B5C     		ldrb	r3, [r3, r2]
 401 001c 012B     		cmp	r3, #1
 402 001e 01D1     		bne	.L15
 403              		.loc 1 353 0 is_stmt 0 discriminator 1
 404 0020 0223     		movs	r3, #2
 405 0022 4FE0     		b	.L16
 406              	.L15:
 407              		.loc 1 353 0 discriminator 2
 408 0024 FB68     		ldr	r3, [r7, #12]
 409 0026 2022     		movs	r2, #32
 410 0028 0121     		movs	r1, #1
 411 002a 9954     		strb	r1, [r3, r2]
 354:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 355:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_STATE_READY == hdma->State)
 412              		.loc 1 355 0 is_stmt 1 discriminator 2
 413 002c FB68     		ldr	r3, [r7, #12]
 414 002e 2122     		movs	r2, #33
 415 0030 9B5C     		ldrb	r3, [r3, r2]
 416 0032 DBB2     		uxtb	r3, r3
 417 0034 012B     		cmp	r3, #1
 418 0036 3AD1     		bne	.L17
 356:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Change DMA peripheral state */  
 358:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->State = HAL_DMA_STATE_BUSY;
 419              		.loc 1 358 0
 420 0038 FB68     		ldr	r3, [r7, #12]
 421 003a 2122     		movs	r2, #33
 422 003c 0221     		movs	r1, #2
 423 003e 9954     		strb	r1, [r3, r2]
 359:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 424              		.loc 1 360 0
 425 0040 FB68     		ldr	r3, [r7, #12]
 426 0042 0022     		movs	r2, #0
 427 0044 9A63     		str	r2, [r3, #56]
 361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 362:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Disable the peripheral */
 363:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->Instance->CCR &= ~DMA_CCR_EN;
 428              		.loc 1 363 0
 429 0046 FB68     		ldr	r3, [r7, #12]
 430 0048 1B68     		ldr	r3, [r3]
 431 004a 1A68     		ldr	r2, [r3]
 432 004c FB68     		ldr	r3, [r7, #12]
 433 004e 1B68     		ldr	r3, [r3]
 434 0050 0121     		movs	r1, #1
 435 0052 8A43     		bics	r2, r1
 436 0054 1A60     		str	r2, [r3]
 364:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Configure the source, destination address and the data length */  
ARM GAS  /tmp/ccsJUVTr.s 			page 15


 366:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 437              		.loc 1 366 0
 438 0056 3B68     		ldr	r3, [r7]
 439 0058 7A68     		ldr	r2, [r7, #4]
 440 005a B968     		ldr	r1, [r7, #8]
 441 005c F868     		ldr	r0, [r7, #12]
 442 005e FFF7FEFF 		bl	DMA_SetConfig
 367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 368:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Enable the transfer complete, & transfer error interrupts */
 369:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Half transfer interrupt is optional: enable it only if associated callback is available */
 370:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     if(NULL != hdma->XferHalfCpltCallback )
 443              		.loc 1 370 0
 444 0062 FB68     		ldr	r3, [r7, #12]
 445 0064 DB6A     		ldr	r3, [r3, #44]
 446 0066 002B     		cmp	r3, #0
 447 0068 08D0     		beq	.L18
 371:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {
 372:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 448              		.loc 1 372 0
 449 006a FB68     		ldr	r3, [r7, #12]
 450 006c 1B68     		ldr	r3, [r3]
 451 006e 1A68     		ldr	r2, [r3]
 452 0070 FB68     		ldr	r3, [r7, #12]
 453 0072 1B68     		ldr	r3, [r3]
 454 0074 0E21     		movs	r1, #14
 455 0076 0A43     		orrs	r2, r1
 456 0078 1A60     		str	r2, [r3]
 457 007a 0FE0     		b	.L19
 458              	.L18:
 373:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     }
 374:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	else
 375:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 376:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 459              		.loc 1 376 0
 460 007c FB68     		ldr	r3, [r7, #12]
 461 007e 1B68     		ldr	r3, [r3]
 462 0080 1A68     		ldr	r2, [r3]
 463 0082 FB68     		ldr	r3, [r7, #12]
 464 0084 1B68     		ldr	r3, [r3]
 465 0086 0A21     		movs	r1, #10
 466 0088 0A43     		orrs	r2, r1
 467 008a 1A60     		str	r2, [r3]
 377:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->Instance->CCR &= ~DMA_IT_HT;
 468              		.loc 1 377 0
 469 008c FB68     		ldr	r3, [r7, #12]
 470 008e 1B68     		ldr	r3, [r3]
 471 0090 1A68     		ldr	r2, [r3]
 472 0092 FB68     		ldr	r3, [r7, #12]
 473 0094 1B68     		ldr	r3, [r3]
 474 0096 0421     		movs	r1, #4
 475 0098 8A43     		bics	r2, r1
 476 009a 1A60     		str	r2, [r3]
 477              	.L19:
 378:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	}
 379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 380:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Enable the Peripheral */
 381:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->Instance->CCR |= DMA_CCR_EN;
ARM GAS  /tmp/ccsJUVTr.s 			page 16


 478              		.loc 1 381 0
 479 009c FB68     		ldr	r3, [r7, #12]
 480 009e 1B68     		ldr	r3, [r3]
 481 00a0 1A68     		ldr	r2, [r3]
 482 00a2 FB68     		ldr	r3, [r7, #12]
 483 00a4 1B68     		ldr	r3, [r3]
 484 00a6 0121     		movs	r1, #1
 485 00a8 0A43     		orrs	r2, r1
 486 00aa 1A60     		str	r2, [r3]
 487 00ac 07E0     		b	.L20
 488              	.L17:
 382:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 383:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 384:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 385:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Process Unlocked */
 386:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     __HAL_UNLOCK(hdma); 
 489              		.loc 1 386 0
 490 00ae FB68     		ldr	r3, [r7, #12]
 491 00b0 2022     		movs	r2, #32
 492 00b2 0021     		movs	r1, #0
 493 00b4 9954     		strb	r1, [r3, r2]
 387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Remain BUSY */
 389:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     status = HAL_BUSY;
 494              		.loc 1 389 0
 495 00b6 1723     		movs	r3, #23
 496 00b8 FB18     		adds	r3, r7, r3
 497 00ba 0222     		movs	r2, #2
 498 00bc 1A70     		strb	r2, [r3]
 499              	.L20:
 390:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }     
 391:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 392:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return status;    
 500              		.loc 1 392 0
 501 00be 1723     		movs	r3, #23
 502 00c0 FB18     		adds	r3, r7, r3
 503 00c2 1B78     		ldrb	r3, [r3]
 504              	.L16:
 393:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** } 
 505              		.loc 1 393 0
 506 00c4 1800     		movs	r0, r3
 507 00c6 BD46     		mov	sp, r7
 508 00c8 06B0     		add	sp, sp, #24
 509              		@ sp needed
 510 00ca 80BD     		pop	{r7, pc}
 511              		.cfi_endproc
 512              	.LFE40:
 514              		.section	.text.HAL_DMA_Abort,"ax",%progbits
 515              		.align	1
 516              		.global	HAL_DMA_Abort
 517              		.syntax unified
 518              		.code	16
 519              		.thumb_func
 520              		.fpu softvfp
 522              	HAL_DMA_Abort:
 523              	.LFB41:
 394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
ARM GAS  /tmp/ccsJUVTr.s 			page 17


 395:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Abort the DMA Transfer.
 397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
 398:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *               the configuration information for the specified DMA Channel.                  
 399:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 401:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
 402:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 524              		.loc 1 402 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 8
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0000 80B5     		push	{r7, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 7, -8
 531              		.cfi_offset 14, -4
 532 0002 82B0     		sub	sp, sp, #8
 533              		.cfi_def_cfa_offset 16
 534 0004 00AF     		add	r7, sp, #0
 535              		.cfi_def_cfa_register 7
 536 0006 7860     		str	r0, [r7, #4]
 403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	/* Disable DMA IT */
 404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 537              		.loc 1 404 0
 538 0008 7B68     		ldr	r3, [r7, #4]
 539 000a 1B68     		ldr	r3, [r3]
 540 000c 1A68     		ldr	r2, [r3]
 541 000e 7B68     		ldr	r3, [r7, #4]
 542 0010 1B68     		ldr	r3, [r3]
 543 0012 0E21     		movs	r1, #14
 544 0014 8A43     		bics	r2, r1
 545 0016 1A60     		str	r2, [r3]
 405:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	
 406:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	/* Disable the channel */
 407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	hdma->Instance->CCR &= ~DMA_CCR_EN;
 546              		.loc 1 407 0
 547 0018 7B68     		ldr	r3, [r7, #4]
 548 001a 1B68     		ldr	r3, [r3]
 549 001c 1A68     		ldr	r2, [r3]
 550 001e 7B68     		ldr	r3, [r7, #4]
 551 0020 1B68     		ldr	r3, [r3]
 552 0022 0121     		movs	r1, #1
 553 0024 8A43     		bics	r2, r1
 554 0026 1A60     		str	r2, [r3]
 408:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	
 409:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	/* Clear all flags */
 410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 555              		.loc 1 410 0
 556 0028 7B68     		ldr	r3, [r7, #4]
 557 002a 1A6C     		ldr	r2, [r3, #64]
 558 002c 7B68     		ldr	r3, [r7, #4]
 559 002e DB6B     		ldr	r3, [r3, #60]
 560 0030 0121     		movs	r1, #1
 561 0032 9140     		lsls	r1, r1, r2
 562 0034 0A00     		movs	r2, r1
 563 0036 5A60     		str	r2, [r3, #4]
 411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	
ARM GAS  /tmp/ccsJUVTr.s 			page 18


 412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	/* Change the DMA state*/
 413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	hdma->State = HAL_DMA_STATE_READY; 
 564              		.loc 1 413 0
 565 0038 7B68     		ldr	r3, [r7, #4]
 566 003a 2122     		movs	r2, #33
 567 003c 0121     		movs	r1, #1
 568 003e 9954     		strb	r1, [r3, r2]
 414:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	
 415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	/* Process Unlocked */
 416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	__HAL_UNLOCK(hdma);
 569              		.loc 1 416 0
 570 0040 7B68     		ldr	r3, [r7, #4]
 571 0042 2022     		movs	r2, #32
 572 0044 0021     		movs	r1, #0
 573 0046 9954     		strb	r1, [r3, r2]
 417:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	
 418:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	return HAL_OK; 
 574              		.loc 1 418 0
 575 0048 0023     		movs	r3, #0
 419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 576              		.loc 1 419 0
 577 004a 1800     		movs	r0, r3
 578 004c BD46     		mov	sp, r7
 579 004e 02B0     		add	sp, sp, #8
 580              		@ sp needed
 581 0050 80BD     		pop	{r7, pc}
 582              		.cfi_endproc
 583              	.LFE41:
 585              		.section	.text.HAL_DMA_Abort_IT,"ax",%progbits
 586              		.align	1
 587              		.global	HAL_DMA_Abort_IT
 588              		.syntax unified
 589              		.code	16
 590              		.thumb_func
 591              		.fpu softvfp
 593              	HAL_DMA_Abort_IT:
 594              	.LFB42:
 420:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 421:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 422:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Abort the DMA Transfer in Interrupt mode.
 423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
 424:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *               the configuration information for the specified DMA Stream.
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 426:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 427:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
 428:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {  
 595              		.loc 1 428 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 16
 598              		@ frame_needed = 1, uses_anonymous_args = 0
 599 0000 80B5     		push	{r7, lr}
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 84B0     		sub	sp, sp, #16
 604              		.cfi_def_cfa_offset 24
 605 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccsJUVTr.s 			page 19


 606              		.cfi_def_cfa_register 7
 607 0006 7860     		str	r0, [r7, #4]
 429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   HAL_StatusTypeDef status = HAL_OK;
 608              		.loc 1 429 0
 609 0008 0F23     		movs	r3, #15
 610 000a FB18     		adds	r3, r7, r3
 611 000c 0022     		movs	r2, #0
 612 000e 1A70     		strb	r2, [r3]
 430:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 431:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_STATE_BUSY != hdma->State)
 613              		.loc 1 431 0
 614 0010 7B68     		ldr	r3, [r7, #4]
 615 0012 2122     		movs	r2, #33
 616 0014 9B5C     		ldrb	r3, [r3, r2]
 617 0016 DBB2     		uxtb	r3, r3
 618 0018 022B     		cmp	r3, #2
 619 001a 07D0     		beq	.L24
 432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 433:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* no transfer ongoing */
 434:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 620              		.loc 1 434 0
 621 001c 7B68     		ldr	r3, [r7, #4]
 622 001e 0422     		movs	r2, #4
 623 0020 9A63     		str	r2, [r3, #56]
 435:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         
 436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     status = HAL_ERROR;
 624              		.loc 1 436 0
 625 0022 0F23     		movs	r3, #15
 626 0024 FB18     		adds	r3, r7, r3
 627 0026 0122     		movs	r2, #1
 628 0028 1A70     		strb	r2, [r3]
 629 002a 28E0     		b	.L25
 630              	.L24:
 437:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 438:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   { 
 440:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 441:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Disable DMA IT */
 442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 631              		.loc 1 442 0
 632 002c 7B68     		ldr	r3, [r7, #4]
 633 002e 1B68     		ldr	r3, [r3]
 634 0030 1A68     		ldr	r2, [r3]
 635 0032 7B68     		ldr	r3, [r7, #4]
 636 0034 1B68     		ldr	r3, [r3]
 637 0036 0E21     		movs	r1, #14
 638 0038 8A43     		bics	r2, r1
 639 003a 1A60     		str	r2, [r3]
 443:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 444:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Disable the channel */
 445:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CCR &= ~DMA_CCR_EN;
 640              		.loc 1 445 0
 641 003c 7B68     		ldr	r3, [r7, #4]
 642 003e 1B68     		ldr	r3, [r3]
 643 0040 1A68     		ldr	r2, [r3]
 644 0042 7B68     		ldr	r3, [r7, #4]
 645 0044 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccsJUVTr.s 			page 20


 646 0046 0121     		movs	r1, #1
 647 0048 8A43     		bics	r2, r1
 648 004a 1A60     		str	r2, [r3]
 446:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 447:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Clear all flags */
 448:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 649              		.loc 1 448 0
 650 004c 7B68     		ldr	r3, [r7, #4]
 651 004e 1A6C     		ldr	r2, [r3, #64]
 652 0050 7B68     		ldr	r3, [r7, #4]
 653 0052 DB6B     		ldr	r3, [r3, #60]
 654 0054 0121     		movs	r1, #1
 655 0056 9140     		lsls	r1, r1, r2
 656 0058 0A00     		movs	r2, r1
 657 005a 5A60     		str	r2, [r3, #4]
 449:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 450:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Change the DMA state */
 451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->State = HAL_DMA_STATE_READY;
 658              		.loc 1 451 0
 659 005c 7B68     		ldr	r3, [r7, #4]
 660 005e 2122     		movs	r2, #33
 661 0060 0121     		movs	r1, #1
 662 0062 9954     		strb	r1, [r3, r2]
 452:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 453:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Process Unlocked */
 454:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     __HAL_UNLOCK(hdma);
 663              		.loc 1 454 0
 664 0064 7B68     		ldr	r3, [r7, #4]
 665 0066 2022     		movs	r2, #32
 666 0068 0021     		movs	r1, #0
 667 006a 9954     		strb	r1, [r3, r2]
 455:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 456:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Call User Abort callback */ 
 457:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     if(hdma->XferAbortCallback != NULL)
 668              		.loc 1 457 0
 669 006c 7B68     		ldr	r3, [r7, #4]
 670 006e 5B6B     		ldr	r3, [r3, #52]
 671 0070 002B     		cmp	r3, #0
 672 0072 04D0     		beq	.L25
 458:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {
 459:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       hdma->XferAbortCallback(hdma);
 673              		.loc 1 459 0
 674 0074 7B68     		ldr	r3, [r7, #4]
 675 0076 5B6B     		ldr	r3, [r3, #52]
 676 0078 7A68     		ldr	r2, [r7, #4]
 677 007a 1000     		movs	r0, r2
 678 007c 9847     		blx	r3
 679              	.LVL0:
 680              	.L25:
 460:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     } 
 461:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 462:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return status;
 681              		.loc 1 462 0
 682 007e 0F23     		movs	r3, #15
 683 0080 FB18     		adds	r3, r7, r3
 684 0082 1B78     		ldrb	r3, [r3]
 463:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
ARM GAS  /tmp/ccsJUVTr.s 			page 21


 685              		.loc 1 463 0
 686 0084 1800     		movs	r0, r3
 687 0086 BD46     		mov	sp, r7
 688 0088 04B0     		add	sp, sp, #16
 689              		@ sp needed
 690 008a 80BD     		pop	{r7, pc}
 691              		.cfi_endproc
 692              	.LFE42:
 694              		.section	.text.HAL_DMA_PollForTransfer,"ax",%progbits
 695              		.align	1
 696              		.global	HAL_DMA_PollForTransfer
 697              		.syntax unified
 698              		.code	16
 699              		.thumb_func
 700              		.fpu softvfp
 702              	HAL_DMA_PollForTransfer:
 703              	.LFB43:
 464:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 465:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 466:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Polling for transfer complete.
 467:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
 468:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                  the configuration information for the specified DMA Channel.
 469:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  CompleteLevel Specifies the DMA level complete.  
 470:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  Timeout       Timeout duration.
 471:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 472:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 473:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t
 474:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 704              		.loc 1 474 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 24
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708 0000 80B5     		push	{r7, lr}
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 86B0     		sub	sp, sp, #24
 713              		.cfi_def_cfa_offset 32
 714 0004 00AF     		add	r7, sp, #0
 715              		.cfi_def_cfa_register 7
 716 0006 F860     		str	r0, [r7, #12]
 717 0008 B960     		str	r1, [r7, #8]
 718 000a 7A60     		str	r2, [r7, #4]
 475:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   uint32_t temp;
 476:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   uint32_t tickstart = 0U;
 719              		.loc 1 476 0
 720 000c 0023     		movs	r3, #0
 721 000e 3B61     		str	r3, [r7, #16]
 477:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 478:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_STATE_BUSY != hdma->State)
 722              		.loc 1 478 0
 723 0010 FB68     		ldr	r3, [r7, #12]
 724 0012 2122     		movs	r2, #33
 725 0014 9B5C     		ldrb	r3, [r3, r2]
 726 0016 DBB2     		uxtb	r3, r3
 727 0018 022B     		cmp	r3, #2
 728 001a 08D0     		beq	.L28
ARM GAS  /tmp/ccsJUVTr.s 			page 22


 479:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 480:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* no transfer ongoing */
 481:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 729              		.loc 1 481 0
 730 001c FB68     		ldr	r3, [r7, #12]
 731 001e 0422     		movs	r2, #4
 732 0020 9A63     		str	r2, [r3, #56]
 482:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     __HAL_UNLOCK(hdma);
 733              		.loc 1 482 0
 734 0022 FB68     		ldr	r3, [r7, #12]
 735 0024 2022     		movs	r2, #32
 736 0026 0021     		movs	r1, #0
 737 0028 9954     		strb	r1, [r3, r2]
 483:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     return HAL_ERROR;
 738              		.loc 1 483 0
 739 002a 0123     		movs	r3, #1
 740 002c 7DE0     		b	.L29
 741              	.L28:
 484:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 485:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 486:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Polling mode not supported in circular mode */
 487:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 742              		.loc 1 487 0
 743 002e FB68     		ldr	r3, [r7, #12]
 744 0030 1B68     		ldr	r3, [r3]
 745 0032 1B68     		ldr	r3, [r3]
 746 0034 2022     		movs	r2, #32
 747 0036 1340     		ands	r3, r2
 748 0038 05D0     		beq	.L30
 488:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 489:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 749              		.loc 1 489 0
 750 003a FB68     		ldr	r3, [r7, #12]
 751 003c 8022     		movs	r2, #128
 752 003e 5200     		lsls	r2, r2, #1
 753 0040 9A63     		str	r2, [r3, #56]
 490:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     return HAL_ERROR;
 754              		.loc 1 490 0
 755 0042 0123     		movs	r3, #1
 756 0044 71E0     		b	.L29
 757              	.L30:
 491:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 492:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 493:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Get the level transfer complete flag */
 494:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 758              		.loc 1 494 0
 759 0046 BB68     		ldr	r3, [r7, #8]
 760 0048 002B     		cmp	r3, #0
 761 004a 06D1     		bne	.L31
 495:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 496:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Transfer Complete flag */
 497:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     temp = DMA_FLAG_TC1 << hdma->ChannelIndex;
 762              		.loc 1 497 0
 763 004c FB68     		ldr	r3, [r7, #12]
 764 004e 1B6C     		ldr	r3, [r3, #64]
 765 0050 0222     		movs	r2, #2
 766 0052 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccsJUVTr.s 			page 23


 767 0054 1300     		movs	r3, r2
 768 0056 7B61     		str	r3, [r7, #20]
 769 0058 05E0     		b	.L32
 770              	.L31:
 498:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 499:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 500:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 501:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Half Transfer Complete flag */
 502:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
 771              		.loc 1 502 0
 772 005a FB68     		ldr	r3, [r7, #12]
 773 005c 1B6C     		ldr	r3, [r3, #64]
 774 005e 0422     		movs	r2, #4
 775 0060 9A40     		lsls	r2, r2, r3
 776 0062 1300     		movs	r3, r2
 777 0064 7B61     		str	r3, [r7, #20]
 778              	.L32:
 503:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 504:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 505:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Get tick */
 506:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   tickstart = HAL_GetTick();
 779              		.loc 1 506 0
 780 0066 FFF7FEFF 		bl	HAL_GetTick
 781 006a 0300     		movs	r3, r0
 782 006c 3B61     		str	r3, [r7, #16]
 507:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 508:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 783              		.loc 1 508 0
 784 006e 39E0     		b	.L33
 785              	.L36:
 509:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 510:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 786              		.loc 1 510 0
 787 0070 FB68     		ldr	r3, [r7, #12]
 788 0072 DB6B     		ldr	r3, [r3, #60]
 789 0074 1A68     		ldr	r2, [r3]
 790 0076 FB68     		ldr	r3, [r7, #12]
 791 0078 1B6C     		ldr	r3, [r3, #64]
 792 007a 0821     		movs	r1, #8
 793 007c 9940     		lsls	r1, r1, r3
 794 007e 0B00     		movs	r3, r1
 795 0080 1340     		ands	r3, r2
 796 0082 14D0     		beq	.L34
 511:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {      
 512:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       /* When a DMA transfer error occurs */
 513:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       /* A hardware clear of its EN bits is performed */
 514:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       /* Clear all flags */
 515:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 797              		.loc 1 515 0
 798 0084 FB68     		ldr	r3, [r7, #12]
 799 0086 1A6C     		ldr	r2, [r3, #64]
 800 0088 FB68     		ldr	r3, [r7, #12]
 801 008a DB6B     		ldr	r3, [r3, #60]
 802 008c 0121     		movs	r1, #1
 803 008e 9140     		lsls	r1, r1, r2
 804 0090 0A00     		movs	r2, r1
 805 0092 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccsJUVTr.s 			page 24


 516:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       
 517:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       /* Update error code */
 518:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       hdma->ErrorCode = HAL_DMA_ERROR_TE;
 806              		.loc 1 518 0
 807 0094 FB68     		ldr	r3, [r7, #12]
 808 0096 0122     		movs	r2, #1
 809 0098 9A63     		str	r2, [r3, #56]
 519:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 520:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       /* Change the DMA state */
 521:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       hdma->State= HAL_DMA_STATE_READY;       
 810              		.loc 1 521 0
 811 009a FB68     		ldr	r3, [r7, #12]
 812 009c 2122     		movs	r2, #33
 813 009e 0121     		movs	r1, #1
 814 00a0 9954     		strb	r1, [r3, r2]
 522:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       
 523:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       /* Process Unlocked */
 524:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       __HAL_UNLOCK(hdma);
 815              		.loc 1 524 0
 816 00a2 FB68     		ldr	r3, [r7, #12]
 817 00a4 2022     		movs	r2, #32
 818 00a6 0021     		movs	r1, #0
 819 00a8 9954     		strb	r1, [r3, r2]
 525:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       
 526:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       return HAL_ERROR;      
 820              		.loc 1 526 0
 821 00aa 0123     		movs	r3, #1
 822 00ac 3DE0     		b	.L29
 823              	.L34:
 527:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     }      
 528:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Check for the Timeout */
 529:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     if(Timeout != HAL_MAX_DELAY)
 824              		.loc 1 529 0
 825 00ae 7B68     		ldr	r3, [r7, #4]
 826 00b0 0133     		adds	r3, r3, #1
 827 00b2 17D0     		beq	.L33
 530:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {
 531:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 828              		.loc 1 531 0
 829 00b4 7B68     		ldr	r3, [r7, #4]
 830 00b6 002B     		cmp	r3, #0
 831 00b8 07D0     		beq	.L35
 832              		.loc 1 531 0 is_stmt 0 discriminator 1
 833 00ba FFF7FEFF 		bl	HAL_GetTick
 834 00be 0200     		movs	r2, r0
 835 00c0 3B69     		ldr	r3, [r7, #16]
 836 00c2 D31A     		subs	r3, r2, r3
 837 00c4 7A68     		ldr	r2, [r7, #4]
 838 00c6 9A42     		cmp	r2, r3
 839 00c8 0CD2     		bcs	.L33
 840              	.L35:
 532:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       {
 533:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         /* Update error code */
 534:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 841              		.loc 1 534 0 is_stmt 1
 842 00ca FB68     		ldr	r3, [r7, #12]
 843 00cc 2022     		movs	r2, #32
ARM GAS  /tmp/ccsJUVTr.s 			page 25


 844 00ce 9A63     		str	r2, [r3, #56]
 535:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         
 536:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         /* Change the DMA state */
 537:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         hdma->State = HAL_DMA_STATE_READY;
 845              		.loc 1 537 0
 846 00d0 FB68     		ldr	r3, [r7, #12]
 847 00d2 2122     		movs	r2, #33
 848 00d4 0121     		movs	r1, #1
 849 00d6 9954     		strb	r1, [r3, r2]
 538:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 539:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         /* Process Unlocked */
 540:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         __HAL_UNLOCK(hdma);
 850              		.loc 1 540 0
 851 00d8 FB68     		ldr	r3, [r7, #12]
 852 00da 2022     		movs	r2, #32
 853 00dc 0021     		movs	r1, #0
 854 00de 9954     		strb	r1, [r3, r2]
 541:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 542:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****         return HAL_ERROR;
 855              		.loc 1 542 0
 856 00e0 0123     		movs	r3, #1
 857 00e2 22E0     		b	.L29
 858              	.L33:
 508:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 859              		.loc 1 508 0
 860 00e4 FB68     		ldr	r3, [r7, #12]
 861 00e6 DB6B     		ldr	r3, [r3, #60]
 862 00e8 1B68     		ldr	r3, [r3]
 863 00ea 7A69     		ldr	r2, [r7, #20]
 864 00ec 1340     		ands	r3, r2
 865 00ee BFD0     		beq	.L36
 543:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       }
 544:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     }
 545:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 546:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 547:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 866              		.loc 1 547 0
 867 00f0 BB68     		ldr	r3, [r7, #8]
 868 00f2 002B     		cmp	r3, #0
 869 00f4 0CD1     		bne	.L37
 548:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 549:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Clear the transfer complete flag */
 550:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 870              		.loc 1 550 0
 871 00f6 FB68     		ldr	r3, [r7, #12]
 872 00f8 1A6C     		ldr	r2, [r3, #64]
 873 00fa FB68     		ldr	r3, [r7, #12]
 874 00fc DB6B     		ldr	r3, [r3, #60]
 875 00fe 0221     		movs	r1, #2
 876 0100 9140     		lsls	r1, r1, r2
 877 0102 0A00     		movs	r2, r1
 878 0104 5A60     		str	r2, [r3, #4]
 551:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 552:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* The selected Channelx EN bit is cleared (DMA is disabled and 
 553:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     all transfers are complete) */
 554:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->State = HAL_DMA_STATE_READY;
 879              		.loc 1 554 0
ARM GAS  /tmp/ccsJUVTr.s 			page 26


 880 0106 FB68     		ldr	r3, [r7, #12]
 881 0108 2122     		movs	r2, #33
 882 010a 0121     		movs	r1, #1
 883 010c 9954     		strb	r1, [r3, r2]
 884 010e 07E0     		b	.L38
 885              	.L37:
 555:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 556:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 557:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   { 
 558:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Clear the half transfer complete flag */
 559:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 886              		.loc 1 559 0
 887 0110 FB68     		ldr	r3, [r7, #12]
 888 0112 1A6C     		ldr	r2, [r3, #64]
 889 0114 FB68     		ldr	r3, [r7, #12]
 890 0116 DB6B     		ldr	r3, [r3, #60]
 891 0118 0421     		movs	r1, #4
 892 011a 9140     		lsls	r1, r1, r2
 893 011c 0A00     		movs	r2, r1
 894 011e 5A60     		str	r2, [r3, #4]
 895              	.L38:
 560:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 561:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 562:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Process unlocked */
 563:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_UNLOCK(hdma);  
 896              		.loc 1 563 0
 897 0120 FB68     		ldr	r3, [r7, #12]
 898 0122 2022     		movs	r2, #32
 899 0124 0021     		movs	r1, #0
 900 0126 9954     		strb	r1, [r3, r2]
 564:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 565:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return HAL_OK;
 901              		.loc 1 565 0
 902 0128 0023     		movs	r3, #0
 903              	.L29:
 566:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 904              		.loc 1 566 0
 905 012a 1800     		movs	r0, r3
 906 012c BD46     		mov	sp, r7
 907 012e 06B0     		add	sp, sp, #24
 908              		@ sp needed
 909 0130 80BD     		pop	{r7, pc}
 910              		.cfi_endproc
 911              	.LFE43:
 913              		.section	.text.HAL_DMA_IRQHandler,"ax",%progbits
 914              		.align	1
 915              		.global	HAL_DMA_IRQHandler
 916              		.syntax unified
 917              		.code	16
 918              		.thumb_func
 919              		.fpu softvfp
 921              	HAL_DMA_IRQHandler:
 922              	.LFB44:
 567:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 568:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 569:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Handle DMA interrupt request.
 570:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  /tmp/ccsJUVTr.s 			page 27


 571:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *               the configuration information for the specified DMA Channel.  
 572:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval None
 573:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 574:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
 575:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 923              		.loc 1 575 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 16
 926              		@ frame_needed = 1, uses_anonymous_args = 0
 927 0000 80B5     		push	{r7, lr}
 928              		.cfi_def_cfa_offset 8
 929              		.cfi_offset 7, -8
 930              		.cfi_offset 14, -4
 931 0002 84B0     		sub	sp, sp, #16
 932              		.cfi_def_cfa_offset 24
 933 0004 00AF     		add	r7, sp, #0
 934              		.cfi_def_cfa_register 7
 935 0006 7860     		str	r0, [r7, #4]
 576:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 936              		.loc 1 576 0
 937 0008 7B68     		ldr	r3, [r7, #4]
 938 000a DB6B     		ldr	r3, [r3, #60]
 939 000c 1B68     		ldr	r3, [r3]
 940 000e FB60     		str	r3, [r7, #12]
 577:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   uint32_t source_it = hdma->Instance->CCR;
 941              		.loc 1 577 0
 942 0010 7B68     		ldr	r3, [r7, #4]
 943 0012 1B68     		ldr	r3, [r3]
 944 0014 1B68     		ldr	r3, [r3]
 945 0016 BB60     		str	r3, [r7, #8]
 578:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****           
 579:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Half Transfer Complete Interrupt management ******************************/
 580:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_
 946              		.loc 1 580 0
 947 0018 7B68     		ldr	r3, [r7, #4]
 948 001a 1B6C     		ldr	r3, [r3, #64]
 949 001c 0422     		movs	r2, #4
 950 001e 9A40     		lsls	r2, r2, r3
 951 0020 1300     		movs	r3, r2
 952 0022 FA68     		ldr	r2, [r7, #12]
 953 0024 1340     		ands	r3, r2
 954 0026 24D0     		beq	.L40
 955              		.loc 1 580 0 is_stmt 0 discriminator 1
 956 0028 BB68     		ldr	r3, [r7, #8]
 957 002a 0422     		movs	r2, #4
 958 002c 1340     		ands	r3, r2
 959 002e 20D0     		beq	.L40
 581:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 582:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
 583:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 960              		.loc 1 583 0 is_stmt 1
 961 0030 7B68     		ldr	r3, [r7, #4]
 962 0032 1B68     		ldr	r3, [r3]
 963 0034 1B68     		ldr	r3, [r3]
 964 0036 2022     		movs	r2, #32
 965 0038 1340     		ands	r3, r2
 966 003a 07D1     		bne	.L41
ARM GAS  /tmp/ccsJUVTr.s 			page 28


 584:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 585:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		/* Disable the half transfer interrupt */
 586:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->Instance->CCR &= ~DMA_IT_HT;
 967              		.loc 1 586 0
 968 003c 7B68     		ldr	r3, [r7, #4]
 969 003e 1B68     		ldr	r3, [r3]
 970 0040 1A68     		ldr	r2, [r3]
 971 0042 7B68     		ldr	r3, [r7, #4]
 972 0044 1B68     		ldr	r3, [r3]
 973 0046 0421     		movs	r1, #4
 974 0048 8A43     		bics	r2, r1
 975 004a 1A60     		str	r2, [r3]
 976              	.L41:
 587:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	}
 588:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 589:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Clear the half transfer complete flag */
 590:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 977              		.loc 1 590 0
 978 004c 7B68     		ldr	r3, [r7, #4]
 979 004e 1A6C     		ldr	r2, [r3, #64]
 980 0050 7B68     		ldr	r3, [r7, #4]
 981 0052 DB6B     		ldr	r3, [r3, #60]
 982 0054 0421     		movs	r1, #4
 983 0056 9140     		lsls	r1, r1, r2
 984 0058 0A00     		movs	r2, r1
 985 005a 5A60     		str	r2, [r3, #4]
 591:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 592:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* DMA peripheral state is not updated in Half Transfer */
 593:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* State is updated only in Transfer Complete case */
 594:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 595:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	if(hdma->XferHalfCpltCallback != NULL)
 986              		.loc 1 595 0
 987 005c 7B68     		ldr	r3, [r7, #4]
 988 005e DB6A     		ldr	r3, [r3, #44]
 989 0060 002B     		cmp	r3, #0
 990 0062 00D1     		bne	.LCB829
 991 0064 6AE0     		b	.L43	@long jump
 992              	.LCB829:
 596:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 597:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		/* Half transfer callback */
 598:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->XferHalfCpltCallback(hdma);
 993              		.loc 1 598 0
 994 0066 7B68     		ldr	r3, [r7, #4]
 995 0068 DB6A     		ldr	r3, [r3, #44]
 996 006a 7A68     		ldr	r2, [r7, #4]
 997 006c 1000     		movs	r0, r2
 998 006e 9847     		blx	r3
 999              	.LVL1:
 595:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 1000              		.loc 1 595 0
 1001 0070 64E0     		b	.L43
 1002              	.L40:
 599:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	}
 600:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 601:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 602:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Transfer Complete Interrupt management ***********************************/
 603:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DM
ARM GAS  /tmp/ccsJUVTr.s 			page 29


 1003              		.loc 1 603 0
 1004 0072 7B68     		ldr	r3, [r7, #4]
 1005 0074 1B6C     		ldr	r3, [r3, #64]
 1006 0076 0222     		movs	r2, #2
 1007 0078 9A40     		lsls	r2, r2, r3
 1008 007a 1300     		movs	r3, r2
 1009 007c FA68     		ldr	r2, [r7, #12]
 1010 007e 1340     		ands	r3, r2
 1011 0080 2BD0     		beq	.L44
 1012              		.loc 1 603 0 is_stmt 0 discriminator 1
 1013 0082 BB68     		ldr	r3, [r7, #8]
 1014 0084 0222     		movs	r2, #2
 1015 0086 1340     		ands	r3, r2
 1016 0088 27D0     		beq	.L44
 604:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 605:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 1017              		.loc 1 605 0 is_stmt 1
 1018 008a 7B68     		ldr	r3, [r7, #4]
 1019 008c 1B68     		ldr	r3, [r3]
 1020 008e 1B68     		ldr	r3, [r3]
 1021 0090 2022     		movs	r2, #32
 1022 0092 1340     		ands	r3, r2
 1023 0094 0BD1     		bne	.L45
 606:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 607:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		/* Disable the transfer complete  & transfer error interrupts */
 608:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		/* if the DMA mode is not CIRCULAR */
 609:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 1024              		.loc 1 609 0
 1025 0096 7B68     		ldr	r3, [r7, #4]
 1026 0098 1B68     		ldr	r3, [r3]
 1027 009a 1A68     		ldr	r2, [r3]
 1028 009c 7B68     		ldr	r3, [r7, #4]
 1029 009e 1B68     		ldr	r3, [r3]
 1030 00a0 0A21     		movs	r1, #10
 1031 00a2 8A43     		bics	r2, r1
 1032 00a4 1A60     		str	r2, [r3]
 610:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		
 611:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		/* Change the DMA state */
 612:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->State = HAL_DMA_STATE_READY;
 1033              		.loc 1 612 0
 1034 00a6 7B68     		ldr	r3, [r7, #4]
 1035 00a8 2122     		movs	r2, #33
 1036 00aa 0121     		movs	r1, #1
 1037 00ac 9954     		strb	r1, [r3, r2]
 1038              	.L45:
 613:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	}
 614:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 615:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Clear the transfer complete flag */
 616:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 1039              		.loc 1 616 0
 1040 00ae 7B68     		ldr	r3, [r7, #4]
 1041 00b0 1A6C     		ldr	r2, [r3, #64]
 1042 00b2 7B68     		ldr	r3, [r7, #4]
 1043 00b4 DB6B     		ldr	r3, [r3, #60]
 1044 00b6 0221     		movs	r1, #2
 1045 00b8 9140     		lsls	r1, r1, r2
 1046 00ba 0A00     		movs	r2, r1
ARM GAS  /tmp/ccsJUVTr.s 			page 30


 1047 00bc 5A60     		str	r2, [r3, #4]
 617:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 618:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* Process Unlocked */
 619:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	__HAL_UNLOCK(hdma);
 1048              		.loc 1 619 0
 1049 00be 7B68     		ldr	r3, [r7, #4]
 1050 00c0 2022     		movs	r2, #32
 1051 00c2 0021     		movs	r1, #0
 1052 00c4 9954     		strb	r1, [r3, r2]
 620:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	
 621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	if(hdma->XferCpltCallback != NULL)
 1053              		.loc 1 621 0
 1054 00c6 7B68     		ldr	r3, [r7, #4]
 1055 00c8 9B6A     		ldr	r3, [r3, #40]
 1056 00ca 002B     		cmp	r3, #0
 1057 00cc 36D0     		beq	.L43
 622:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 623:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		/* Transfer complete callback */
 624:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   		hdma->XferCpltCallback(hdma);
 1058              		.loc 1 624 0
 1059 00ce 7B68     		ldr	r3, [r7, #4]
 1060 00d0 9B6A     		ldr	r3, [r3, #40]
 1061 00d2 7A68     		ldr	r2, [r7, #4]
 1062 00d4 1000     		movs	r0, r2
 1063 00d6 9847     		blx	r3
 1064              	.LVL2:
 621:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	{
 1065              		.loc 1 621 0
 1066 00d8 30E0     		b	.L43
 1067              	.L44:
 625:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	}
 626:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 627:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 628:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Transfer Error Interrupt management ***************************************/
 629:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & D
 1068              		.loc 1 629 0
 1069 00da 7B68     		ldr	r3, [r7, #4]
 1070 00dc 1B6C     		ldr	r3, [r3, #64]
 1071 00de 0822     		movs	r2, #8
 1072 00e0 9A40     		lsls	r2, r2, r3
 1073 00e2 1300     		movs	r3, r2
 1074 00e4 FA68     		ldr	r2, [r7, #12]
 1075 00e6 1340     		ands	r3, r2
 1076 00e8 28D0     		beq	.L47
 1077              		.loc 1 629 0 is_stmt 0 discriminator 1
 1078 00ea BB68     		ldr	r3, [r7, #8]
 1079 00ec 0822     		movs	r2, #8
 1080 00ee 1340     		ands	r3, r2
 1081 00f0 24D0     		beq	.L47
 630:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 631:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   	/* When a DMA transfer error occurs */
 632:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* A hardware clear of its EN bits is performed */
 633:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Then, disable all DMA interrupts */
 634:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 1082              		.loc 1 634 0 is_stmt 1
 1083 00f2 7B68     		ldr	r3, [r7, #4]
 1084 00f4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccsJUVTr.s 			page 31


 1085 00f6 1A68     		ldr	r2, [r3]
 1086 00f8 7B68     		ldr	r3, [r7, #4]
 1087 00fa 1B68     		ldr	r3, [r3]
 1088 00fc 0E21     		movs	r1, #14
 1089 00fe 8A43     		bics	r2, r1
 1090 0100 1A60     		str	r2, [r3]
 635:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 636:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Clear all flags */
 637:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 1091              		.loc 1 637 0
 1092 0102 7B68     		ldr	r3, [r7, #4]
 1093 0104 1A6C     		ldr	r2, [r3, #64]
 1094 0106 7B68     		ldr	r3, [r7, #4]
 1095 0108 DB6B     		ldr	r3, [r3, #60]
 1096 010a 0121     		movs	r1, #1
 1097 010c 9140     		lsls	r1, r1, r2
 1098 010e 0A00     		movs	r2, r1
 1099 0110 5A60     		str	r2, [r3, #4]
 638:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 639:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Update error code */
 640:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->ErrorCode = HAL_DMA_ERROR_TE;
 1100              		.loc 1 640 0
 1101 0112 7B68     		ldr	r3, [r7, #4]
 1102 0114 0122     		movs	r2, #1
 1103 0116 9A63     		str	r2, [r3, #56]
 641:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 642:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Change the DMA state */
 643:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->State = HAL_DMA_STATE_READY;    
 1104              		.loc 1 643 0
 1105 0118 7B68     		ldr	r3, [r7, #4]
 1106 011a 2122     		movs	r2, #33
 1107 011c 0121     		movs	r1, #1
 1108 011e 9954     		strb	r1, [r3, r2]
 644:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 645:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Process Unlocked */
 646:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     __HAL_UNLOCK(hdma); 
 1109              		.loc 1 646 0
 1110 0120 7B68     		ldr	r3, [r7, #4]
 1111 0122 2022     		movs	r2, #32
 1112 0124 0021     		movs	r1, #0
 1113 0126 9954     		strb	r1, [r3, r2]
 647:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 648:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     if(hdma->XferErrorCallback != NULL)
 1114              		.loc 1 648 0
 1115 0128 7B68     		ldr	r3, [r7, #4]
 1116 012a 1B6B     		ldr	r3, [r3, #48]
 1117 012c 002B     		cmp	r3, #0
 1118 012e 05D0     		beq	.L47
 649:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {
 650:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     	/* Transfer error callback */
 651:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     	hdma->XferErrorCallback(hdma);
 1119              		.loc 1 651 0
 1120 0130 7B68     		ldr	r3, [r7, #4]
 1121 0132 1B6B     		ldr	r3, [r3, #48]
 1122 0134 7A68     		ldr	r2, [r7, #4]
 1123 0136 1000     		movs	r0, r2
 1124 0138 9847     		blx	r3
ARM GAS  /tmp/ccsJUVTr.s 			page 32


 1125              	.LVL3:
 652:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     }
 653:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****    }
 654:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }  
 1126              		.loc 1 654 0
 1127 013a FFE7     		b	.L47
 1128              	.L43:
 1129              	.L47:
 1130 013c C046     		nop
 1131 013e BD46     		mov	sp, r7
 1132 0140 04B0     		add	sp, sp, #16
 1133              		@ sp needed
 1134 0142 80BD     		pop	{r7, pc}
 1135              		.cfi_endproc
 1136              	.LFE44:
 1138              		.section	.text.HAL_DMA_RegisterCallback,"ax",%progbits
 1139              		.align	1
 1140              		.global	HAL_DMA_RegisterCallback
 1141              		.syntax unified
 1142              		.code	16
 1143              		.thumb_func
 1144              		.fpu softvfp
 1146              	HAL_DMA_RegisterCallback:
 1147              	.LFB45:
 655:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 656:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 657:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Register callbacks
 658:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma                 pointer to a DMA_HandleTypeDef structure that contains
 659:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                               the configuration information for the specified DMA Stream.
 660:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  CallbackID           User Callback identifer
 661:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
 662:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  pCallback            pointer to private callback function which has pointer to 
 663:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                               a DMA_HandleTypeDef structure as parameter.
 664:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 665:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */                          
 666:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef Callb
 667:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 1148              		.loc 1 667 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 24
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152 0000 80B5     		push	{r7, lr}
 1153              		.cfi_def_cfa_offset 8
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 86B0     		sub	sp, sp, #24
 1157              		.cfi_def_cfa_offset 32
 1158 0004 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 1160 0006 F860     		str	r0, [r7, #12]
 1161 0008 7A60     		str	r2, [r7, #4]
 1162 000a 0B23     		movs	r3, #11
 1163 000c FB18     		adds	r3, r7, r3
 1164 000e 0A1C     		adds	r2, r1, #0
 1165 0010 1A70     		strb	r2, [r3]
 668:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   HAL_StatusTypeDef status = HAL_OK;
 1166              		.loc 1 668 0
ARM GAS  /tmp/ccsJUVTr.s 			page 33


 1167 0012 1723     		movs	r3, #23
 1168 0014 FB18     		adds	r3, r7, r3
 1169 0016 0022     		movs	r2, #0
 1170 0018 1A70     		strb	r2, [r3]
 669:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 670:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Process locked */
 671:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_LOCK(hdma);
 1171              		.loc 1 671 0
 1172 001a FB68     		ldr	r3, [r7, #12]
 1173 001c 2022     		movs	r2, #32
 1174 001e 9B5C     		ldrb	r3, [r3, r2]
 1175 0020 012B     		cmp	r3, #1
 1176 0022 01D1     		bne	.L49
 1177              		.loc 1 671 0 is_stmt 0 discriminator 1
 1178 0024 0223     		movs	r3, #2
 1179 0026 38E0     		b	.L50
 1180              	.L49:
 1181              		.loc 1 671 0 discriminator 2
 1182 0028 FB68     		ldr	r3, [r7, #12]
 1183 002a 2022     		movs	r2, #32
 1184 002c 0121     		movs	r1, #1
 1185 002e 9954     		strb	r1, [r3, r2]
 672:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 673:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_STATE_READY == hdma->State)
 1186              		.loc 1 673 0 is_stmt 1 discriminator 2
 1187 0030 FB68     		ldr	r3, [r7, #12]
 1188 0032 2122     		movs	r2, #33
 1189 0034 9B5C     		ldrb	r3, [r3, r2]
 1190 0036 DBB2     		uxtb	r3, r3
 1191 0038 012B     		cmp	r3, #1
 1192 003a 23D1     		bne	.L51
 674:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 675:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     switch (CallbackID)
 1193              		.loc 1 675 0
 1194 003c 0B23     		movs	r3, #11
 1195 003e FB18     		adds	r3, r7, r3
 1196 0040 1B78     		ldrb	r3, [r3]
 1197 0042 012B     		cmp	r3, #1
 1198 0044 0CD0     		beq	.L53
 1199 0046 02DC     		bgt	.L54
 1200 0048 002B     		cmp	r3, #0
 1201 004a 05D0     		beq	.L55
 1202 004c 14E0     		b	.L52
 1203              	.L54:
 1204 004e 022B     		cmp	r3, #2
 1205 0050 0AD0     		beq	.L56
 1206 0052 032B     		cmp	r3, #3
 1207 0054 0CD0     		beq	.L57
 1208 0056 0FE0     		b	.L52
 1209              	.L55:
 676:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {
 677:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_CPLT_CB_ID:
 678:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferCpltCallback = pCallback;
 1210              		.loc 1 678 0
 1211 0058 FB68     		ldr	r3, [r7, #12]
 1212 005a 7A68     		ldr	r2, [r7, #4]
 1213 005c 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/ccsJUVTr.s 			page 34


 679:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;
 1214              		.loc 1 679 0
 1215 005e 15E0     		b	.L59
 1216              	.L53:
 680:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        
 681:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
 682:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferHalfCpltCallback = pCallback;
 1217              		.loc 1 682 0
 1218 0060 FB68     		ldr	r3, [r7, #12]
 1219 0062 7A68     		ldr	r2, [r7, #4]
 1220 0064 DA62     		str	r2, [r3, #44]
 683:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;         
 1221              		.loc 1 683 0
 1222 0066 11E0     		b	.L59
 1223              	.L56:
 684:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 685:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_ERROR_CB_ID:
 686:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferErrorCallback = pCallback;
 1224              		.loc 1 686 0
 1225 0068 FB68     		ldr	r3, [r7, #12]
 1226 006a 7A68     		ldr	r2, [r7, #4]
 1227 006c 1A63     		str	r2, [r3, #48]
 687:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;         
 1228              		.loc 1 687 0
 1229 006e 0DE0     		b	.L59
 1230              	.L57:
 688:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            
 689:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_ABORT_CB_ID:
 690:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferAbortCallback = pCallback;
 1231              		.loc 1 690 0
 1232 0070 FB68     		ldr	r3, [r7, #12]
 1233 0072 7A68     		ldr	r2, [r7, #4]
 1234 0074 5A63     		str	r2, [r3, #52]
 691:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break; 
 1235              		.loc 1 691 0
 1236 0076 09E0     		b	.L59
 1237              	.L52:
 692:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            
 693:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      default:
 694:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            status = HAL_ERROR;
 1238              		.loc 1 694 0
 1239 0078 1723     		movs	r3, #23
 1240 007a FB18     		adds	r3, r7, r3
 1241 007c 0122     		movs	r2, #1
 1242 007e 1A70     		strb	r2, [r3]
 695:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;                                                            
 1243              		.loc 1 695 0
 1244 0080 C046     		nop
 1245 0082 03E0     		b	.L59
 1246              	.L51:
 696:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     }
 697:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 698:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 699:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 700:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     status = HAL_ERROR;
 1247              		.loc 1 700 0
 1248 0084 1723     		movs	r3, #23
ARM GAS  /tmp/ccsJUVTr.s 			page 35


 1249 0086 FB18     		adds	r3, r7, r3
 1250 0088 0122     		movs	r2, #1
 1251 008a 1A70     		strb	r2, [r3]
 1252              	.L59:
 701:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   } 
 702:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 703:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Release Lock */
 704:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_UNLOCK(hdma);
 1253              		.loc 1 704 0
 1254 008c FB68     		ldr	r3, [r7, #12]
 1255 008e 2022     		movs	r2, #32
 1256 0090 0021     		movs	r1, #0
 1257 0092 9954     		strb	r1, [r3, r2]
 705:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 706:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return status;
 1258              		.loc 1 706 0
 1259 0094 1723     		movs	r3, #23
 1260 0096 FB18     		adds	r3, r7, r3
 1261 0098 1B78     		ldrb	r3, [r3]
 1262              	.L50:
 707:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 1263              		.loc 1 707 0
 1264 009a 1800     		movs	r0, r3
 1265 009c BD46     		mov	sp, r7
 1266 009e 06B0     		add	sp, sp, #24
 1267              		@ sp needed
 1268 00a0 80BD     		pop	{r7, pc}
 1269              		.cfi_endproc
 1270              	.LFE45:
 1272              		.section	.text.HAL_DMA_UnRegisterCallback,"ax",%progbits
 1273              		.align	1
 1274              		.global	HAL_DMA_UnRegisterCallback
 1275              		.syntax unified
 1276              		.code	16
 1277              		.thumb_func
 1278              		.fpu softvfp
 1280              	HAL_DMA_UnRegisterCallback:
 1281              	.LFB46:
 708:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 709:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 710:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  UnRegister callbacks
 711:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma                 pointer to a DMA_HandleTypeDef structure that contains
 712:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                               the configuration information for the specified DMA Stream.
 713:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  CallbackID           User Callback identifer
 714:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
 715:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 716:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */              
 717:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef Cal
 718:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 1282              		.loc 1 718 0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 16
 1285              		@ frame_needed = 1, uses_anonymous_args = 0
 1286 0000 80B5     		push	{r7, lr}
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 7, -8
 1289              		.cfi_offset 14, -4
ARM GAS  /tmp/ccsJUVTr.s 			page 36


 1290 0002 84B0     		sub	sp, sp, #16
 1291              		.cfi_def_cfa_offset 24
 1292 0004 00AF     		add	r7, sp, #0
 1293              		.cfi_def_cfa_register 7
 1294 0006 7860     		str	r0, [r7, #4]
 1295 0008 0A00     		movs	r2, r1
 1296 000a FB1C     		adds	r3, r7, #3
 1297 000c 1A70     		strb	r2, [r3]
 719:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   HAL_StatusTypeDef status = HAL_OK;
 1298              		.loc 1 719 0
 1299 000e 0F23     		movs	r3, #15
 1300 0010 FB18     		adds	r3, r7, r3
 1301 0012 0022     		movs	r2, #0
 1302 0014 1A70     		strb	r2, [r3]
 720:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 721:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Process locked */
 722:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_LOCK(hdma);
 1303              		.loc 1 722 0
 1304 0016 7B68     		ldr	r3, [r7, #4]
 1305 0018 2022     		movs	r2, #32
 1306 001a 9B5C     		ldrb	r3, [r3, r2]
 1307 001c 012B     		cmp	r3, #1
 1308 001e 01D1     		bne	.L61
 1309              		.loc 1 722 0 is_stmt 0 discriminator 1
 1310 0020 0223     		movs	r3, #2
 1311 0022 40E0     		b	.L62
 1312              	.L61:
 1313              		.loc 1 722 0 discriminator 2
 1314 0024 7B68     		ldr	r3, [r7, #4]
 1315 0026 2022     		movs	r2, #32
 1316 0028 0121     		movs	r1, #1
 1317 002a 9954     		strb	r1, [r3, r2]
 723:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 724:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if(HAL_DMA_STATE_READY == hdma->State)
 1318              		.loc 1 724 0 is_stmt 1 discriminator 2
 1319 002c 7B68     		ldr	r3, [r7, #4]
 1320 002e 2122     		movs	r2, #33
 1321 0030 9B5C     		ldrb	r3, [r3, r2]
 1322 0032 DBB2     		uxtb	r3, r3
 1323 0034 012B     		cmp	r3, #1
 1324 0036 2BD1     		bne	.L63
 725:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 726:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     switch (CallbackID)
 1325              		.loc 1 726 0
 1326 0038 FB1C     		adds	r3, r7, #3
 1327 003a 1B78     		ldrb	r3, [r3]
 1328 003c 042B     		cmp	r3, #4
 1329 003e 21D8     		bhi	.L64
 1330 0040 9A00     		lsls	r2, r3, #2
 1331 0042 1B4B     		ldr	r3, .L73
 1332 0044 D318     		adds	r3, r2, r3
 1333 0046 1B68     		ldr	r3, [r3]
 1334 0048 9F46     		mov	pc, r3
 1335              		.section	.rodata.HAL_DMA_UnRegisterCallback,"a",%progbits
 1336              		.align	2
 1337              	.L66:
 1338 0000 4A000000 		.word	.L65
ARM GAS  /tmp/ccsJUVTr.s 			page 37


 1339 0004 52000000 		.word	.L67
 1340 0008 5A000000 		.word	.L68
 1341 000c 62000000 		.word	.L69
 1342 0010 6A000000 		.word	.L70
 1343              		.section	.text.HAL_DMA_UnRegisterCallback
 1344              	.L65:
 727:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     {
 728:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_CPLT_CB_ID:
 729:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferCpltCallback = NULL;
 1345              		.loc 1 729 0
 1346 004a 7B68     		ldr	r3, [r7, #4]
 1347 004c 0022     		movs	r2, #0
 1348 004e 9A62     		str	r2, [r3, #40]
 730:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;
 1349              		.loc 1 730 0
 1350 0050 22E0     		b	.L72
 1351              	.L67:
 731:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****        
 732:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
 733:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferHalfCpltCallback = NULL;
 1352              		.loc 1 733 0
 1353 0052 7B68     		ldr	r3, [r7, #4]
 1354 0054 0022     		movs	r2, #0
 1355 0056 DA62     		str	r2, [r3, #44]
 734:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;         
 1356              		.loc 1 734 0
 1357 0058 1EE0     		b	.L72
 1358              	.L68:
 735:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 736:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_ERROR_CB_ID:
 737:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferErrorCallback = NULL;
 1359              		.loc 1 737 0
 1360 005a 7B68     		ldr	r3, [r7, #4]
 1361 005c 0022     		movs	r2, #0
 1362 005e 1A63     		str	r2, [r3, #48]
 738:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;         
 1363              		.loc 1 738 0
 1364 0060 1AE0     		b	.L72
 1365              	.L69:
 739:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            
 740:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      case  HAL_DMA_XFER_ABORT_CB_ID:
 741:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferAbortCallback = NULL;
 1366              		.loc 1 741 0
 1367 0062 7B68     		ldr	r3, [r7, #4]
 1368 0064 0022     		movs	r2, #0
 1369 0066 5A63     		str	r2, [r3, #52]
 742:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break; 
 1370              		.loc 1 742 0
 1371 0068 16E0     		b	.L72
 1372              	.L70:
 743:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      
 744:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     case   HAL_DMA_XFER_ALL_CB_ID:
 745:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferCpltCallback = NULL;
 1373              		.loc 1 745 0
 1374 006a 7B68     		ldr	r3, [r7, #4]
 1375 006c 0022     		movs	r2, #0
 1376 006e 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/ccsJUVTr.s 			page 38


 746:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferHalfCpltCallback = NULL;
 1377              		.loc 1 746 0
 1378 0070 7B68     		ldr	r3, [r7, #4]
 1379 0072 0022     		movs	r2, #0
 1380 0074 DA62     		str	r2, [r3, #44]
 747:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferErrorCallback = NULL;
 1381              		.loc 1 747 0
 1382 0076 7B68     		ldr	r3, [r7, #4]
 1383 0078 0022     		movs	r2, #0
 1384 007a 1A63     		str	r2, [r3, #48]
 748:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            hdma->XferAbortCallback = NULL;
 1385              		.loc 1 748 0
 1386 007c 7B68     		ldr	r3, [r7, #4]
 1387 007e 0022     		movs	r2, #0
 1388 0080 5A63     		str	r2, [r3, #52]
 749:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break; 
 1389              		.loc 1 749 0
 1390 0082 09E0     		b	.L72
 1391              	.L64:
 750:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****      
 751:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     default:
 752:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            status = HAL_ERROR;
 1392              		.loc 1 752 0
 1393 0084 0F23     		movs	r3, #15
 1394 0086 FB18     		adds	r3, r7, r3
 1395 0088 0122     		movs	r2, #1
 1396 008a 1A70     		strb	r2, [r3]
 753:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****            break;                                                            
 1397              		.loc 1 753 0
 1398 008c C046     		nop
 1399 008e 03E0     		b	.L72
 1400              	.L63:
 754:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     }
 755:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 756:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 757:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 758:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     status = HAL_ERROR;
 1401              		.loc 1 758 0
 1402 0090 0F23     		movs	r3, #15
 1403 0092 FB18     		adds	r3, r7, r3
 1404 0094 0122     		movs	r2, #1
 1405 0096 1A70     		strb	r2, [r3]
 1406              	.L72:
 759:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   } 
 760:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 761:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Release Lock */
 762:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   __HAL_UNLOCK(hdma);
 1407              		.loc 1 762 0
 1408 0098 7B68     		ldr	r3, [r7, #4]
 1409 009a 2022     		movs	r2, #32
 1410 009c 0021     		movs	r1, #0
 1411 009e 9954     		strb	r1, [r3, r2]
 763:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 764:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return status;
 1412              		.loc 1 764 0
 1413 00a0 0F23     		movs	r3, #15
 1414 00a2 FB18     		adds	r3, r7, r3
ARM GAS  /tmp/ccsJUVTr.s 			page 39


 1415 00a4 1B78     		ldrb	r3, [r3]
 1416              	.L62:
 765:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 1417              		.loc 1 765 0
 1418 00a6 1800     		movs	r0, r3
 1419 00a8 BD46     		mov	sp, r7
 1420 00aa 04B0     		add	sp, sp, #16
 1421              		@ sp needed
 1422 00ac 80BD     		pop	{r7, pc}
 1423              	.L74:
 1424 00ae C046     		.align	2
 1425              	.L73:
 1426 00b0 00000000 		.word	.L66
 1427              		.cfi_endproc
 1428              	.LFE46:
 1430              		.section	.text.HAL_DMA_GetState,"ax",%progbits
 1431              		.align	1
 1432              		.global	HAL_DMA_GetState
 1433              		.syntax unified
 1434              		.code	16
 1435              		.thumb_func
 1436              		.fpu softvfp
 1438              	HAL_DMA_GetState:
 1439              	.LFB47:
 766:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 767:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 768:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @}
 769:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 770:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 771:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @defgroup DMA_Exported_Functions_Group3 Peripheral State functions
 772:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  *  @brief    Peripheral State functions 
 773:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  *
 774:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** @verbatim   
 775:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  ===============================================================================
 776:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****                     ##### State and Errors functions #####
 777:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****  ===============================================================================  
 778:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     [..]
 779:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     This subsection provides functions allowing to
 780:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Check the DMA state
 781:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****       (+) Get error code
 782:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 783:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** @endverbatim
 784:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 785:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */  
 786:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 787:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 788:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Returns the DMA state.
 789:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 790:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *               the configuration information for the specified DMA Channel.  
 791:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL state
 792:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 793:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
 794:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 1440              		.loc 1 794 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 8
 1443              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccsJUVTr.s 			page 40


 1444 0000 80B5     		push	{r7, lr}
 1445              		.cfi_def_cfa_offset 8
 1446              		.cfi_offset 7, -8
 1447              		.cfi_offset 14, -4
 1448 0002 82B0     		sub	sp, sp, #8
 1449              		.cfi_def_cfa_offset 16
 1450 0004 00AF     		add	r7, sp, #0
 1451              		.cfi_def_cfa_register 7
 1452 0006 7860     		str	r0, [r7, #4]
 795:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return hdma->State;
 1453              		.loc 1 795 0
 1454 0008 7B68     		ldr	r3, [r7, #4]
 1455 000a 2122     		movs	r2, #33
 1456 000c 9B5C     		ldrb	r3, [r3, r2]
 1457 000e DBB2     		uxtb	r3, r3
 796:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 1458              		.loc 1 796 0
 1459 0010 1800     		movs	r0, r3
 1460 0012 BD46     		mov	sp, r7
 1461 0014 02B0     		add	sp, sp, #8
 1462              		@ sp needed
 1463 0016 80BD     		pop	{r7, pc}
 1464              		.cfi_endproc
 1465              	.LFE47:
 1467              		.section	.text.HAL_DMA_GetError,"ax",%progbits
 1468              		.align	1
 1469              		.global	HAL_DMA_GetError
 1470              		.syntax unified
 1471              		.code	16
 1472              		.thumb_func
 1473              		.fpu softvfp
 1475              	HAL_DMA_GetError:
 1476              	.LFB48:
 797:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 798:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 799:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Return the DMA error code
 800:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 801:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *              the configuration information for the specified DMA Channel.
 802:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval DMA Error Code
 803:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 804:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
 805:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 1477              		.loc 1 805 0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 8
 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481 0000 80B5     		push	{r7, lr}
 1482              		.cfi_def_cfa_offset 8
 1483              		.cfi_offset 7, -8
 1484              		.cfi_offset 14, -4
 1485 0002 82B0     		sub	sp, sp, #8
 1486              		.cfi_def_cfa_offset 16
 1487 0004 00AF     		add	r7, sp, #0
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
 806:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   return hdma->ErrorCode;
 1490              		.loc 1 806 0
ARM GAS  /tmp/ccsJUVTr.s 			page 41


 1491 0008 7B68     		ldr	r3, [r7, #4]
 1492 000a 9B6B     		ldr	r3, [r3, #56]
 807:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 1493              		.loc 1 807 0
 1494 000c 1800     		movs	r0, r3
 1495 000e BD46     		mov	sp, r7
 1496 0010 02B0     		add	sp, sp, #8
 1497              		@ sp needed
 1498 0012 80BD     		pop	{r7, pc}
 1499              		.cfi_endproc
 1500              	.LFE48:
 1502              		.section	.text.DMA_SetConfig,"ax",%progbits
 1503              		.align	1
 1504              		.syntax unified
 1505              		.code	16
 1506              		.thumb_func
 1507              		.fpu softvfp
 1509              	DMA_SetConfig:
 1510              	.LFB49:
 808:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 809:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 810:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @}
 811:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 812:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 813:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 814:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @}
 815:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 816:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 817:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /** @addtogroup DMA_Private_Functions
 818:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @{
 819:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 820:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 821:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 822:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  Set the DMA Transfer parameters.
 823:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 824:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                     the configuration information for the specified DMA Channel.  
 825:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  SrcAddress The source memory Buffer address
 826:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  DstAddress The destination memory Buffer address
 827:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  DataLength The length of data to be transferred from source to destination
 828:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval HAL status
 829:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 830:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32
 831:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 1511              		.loc 1 831 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 16
 1514              		@ frame_needed = 1, uses_anonymous_args = 0
 1515 0000 80B5     		push	{r7, lr}
 1516              		.cfi_def_cfa_offset 8
 1517              		.cfi_offset 7, -8
 1518              		.cfi_offset 14, -4
 1519 0002 84B0     		sub	sp, sp, #16
 1520              		.cfi_def_cfa_offset 24
 1521 0004 00AF     		add	r7, sp, #0
 1522              		.cfi_def_cfa_register 7
 1523 0006 F860     		str	r0, [r7, #12]
 1524 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccsJUVTr.s 			page 42


 1525 000a 7A60     		str	r2, [r7, #4]
 1526 000c 3B60     		str	r3, [r7]
 832:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 	/* Clear all flags */
 833:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 1527              		.loc 1 833 0
 1528 000e FB68     		ldr	r3, [r7, #12]
 1529 0010 1A6C     		ldr	r2, [r3, #64]
 1530 0012 FB68     		ldr	r3, [r7, #12]
 1531 0014 DB6B     		ldr	r3, [r3, #60]
 1532 0016 0121     		movs	r1, #1
 1533 0018 9140     		lsls	r1, r1, r2
 1534 001a 0A00     		movs	r2, r1
 1535 001c 5A60     		str	r2, [r3, #4]
 834:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 835:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Configure DMA Channel data length */
 836:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->Instance->CNDTR = DataLength;
 1536              		.loc 1 836 0
 1537 001e FB68     		ldr	r3, [r7, #12]
 1538 0020 1B68     		ldr	r3, [r3]
 1539 0022 3A68     		ldr	r2, [r7]
 1540 0024 5A60     		str	r2, [r3, #4]
 837:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   
 838:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Memory to Peripheral */
 839:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 1541              		.loc 1 839 0
 1542 0026 FB68     		ldr	r3, [r7, #12]
 1543 0028 5B68     		ldr	r3, [r3, #4]
 1544 002a 102B     		cmp	r3, #16
 1545 002c 08D1     		bne	.L80
 840:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {   
 841:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Configure DMA Channel destination address */
 842:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CPAR = DstAddress;
 1546              		.loc 1 842 0
 1547 002e FB68     		ldr	r3, [r7, #12]
 1548 0030 1B68     		ldr	r3, [r3]
 1549 0032 7A68     		ldr	r2, [r7, #4]
 1550 0034 9A60     		str	r2, [r3, #8]
 843:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 844:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Configure DMA Channel source address */
 845:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CMAR = SrcAddress;
 1551              		.loc 1 845 0
 1552 0036 FB68     		ldr	r3, [r7, #12]
 1553 0038 1B68     		ldr	r3, [r3]
 1554 003a BA68     		ldr	r2, [r7, #8]
 1555 003c DA60     		str	r2, [r3, #12]
 846:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 847:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* Peripheral to Memory */
 848:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else
 849:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 850:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Configure DMA Channel source address */
 851:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CPAR = SrcAddress;
 852:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 853:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* Configure DMA Channel destination address */
 854:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->Instance->CMAR = DstAddress;
 855:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 856:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 1556              		.loc 1 856 0
ARM GAS  /tmp/ccsJUVTr.s 			page 43


 1557 003e 07E0     		b	.L82
 1558              	.L80:
 851:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     
 1559              		.loc 1 851 0
 1560 0040 FB68     		ldr	r3, [r7, #12]
 1561 0042 1B68     		ldr	r3, [r3]
 1562 0044 BA68     		ldr	r2, [r7, #8]
 1563 0046 9A60     		str	r2, [r3, #8]
 854:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 1564              		.loc 1 854 0
 1565 0048 FB68     		ldr	r3, [r7, #12]
 1566 004a 1B68     		ldr	r3, [r3]
 1567 004c 7A68     		ldr	r2, [r7, #4]
 1568 004e DA60     		str	r2, [r3, #12]
 1569              	.L82:
 1570              		.loc 1 856 0
 1571 0050 C046     		nop
 1572 0052 BD46     		mov	sp, r7
 1573 0054 04B0     		add	sp, sp, #16
 1574              		@ sp needed
 1575 0056 80BD     		pop	{r7, pc}
 1576              		.cfi_endproc
 1577              	.LFE49:
 1579              		.global	__aeabi_uidiv
 1580              		.section	.text.DMA_CalcBaseAndBitshift,"ax",%progbits
 1581              		.align	1
 1582              		.syntax unified
 1583              		.code	16
 1584              		.thumb_func
 1585              		.fpu softvfp
 1587              	DMA_CalcBaseAndBitshift:
 1588              	.LFB50:
 857:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** 
 858:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** /**
 859:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @brief  set the DMA base address and channel index depending on DMA instance
 860:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 861:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   *                     the configuration information for the specified DMA Stream. 
 862:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   * @retval None
 863:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   */
 864:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
 865:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** {
 1589              		.loc 1 865 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 8
 1592              		@ frame_needed = 1, uses_anonymous_args = 0
 1593 0000 80B5     		push	{r7, lr}
 1594              		.cfi_def_cfa_offset 8
 1595              		.cfi_offset 7, -8
 1596              		.cfi_offset 14, -4
 1597 0002 82B0     		sub	sp, sp, #8
 1598              		.cfi_def_cfa_offset 16
 1599 0004 00AF     		add	r7, sp, #0
 1600              		.cfi_def_cfa_register 7
 1601 0006 7860     		str	r0, [r7, #4]
 866:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** #if defined (DMA2)
 867:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* calculation of the channel index */
 868:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
ARM GAS  /tmp/ccsJUVTr.s 			page 44


 869:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 870:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* DMA1 */
 871:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Ch
 872:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->DmaBaseAddress = DMA1;
 873:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 874:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   else 
 875:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   {
 876:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     /* DMA2 */
 877:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Ch
 878:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****     hdma->DmaBaseAddress = DMA2;
 879:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   }
 880:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** #else
 881:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* calculation of the channel index */
 882:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   /* DMA1 */
 883:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Chan
 1602              		.loc 1 883 0
 1603 0008 7B68     		ldr	r3, [r7, #4]
 1604 000a 1B68     		ldr	r3, [r3]
 1605 000c 084A     		ldr	r2, .L84
 1606 000e 9446     		mov	ip, r2
 1607 0010 6344     		add	r3, r3, ip
 1608 0012 1421     		movs	r1, #20
 1609 0014 1800     		movs	r0, r3
 1610 0016 FFF7FEFF 		bl	__aeabi_uidiv
 1611              	.LVL4:
 1612 001a 0300     		movs	r3, r0
 1613 001c 9A00     		lsls	r2, r3, #2
 1614 001e 7B68     		ldr	r3, [r7, #4]
 1615 0020 1A64     		str	r2, [r3, #64]
 884:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c ****   hdma->DmaBaseAddress = DMA1;
 1616              		.loc 1 884 0
 1617 0022 7B68     		ldr	r3, [r7, #4]
 1618 0024 034A     		ldr	r2, .L84+4
 1619 0026 DA63     		str	r2, [r3, #60]
 885:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** #endif
 886:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_dma.c **** }
 1620              		.loc 1 886 0
 1621 0028 C046     		nop
 1622 002a BD46     		mov	sp, r7
 1623 002c 02B0     		add	sp, sp, #8
 1624              		@ sp needed
 1625 002e 80BD     		pop	{r7, pc}
 1626              	.L85:
 1627              		.align	2
 1628              	.L84:
 1629 0030 F8FFFDBF 		.word	-1073872904
 1630 0034 00000240 		.word	1073872896
 1631              		.cfi_endproc
 1632              	.LFE50:
 1634              		.text
 1635              	.Letext0:
 1636              		.file 2 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
 1637              		.file 3 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 1638              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1639              		.file 5 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1640              		.file 6 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 1641              		.file 7 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
ARM GAS  /tmp/ccsJUVTr.s 			page 45


 1642              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/i
 1643              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/ree
 1644              		.file 10 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 1645              		.file 11 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1646              		.file 12 "cube/Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
ARM GAS  /tmp/ccsJUVTr.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_dma.c
     /tmp/ccsJUVTr.s:16     .text.HAL_DMA_Init:0000000000000000 $t
     /tmp/ccsJUVTr.s:23     .text.HAL_DMA_Init:0000000000000000 HAL_DMA_Init
     /tmp/ccsJUVTr.s:1587   .text.DMA_CalcBaseAndBitshift:0000000000000000 DMA_CalcBaseAndBitshift
     /tmp/ccsJUVTr.s:150    .text.HAL_DMA_Init:00000000000000a4 $d
     /tmp/ccsJUVTr.s:155    .text.HAL_DMA_DeInit:0000000000000000 $t
     /tmp/ccsJUVTr.s:162    .text.HAL_DMA_DeInit:0000000000000000 HAL_DMA_DeInit
     /tmp/ccsJUVTr.s:254    .text.HAL_DMA_Start:0000000000000000 $t
     /tmp/ccsJUVTr.s:261    .text.HAL_DMA_Start:0000000000000000 HAL_DMA_Start
     /tmp/ccsJUVTr.s:1509   .text.DMA_SetConfig:0000000000000000 DMA_SetConfig
     /tmp/ccsJUVTr.s:367    .text.HAL_DMA_Start_IT:0000000000000000 $t
     /tmp/ccsJUVTr.s:374    .text.HAL_DMA_Start_IT:0000000000000000 HAL_DMA_Start_IT
     /tmp/ccsJUVTr.s:515    .text.HAL_DMA_Abort:0000000000000000 $t
     /tmp/ccsJUVTr.s:522    .text.HAL_DMA_Abort:0000000000000000 HAL_DMA_Abort
     /tmp/ccsJUVTr.s:586    .text.HAL_DMA_Abort_IT:0000000000000000 $t
     /tmp/ccsJUVTr.s:593    .text.HAL_DMA_Abort_IT:0000000000000000 HAL_DMA_Abort_IT
     /tmp/ccsJUVTr.s:695    .text.HAL_DMA_PollForTransfer:0000000000000000 $t
     /tmp/ccsJUVTr.s:702    .text.HAL_DMA_PollForTransfer:0000000000000000 HAL_DMA_PollForTransfer
     /tmp/ccsJUVTr.s:914    .text.HAL_DMA_IRQHandler:0000000000000000 $t
     /tmp/ccsJUVTr.s:921    .text.HAL_DMA_IRQHandler:0000000000000000 HAL_DMA_IRQHandler
     /tmp/ccsJUVTr.s:1139   .text.HAL_DMA_RegisterCallback:0000000000000000 $t
     /tmp/ccsJUVTr.s:1146   .text.HAL_DMA_RegisterCallback:0000000000000000 HAL_DMA_RegisterCallback
     /tmp/ccsJUVTr.s:1273   .text.HAL_DMA_UnRegisterCallback:0000000000000000 $t
     /tmp/ccsJUVTr.s:1280   .text.HAL_DMA_UnRegisterCallback:0000000000000000 HAL_DMA_UnRegisterCallback
     /tmp/ccsJUVTr.s:1336   .rodata.HAL_DMA_UnRegisterCallback:0000000000000000 $d
     /tmp/ccsJUVTr.s:1426   .text.HAL_DMA_UnRegisterCallback:00000000000000b0 $d
     /tmp/ccsJUVTr.s:1431   .text.HAL_DMA_GetState:0000000000000000 $t
     /tmp/ccsJUVTr.s:1438   .text.HAL_DMA_GetState:0000000000000000 HAL_DMA_GetState
     /tmp/ccsJUVTr.s:1468   .text.HAL_DMA_GetError:0000000000000000 $t
     /tmp/ccsJUVTr.s:1475   .text.HAL_DMA_GetError:0000000000000000 HAL_DMA_GetError
     /tmp/ccsJUVTr.s:1503   .text.DMA_SetConfig:0000000000000000 $t
     /tmp/ccsJUVTr.s:1581   .text.DMA_CalcBaseAndBitshift:0000000000000000 $t
     /tmp/ccsJUVTr.s:1629   .text.DMA_CalcBaseAndBitshift:0000000000000030 $d
                           .group:0000000000000000 wm4.0.b7c3d577b02d87ac381ee43eef398462
                           .group:0000000000000000 wm4.main.h.42.3939338cba6ab0a8b761d08be8206d51
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.b0c07d2233f75e3b04f03d95093d88ca
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
ARM GAS  /tmp/ccsJUVTr.s 			page 47


                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart.h.38.e5eada3cdf37ca88de33bd21ddd21a5e
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart_ex.h.38.9430c2ca5ec832677dbe7308c46115fd
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

UNDEFINED SYMBOLS
HAL_GetTick
__aeabi_uidiv
