ARM GAS  /tmp/ccBF0cvy.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWR_DeInit
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PWR_DeInit:
  24              	.LFB37:
  25              		.file 1 "cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c"
   1:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
   2:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   ******************************************************************************
   3:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @file    stm32f0xx_hal_pwr.c
   4:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           + Initialization/de-initialization function
   9:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           + Peripheral Control function
  10:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
  11:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   @verbatim
  12:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   ******************************************************************************
  13:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @attention
  14:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
  15:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  16:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
  17:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  18:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  19:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  20:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  21:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  22:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  23:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  24:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  25:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  26:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *      without specific prior written permission.
  27:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
  28:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  29:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  30:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  32:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccBF0cvy.s 			page 2


  34:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  36:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
  39:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   ******************************************************************************
  40:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
  41:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  42:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  43:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** #include "stm32f0xx_hal.h"
  44:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  45:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /** @addtogroup STM32F0xx_HAL_Driver
  46:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @{
  47:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
  48:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  49:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /** @defgroup PWR PWR
  50:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief PWR HAL module driver
  51:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @{
  52:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
  53:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  54:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  55:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  56:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  57:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  58:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  59:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  60:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  61:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  62:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  63:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  64:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @{
  65:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
  66:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  67:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  68:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  69:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
  70:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** @verbatim
  71:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****  ===============================================================================
  72:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  73:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****  ===============================================================================
  74:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     [..]
  75:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data
  76:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       registers) is protected against possible unwanted
  77:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       write accesses.
  78:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  79:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  80:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  81:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  82:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  83:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** @endverbatim
  84:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @{
  85:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
  86:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  87:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
  88:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Deinitializes the PWR peripheral registers to their default reset values.
  89:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
  90:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
ARM GAS  /tmp/ccBF0cvy.s 			page 3


  91:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  92:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
  26              		.loc 1 92 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  93:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  36              		.loc 1 93 0
  37 0004 074B     		ldr	r3, .L2
  38 0006 1A69     		ldr	r2, [r3, #16]
  39 0008 064B     		ldr	r3, .L2
  40 000a 8021     		movs	r1, #128
  41 000c 4905     		lsls	r1, r1, #21
  42 000e 0A43     		orrs	r2, r1
  43 0010 1A61     		str	r2, [r3, #16]
  94:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  44              		.loc 1 94 0
  45 0012 044B     		ldr	r3, .L2
  46 0014 1A69     		ldr	r2, [r3, #16]
  47 0016 034B     		ldr	r3, .L2
  48 0018 0349     		ldr	r1, .L2+4
  49 001a 0A40     		ands	r2, r1
  50 001c 1A61     		str	r2, [r3, #16]
  95:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
  51              		.loc 1 95 0
  52 001e C046     		nop
  53 0020 BD46     		mov	sp, r7
  54              		@ sp needed
  55 0022 80BD     		pop	{r7, pc}
  56              	.L3:
  57              		.align	2
  58              	.L2:
  59 0024 00100240 		.word	1073876992
  60 0028 FFFFFFEF 		.word	-268435457
  61              		.cfi_endproc
  62              	.LFE37:
  64              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  65              		.align	1
  66              		.global	HAL_PWR_EnableBkUpAccess
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  70              		.fpu softvfp
  72              	HAL_PWR_EnableBkUpAccess:
  73              	.LFB38:
  96:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
  97:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
  98:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC
  99:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         backup data registers when present).
 100:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  If the HSE divided by 32 is used as the RTC clock, the
 101:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
ARM GAS  /tmp/ccBF0cvy.s 			page 4


 102:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 103:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 104:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 105:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
  74              		.loc 1 105 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
 106:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   PWR->CR |= (uint32_t)PWR_CR_DBP;
  84              		.loc 1 106 0
  85 0004 044B     		ldr	r3, .L5
  86 0006 1A68     		ldr	r2, [r3]
  87 0008 034B     		ldr	r3, .L5
  88 000a 8021     		movs	r1, #128
  89 000c 4900     		lsls	r1, r1, #1
  90 000e 0A43     		orrs	r2, r1
  91 0010 1A60     		str	r2, [r3]
 107:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
  92              		.loc 1 107 0
  93 0012 C046     		nop
  94 0014 BD46     		mov	sp, r7
  95              		@ sp needed
  96 0016 80BD     		pop	{r7, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0018 00700040 		.word	1073770496
 101              		.cfi_endproc
 102              	.LFE38:
 104              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
 105              		.align	1
 106              		.global	HAL_PWR_DisableBkUpAccess
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 110              		.fpu softvfp
 112              	HAL_PWR_DisableBkUpAccess:
 113              	.LFB39:
 108:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 109:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 110:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC
 111:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         backup data registers when present).
 112:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  If the HSE divided by 32 is used as the RTC clock, the
 113:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 114:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 115:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 116:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 117:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 114              		.loc 1 117 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBF0cvy.s 			page 5


 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 118:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   PWR->CR &= ~((uint32_t)PWR_CR_DBP);
 124              		.loc 1 118 0
 125 0004 044B     		ldr	r3, .L8
 126 0006 1A68     		ldr	r2, [r3]
 127 0008 034B     		ldr	r3, .L8
 128 000a 0449     		ldr	r1, .L8+4
 129 000c 0A40     		ands	r2, r1
 130 000e 1A60     		str	r2, [r3]
 119:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 131              		.loc 1 119 0
 132 0010 C046     		nop
 133 0012 BD46     		mov	sp, r7
 134              		@ sp needed
 135 0014 80BD     		pop	{r7, pc}
 136              	.L9:
 137 0016 C046     		.align	2
 138              	.L8:
 139 0018 00700040 		.word	1073770496
 140 001c FFFEFFFF 		.word	-257
 141              		.cfi_endproc
 142              	.LFE39:
 144              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 145              		.align	1
 146              		.global	HAL_PWR_EnableWakeUpPin
 147              		.syntax unified
 148              		.code	16
 149              		.thumb_func
 150              		.fpu softvfp
 152              	HAL_PWR_EnableWakeUpPin:
 153              	.LFB40:
 120:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 121:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 122:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @}
 123:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 124:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 125:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 126:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
 127:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *
 128:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** @verbatim
 129:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 130:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****  ===============================================================================
 131:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 132:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****  ===============================================================================
 133:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     
 134:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 135:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     ================================
 136:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     [..]
 137:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) WakeUp pin is used to wakeup the system from Standby mode. This pin is
 138:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           forced in input pull down configuration and is active on rising edges.
 139:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) There are two WakeUp pins, and up to eight Wakeup pins on STM32F07x & STM32F09x devices.
ARM GAS  /tmp/ccBF0cvy.s 			page 6


 140:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 1 on PA.00.
 141:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 2 on PC.13.
 142:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 3 on PE.06.(STM32F07x/STM32F09x)
 143:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 4 on PA.02.(STM32F07x/STM32F09x)
 144:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 5 on PC.05.(STM32F07x/STM32F09x)
 145:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 6 on PB.05.(STM32F07x/STM32F09x)
 146:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 7 on PB.15.(STM32F07x/STM32F09x)
 147:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****          (++)WakeUp Pin 8 on PF.02.(STM32F07x/STM32F09x)
 148:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 149:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     *** Low Power modes configuration ***
 150:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     =====================================
 151:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     [..]
 152:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 153:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M0 core stopped, peripherals kept running.
 154:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator
 155:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           in low power mode
 156:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off (mode not available on STM32F0x8 devices).
 157:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 158:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    *** Sleep mode ***
 159:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    ==================
 160:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     [..]
 161:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Entry:
 162:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_S
 163:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****               functions with
 164:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 165:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 166:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****      
 167:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Exit:
 168:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 169:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 170:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 171:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    *** Stop mode ***
 172:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    =================
 173:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     [..]
 174:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.8V domain are stopped, the PLL, the HSI,
 175:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents
 176:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       are preserved.
 177:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 178:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       To minimize the consumption.
 179:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 180:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Entry:
 181:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPEN
 182:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****              function with:
 183:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) Main regulator ON.
 184:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) Low Power regulator ON.
 185:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter STOP mode with WFI instruction
 186:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter STOP mode with WFE instruction
 187:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Exit:
 188:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 189:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) Some specific communication peripherals (CEC, USART, I2C) interrupts, 
 190:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                when programmed in wakeup mode (the peripheral must be 
 191:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                programmed in wakeup mode and the corresponding interrupt vector 
 192:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                must be enabled in the NVIC)
 193:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 194:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    *** Standby mode ***
 195:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    ====================
 196:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****      [..]
ARM GAS  /tmp/ccBF0cvy.s 			page 7


 197:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based
 198:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       on the Cortex-M0 deep sleep mode, with the voltage regulator disabled.
 199:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       The 1.8V domain is consequently powered off. The PLL, the HSI oscillator and
 200:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost
 201:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers and Standby circuitry.
 202:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       The voltage regulator is OFF.
 203:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 204:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Entry:
 205:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 206:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (+) Exit:
 207:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****           (++) WKUP pin rising edge, RTC alarm (Alarm A), RTC wakeup,
 208:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 209:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 210:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 211:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****    =============================================
 212:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     [..]
 213:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC
 214:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 215:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 216:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 217:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Stop and Standby modes
 218:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 219:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to
 220:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****             configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 221:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 222:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it
 223:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****            is necessary to configure the RTC to detect the tamper or time stamp event using the
 224:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****            HAL_RTC_SetTimeStamp_IT() or HAL_RTC_SetTamper_IT() functions.
 225:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 226:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 227:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****            configure the RTC to generate the RTC WakeUp event using the HAL_RTC_SetWakeUpTimer_IT()
 228:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 229:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     (+) Comparator auto-wakeup (AWU) from the Stop mode
 230:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 231:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****       (++) To wake up from the Stop mode with a comparator wakeup event, it is necessary to:
 232:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****            (+++) Configure the EXTI Line associated with the comparator (example EXTI Line 22 for c
 233:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                  to be sensitive to to the selected edges (falling, rising or falling 
 234:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****                  and rising) (Interrupt or Event modes) using the EXTI_Init() function.
 235:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****            (+++) Configure the comparator to generate the event.      
 236:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** @endverbatim
 237:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @{
 238:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 239:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 240:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 241:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Enables the WakeUp PINx functionality.
 242:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to enable.
 243:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         This parameter can be value of :
 244:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           @ref PWREx_WakeUp_Pins
 245:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 246:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 247:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 248:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 154              		.loc 1 248 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 8
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccBF0cvy.s 			page 8


 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 7, -8
 161              		.cfi_offset 14, -4
 162 0002 82B0     		sub	sp, sp, #8
 163              		.cfi_def_cfa_offset 16
 164 0004 00AF     		add	r7, sp, #0
 165              		.cfi_def_cfa_register 7
 166 0006 7860     		str	r0, [r7, #4]
 249:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Check the parameters */
 250:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 251:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Enable the EWUPx pin */
 252:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SET_BIT(PWR->CSR, WakeUpPinx);
 167              		.loc 1 252 0
 168 0008 044B     		ldr	r3, .L11
 169 000a 5968     		ldr	r1, [r3, #4]
 170 000c 034B     		ldr	r3, .L11
 171 000e 7A68     		ldr	r2, [r7, #4]
 172 0010 0A43     		orrs	r2, r1
 173 0012 5A60     		str	r2, [r3, #4]
 253:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 174              		.loc 1 253 0
 175 0014 C046     		nop
 176 0016 BD46     		mov	sp, r7
 177 0018 02B0     		add	sp, sp, #8
 178              		@ sp needed
 179 001a 80BD     		pop	{r7, pc}
 180              	.L12:
 181              		.align	2
 182              	.L11:
 183 001c 00700040 		.word	1073770496
 184              		.cfi_endproc
 185              	.LFE40:
 187              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 188              		.align	1
 189              		.global	HAL_PWR_DisableWakeUpPin
 190              		.syntax unified
 191              		.code	16
 192              		.thumb_func
 193              		.fpu softvfp
 195              	HAL_PWR_DisableWakeUpPin:
 196              	.LFB41:
 254:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 255:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 256:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Disables the WakeUp PINx functionality.
 257:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to disable.
 258:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         This parameter can be values of :
 259:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           @ref PWREx_WakeUp_Pins
 260:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 261:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 262:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 263:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 197              		.loc 1 263 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201 0000 80B5     		push	{r7, lr}
 202              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccBF0cvy.s 			page 9


 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 82B0     		sub	sp, sp, #8
 206              		.cfi_def_cfa_offset 16
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 7860     		str	r0, [r7, #4]
 264:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Check the parameters */
 265:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 266:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Disable the EWUPx pin */
 267:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CSR, WakeUpPinx);
 210              		.loc 1 267 0
 211 0008 054B     		ldr	r3, .L14
 212 000a 5A68     		ldr	r2, [r3, #4]
 213 000c 7B68     		ldr	r3, [r7, #4]
 214 000e D943     		mvns	r1, r3
 215 0010 034B     		ldr	r3, .L14
 216 0012 0A40     		ands	r2, r1
 217 0014 5A60     		str	r2, [r3, #4]
 268:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 218              		.loc 1 268 0
 219 0016 C046     		nop
 220 0018 BD46     		mov	sp, r7
 221 001a 02B0     		add	sp, sp, #8
 222              		@ sp needed
 223 001c 80BD     		pop	{r7, pc}
 224              	.L15:
 225 001e C046     		.align	2
 226              	.L14:
 227 0020 00700040 		.word	1073770496
 228              		.cfi_endproc
 229              	.LFE41:
 231              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 232              		.align	1
 233              		.global	HAL_PWR_EnterSLEEPMode
 234              		.syntax unified
 235              		.code	16
 236              		.thumb_func
 237              		.fpu softvfp
 239              	HAL_PWR_EnterSLEEPMode:
 240              	.LFB42:
 269:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 270:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 271:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 272:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  In Sleep mode, all I/O pins keep the same state as in Run mode.
 273:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in SLEEP mode.
 274:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           On STM32F0 devices, this parameter is a dummy value and it is ignored
 275:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           as regulator can't be modified in this mode. Parameter is kept for platform
 276:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           compatibility.
 277:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @param SLEEPEntry Specifies if SLEEP mode is entered with WFI or WFE instruction.
 278:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           When WFI entry is used, tick interrupt have to be disabled if not desired as 
 279:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           the interrupt wake up source.
 280:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 281:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 282:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 283:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 284:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
ARM GAS  /tmp/ccBF0cvy.s 			page 10


 285:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 286:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 241              		.loc 1 286 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 8
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 80B5     		push	{r7, lr}
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 82B0     		sub	sp, sp, #8
 250              		.cfi_def_cfa_offset 16
 251 0004 00AF     		add	r7, sp, #0
 252              		.cfi_def_cfa_register 7
 253 0006 7860     		str	r0, [r7, #4]
 254 0008 0A00     		movs	r2, r1
 255 000a FB1C     		adds	r3, r7, #3
 256 000c 1A70     		strb	r2, [r3]
 287:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Check the parameters */
 288:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 289:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 290:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 291:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 292:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 257              		.loc 1 292 0
 258 000e 094B     		ldr	r3, .L20
 259 0010 1A69     		ldr	r2, [r3, #16]
 260 0012 084B     		ldr	r3, .L20
 261 0014 0421     		movs	r1, #4
 262 0016 8A43     		bics	r2, r1
 263 0018 1A61     		str	r2, [r3, #16]
 293:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 294:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 295:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 264              		.loc 1 295 0
 265 001a FB1C     		adds	r3, r7, #3
 266 001c 1B78     		ldrb	r3, [r3]
 267 001e 012B     		cmp	r3, #1
 268 0020 01D1     		bne	.L17
 269              	.LBB20:
 270              	.LBB21:
 271              		.file 2 "cube/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
ARM GAS  /tmp/ccBF0cvy.s 			page 11


  16:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccBF0cvy.s 			page 12


  73:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
ARM GAS  /tmp/ccBF0cvy.s 			page 13


 130:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  /tmp/ccBF0cvy.s 			page 14


 187:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccBF0cvy.s 			page 15


 244:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccBF0cvy.s 			page 16


 301:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBF0cvy.s 			page 17


 358:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 272              		.loc 2 385 0
 273              		.syntax divided
 274              	@ 385 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 275 0022 30BF     		wfi
 276              	@ 0 "" 2
 277              		.thumb
 278              		.syntax unified
 279              	.LBE21:
 280              	.LBE20:
 296:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   {
 297:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 298:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __WFI();
 299:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   }
 300:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   else
 301:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   {
 302:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     /* Request Wait For Event */
 303:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __SEV();
 304:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __WFE();
 305:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __WFE();
 306:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   }
 307:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 281              		.loc 1 307 0
 282 0024 02E0     		b	.L19
 283              	.L17:
 284              	.LBB22:
 285              	.LBB23:
 386:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBF0cvy.s 			page 18


 389:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 286              		.loc 2 406 0
 287              		.syntax divided
 288              	@ 406 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 289 0026 40BF     		sev
 290              	@ 0 "" 2
 291              		.thumb
 292              		.syntax unified
 293              	.LBE23:
 294              	.LBE22:
 295              	.LBB24:
 296              	.LBB25:
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 297              		.loc 2 396 0
 298              		.syntax divided
 299              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 300 0028 20BF     		wfe
 301              	@ 0 "" 2
 302              		.thumb
 303              		.syntax unified
 304              	.LBE25:
 305              	.LBE24:
 306              	.LBB26:
 307              	.LBB27:
 308              		.syntax divided
 309              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 310 002a 20BF     		wfe
 311              	@ 0 "" 2
 312              		.thumb
 313              		.syntax unified
 314              	.L19:
 315              	.LBE27:
 316              	.LBE26:
 317              		.loc 1 307 0
 318 002c C046     		nop
 319 002e BD46     		mov	sp, r7
 320 0030 02B0     		add	sp, sp, #8
 321              		@ sp needed
 322 0032 80BD     		pop	{r7, pc}
 323              	.L21:
ARM GAS  /tmp/ccBF0cvy.s 			page 19


 324              		.align	2
 325              	.L20:
 326 0034 00ED00E0 		.word	-536810240
 327              		.cfi_endproc
 328              	.LFE42:
 330              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 331              		.align	1
 332              		.global	HAL_PWR_EnterSTOPMode
 333              		.syntax unified
 334              		.code	16
 335              		.thumb_func
 336              		.fpu softvfp
 338              	HAL_PWR_EnterSTOPMode:
 339              	.LFB43:
 308:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 309:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 310:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Enters STOP mode.
 311:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 312:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  When exiting Stop mode by issuing an interrupt or a wakeup event,
 313:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 314:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode, an additional
 315:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode.
 316:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption
 317:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *         is higher although the startup time is reduced.
 318:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in STOP mode.
 319:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 320:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: STOP mode with regulator ON
 321:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: STOP mode with low power regulator ON
 322:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @param STOPEntry specifies if STOP mode in entered with WFI or WFE instruction.
 323:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 324:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
 325:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
 326:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 327:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 328:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 329:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 340              		.loc 1 329 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 16
 343              		@ frame_needed = 1, uses_anonymous_args = 0
 344 0000 80B5     		push	{r7, lr}
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 84B0     		sub	sp, sp, #16
 349              		.cfi_def_cfa_offset 24
 350 0004 00AF     		add	r7, sp, #0
 351              		.cfi_def_cfa_register 7
 352 0006 7860     		str	r0, [r7, #4]
 353 0008 0A00     		movs	r2, r1
 354 000a FB1C     		adds	r3, r7, #3
 355 000c 1A70     		strb	r2, [r3]
 330:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   uint32_t tmpreg = 0;
 356              		.loc 1 330 0
 357 000e 0023     		movs	r3, #0
 358 0010 FB60     		str	r3, [r7, #12]
 331:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
ARM GAS  /tmp/ccBF0cvy.s 			page 20


 332:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Check the parameters */
 333:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 334:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 335:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 336:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 337:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   tmpreg = PWR->CR;
 359              		.loc 1 337 0
 360 0012 134B     		ldr	r3, .L25
 361 0014 1B68     		ldr	r3, [r3]
 362 0016 FB60     		str	r3, [r7, #12]
 338:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   
 339:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Clear PDDS and LPDS bits */
 340:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 363              		.loc 1 340 0
 364 0018 FB68     		ldr	r3, [r7, #12]
 365 001a 0322     		movs	r2, #3
 366 001c 9343     		bics	r3, r2
 367 001e FB60     		str	r3, [r7, #12]
 341:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 342:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Set LPDS bit according to Regulator value */
 343:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   tmpreg |= Regulator;
 368              		.loc 1 343 0
 369 0020 FA68     		ldr	r2, [r7, #12]
 370 0022 7B68     		ldr	r3, [r7, #4]
 371 0024 1343     		orrs	r3, r2
 372 0026 FB60     		str	r3, [r7, #12]
 344:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 345:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Store the new value */
 346:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   PWR->CR = tmpreg;
 373              		.loc 1 346 0
 374 0028 0D4B     		ldr	r3, .L25
 375 002a FA68     		ldr	r2, [r7, #12]
 376 002c 1A60     		str	r2, [r3]
 347:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 348:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 349:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 377              		.loc 1 349 0
 378 002e 0D4B     		ldr	r3, .L25+4
 379 0030 1A69     		ldr	r2, [r3, #16]
 380 0032 0C4B     		ldr	r3, .L25+4
 381 0034 0421     		movs	r1, #4
 382 0036 0A43     		orrs	r2, r1
 383 0038 1A61     		str	r2, [r3, #16]
 350:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 351:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 352:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 384              		.loc 1 352 0
 385 003a FB1C     		adds	r3, r7, #3
 386 003c 1B78     		ldrb	r3, [r3]
 387 003e 012B     		cmp	r3, #1
 388 0040 01D1     		bne	.L23
 389              	.LBB28:
 390              	.LBB29:
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 391              		.loc 2 385 0
 392              		.syntax divided
 393              	@ 385 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccBF0cvy.s 			page 21


 394 0042 30BF     		wfi
 395              	@ 0 "" 2
 396              		.thumb
 397              		.syntax unified
 398              	.LBE29:
 399              	.LBE28:
 400 0044 02E0     		b	.L24
 401              	.L23:
 402              	.LBB30:
 403              	.LBB31:
 404              		.loc 2 406 0
 405              		.syntax divided
 406              	@ 406 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 407 0046 40BF     		sev
 408              	@ 0 "" 2
 409              		.thumb
 410              		.syntax unified
 411              	.LBE31:
 412              	.LBE30:
 413              	.LBB32:
 414              	.LBB33:
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 415              		.loc 2 396 0
 416              		.syntax divided
 417              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 418 0048 20BF     		wfe
 419              	@ 0 "" 2
 420              		.thumb
 421              		.syntax unified
 422              	.LBE33:
 423              	.LBE32:
 424              	.LBB34:
 425              	.LBB35:
 426              		.syntax divided
 427              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 428 004a 20BF     		wfe
 429              	@ 0 "" 2
 430              		.thumb
 431              		.syntax unified
 432              	.L24:
 433              	.LBE35:
 434              	.LBE34:
 353:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   {
 354:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 355:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __WFI();
 356:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   }
 357:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   else
 358:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   {
 359:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     /* Request Wait For Event */
 360:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __SEV();
 361:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __WFE();
 362:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****     __WFE();
 363:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   }
 364:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 365:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 366:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 435              		.loc 1 366 0
ARM GAS  /tmp/ccBF0cvy.s 			page 22


 436 004c 054B     		ldr	r3, .L25+4
 437 004e 1A69     		ldr	r2, [r3, #16]
 438 0050 044B     		ldr	r3, .L25+4
 439 0052 0421     		movs	r1, #4
 440 0054 8A43     		bics	r2, r1
 441 0056 1A61     		str	r2, [r3, #16]
 367:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 442              		.loc 1 367 0
 443 0058 C046     		nop
 444 005a BD46     		mov	sp, r7
 445 005c 04B0     		add	sp, sp, #16
 446              		@ sp needed
 447 005e 80BD     		pop	{r7, pc}
 448              	.L26:
 449              		.align	2
 450              	.L25:
 451 0060 00700040 		.word	1073770496
 452 0064 00ED00E0 		.word	-536810240
 453              		.cfi_endproc
 454              	.LFE43:
 456              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 457              		.align	1
 458              		.global	HAL_PWR_EnterSTANDBYMode
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 462              		.fpu softvfp
 464              	HAL_PWR_EnterSTANDBYMode:
 465              	.LFB44:
 368:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 369:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 370:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Enters STANDBY mode.
 371:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note  In Standby mode, all I/O pins are high impedance except for:
 372:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          - Reset pad (still available)
 373:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          - RTC alternate function pins if configured for tamper, time-stamp, RTC
 374:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 375:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *          - WKUP pins if enabled.
 376:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            STM32F0x8 devices, the Stop mode is available, but it is 
 377:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            aningless to distinguish between voltage regulator in Low power 
 378:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            mode and voltage regulator in Run mode because the regulator 
 379:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            not used and the core is supplied directly from an external source.
 380:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *            Consequently, the Standby mode is not available on those devices.
 381:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 382:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 383:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 384:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 466              		.loc 1 384 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470 0000 80B5     		push	{r7, lr}
 471              		.cfi_def_cfa_offset 8
 472              		.cfi_offset 7, -8
 473              		.cfi_offset 14, -4
 474 0002 00AF     		add	r7, sp, #0
 475              		.cfi_def_cfa_register 7
 385:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Select STANDBY mode */
ARM GAS  /tmp/ccBF0cvy.s 			page 23


 386:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   PWR->CR |= (uint32_t)PWR_CR_PDDS;
 476              		.loc 1 386 0
 477 0004 074B     		ldr	r3, .L28
 478 0006 1A68     		ldr	r2, [r3]
 479 0008 064B     		ldr	r3, .L28
 480 000a 0221     		movs	r1, #2
 481 000c 0A43     		orrs	r2, r1
 482 000e 1A60     		str	r2, [r3]
 387:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 388:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 389:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 483              		.loc 1 389 0
 484 0010 054B     		ldr	r3, .L28+4
 485 0012 1A69     		ldr	r2, [r3, #16]
 486 0014 044B     		ldr	r3, .L28+4
 487 0016 0421     		movs	r1, #4
 488 0018 0A43     		orrs	r2, r1
 489 001a 1A61     		str	r2, [r3, #16]
 490              	.LBB36:
 491              	.LBB37:
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 492              		.loc 2 385 0
 493              		.syntax divided
 494              	@ 385 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 495 001c 30BF     		wfi
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.LBE37:
 500              	.LBE36:
 390:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 391:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 392:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** #if defined ( __CC_ARM)
 393:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   __force_stores();
 394:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** #endif
 395:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 396:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   __WFI();
 397:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 501              		.loc 1 397 0
 502 001e C046     		nop
 503 0020 BD46     		mov	sp, r7
 504              		@ sp needed
 505 0022 80BD     		pop	{r7, pc}
 506              	.L29:
 507              		.align	2
 508              	.L28:
 509 0024 00700040 		.word	1073770496
 510 0028 00ED00E0 		.word	-536810240
 511              		.cfi_endproc
 512              	.LFE44:
 514              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 515              		.align	1
 516              		.global	HAL_PWR_EnableSleepOnExit
 517              		.syntax unified
 518              		.code	16
 519              		.thumb_func
 520              		.fpu softvfp
ARM GAS  /tmp/ccBF0cvy.s 			page 24


 522              	HAL_PWR_EnableSleepOnExit:
 523              	.LFB45:
 398:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 399:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 400:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 401:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 402:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 403:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 404:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *       interruptions handling.         
 405:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 406:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 407:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 408:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 524              		.loc 1 408 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0000 80B5     		push	{r7, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 7, -8
 531              		.cfi_offset 14, -4
 532 0002 00AF     		add	r7, sp, #0
 533              		.cfi_def_cfa_register 7
 409:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 410:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 534              		.loc 1 410 0
 535 0004 044B     		ldr	r3, .L31
 536 0006 1A69     		ldr	r2, [r3, #16]
 537 0008 034B     		ldr	r3, .L31
 538 000a 0221     		movs	r1, #2
 539 000c 0A43     		orrs	r2, r1
 540 000e 1A61     		str	r2, [r3, #16]
 411:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 541              		.loc 1 411 0
 542 0010 C046     		nop
 543 0012 BD46     		mov	sp, r7
 544              		@ sp needed
 545 0014 80BD     		pop	{r7, pc}
 546              	.L32:
 547 0016 C046     		.align	2
 548              	.L31:
 549 0018 00ED00E0 		.word	-536810240
 550              		.cfi_endproc
 551              	.LFE45:
 553              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 554              		.align	1
 555              		.global	HAL_PWR_DisableSleepOnExit
 556              		.syntax unified
 557              		.code	16
 558              		.thumb_func
 559              		.fpu softvfp
 561              	HAL_PWR_DisableSleepOnExit:
 562              	.LFB46:
 412:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 413:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 414:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 415:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
ARM GAS  /tmp/ccBF0cvy.s 			page 25


 416:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 417:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 418:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 419:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 420:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 421:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 563              		.loc 1 421 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567 0000 80B5     		push	{r7, lr}
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 422:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 423:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 573              		.loc 1 423 0
 574 0004 044B     		ldr	r3, .L34
 575 0006 1A69     		ldr	r2, [r3, #16]
 576 0008 034B     		ldr	r3, .L34
 577 000a 0221     		movs	r1, #2
 578 000c 8A43     		bics	r2, r1
 579 000e 1A61     		str	r2, [r3, #16]
 424:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 580              		.loc 1 424 0
 581 0010 C046     		nop
 582 0012 BD46     		mov	sp, r7
 583              		@ sp needed
 584 0014 80BD     		pop	{r7, pc}
 585              	.L35:
 586 0016 C046     		.align	2
 587              	.L34:
 588 0018 00ED00E0 		.word	-536810240
 589              		.cfi_endproc
 590              	.LFE46:
 592              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 593              		.align	1
 594              		.global	HAL_PWR_EnableSEVOnPend
 595              		.syntax unified
 596              		.code	16
 597              		.thumb_func
 598              		.fpu softvfp
 600              	HAL_PWR_EnableSEVOnPend:
 601              	.LFB47:
 425:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 426:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 427:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 428:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 429:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Enables CORTEX M4 SEVONPEND bit. 
 430:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 431:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 432:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 433:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 434:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 435:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
ARM GAS  /tmp/ccBF0cvy.s 			page 26


 602              		.loc 1 435 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 0002 00AF     		add	r7, sp, #0
 611              		.cfi_def_cfa_register 7
 436:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 437:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 612              		.loc 1 437 0
 613 0004 044B     		ldr	r3, .L37
 614 0006 1A69     		ldr	r2, [r3, #16]
 615 0008 034B     		ldr	r3, .L37
 616 000a 1021     		movs	r1, #16
 617 000c 0A43     		orrs	r2, r1
 618 000e 1A61     		str	r2, [r3, #16]
 438:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 619              		.loc 1 438 0
 620 0010 C046     		nop
 621 0012 BD46     		mov	sp, r7
 622              		@ sp needed
 623 0014 80BD     		pop	{r7, pc}
 624              	.L38:
 625 0016 C046     		.align	2
 626              	.L37:
 627 0018 00ED00E0 		.word	-536810240
 628              		.cfi_endproc
 629              	.LFE47:
 631              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 632              		.align	1
 633              		.global	HAL_PWR_DisableSEVOnPend
 634              		.syntax unified
 635              		.code	16
 636              		.thumb_func
 637              		.fpu softvfp
 639              	HAL_PWR_DisableSEVOnPend:
 640              	.LFB48:
 439:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 440:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** 
 441:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** /**
 442:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @brief Disables CORTEX M4 SEVONPEND bit. 
 443:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 444:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 445:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   * @retval None
 446:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   */
 447:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 448:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** {
 641              		.loc 1 448 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 1, uses_anonymous_args = 0
 645 0000 80B5     		push	{r7, lr}
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 7, -8
ARM GAS  /tmp/ccBF0cvy.s 			page 27


 648              		.cfi_offset 14, -4
 649 0002 00AF     		add	r7, sp, #0
 650              		.cfi_def_cfa_register 7
 449:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 450:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 651              		.loc 1 450 0
 652 0004 044B     		ldr	r3, .L40
 653 0006 1A69     		ldr	r2, [r3, #16]
 654 0008 034B     		ldr	r3, .L40
 655 000a 1021     		movs	r1, #16
 656 000c 8A43     		bics	r2, r1
 657 000e 1A61     		str	r2, [r3, #16]
 451:cube/Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_pwr.c **** }
 658              		.loc 1 451 0
 659 0010 C046     		nop
 660 0012 BD46     		mov	sp, r7
 661              		@ sp needed
 662 0014 80BD     		pop	{r7, pc}
 663              	.L41:
 664 0016 C046     		.align	2
 665              	.L40:
 666 0018 00ED00E0 		.word	-536810240
 667              		.cfi_endproc
 668              	.LFE48:
 670              		.text
 671              	.Letext0:
 672              		.file 3 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
 673              		.file 4 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 674              		.file 5 "cube/Drivers/CMSIS/Include/core_cm0.h"
 675              		.file 6 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 676              		.file 7 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 677              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 678              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
 679              		.file 10 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/
 680              		.file 11 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/re
ARM GAS  /tmp/ccBF0cvy.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_pwr.c
     /tmp/ccBF0cvy.s:16     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/ccBF0cvy.s:23     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/ccBF0cvy.s:59     .text.HAL_PWR_DeInit:0000000000000024 $d
     /tmp/ccBF0cvy.s:65     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/ccBF0cvy.s:72     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccBF0cvy.s:100    .text.HAL_PWR_EnableBkUpAccess:0000000000000018 $d
     /tmp/ccBF0cvy.s:105    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/ccBF0cvy.s:112    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccBF0cvy.s:139    .text.HAL_PWR_DisableBkUpAccess:0000000000000018 $d
     /tmp/ccBF0cvy.s:145    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccBF0cvy.s:152    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccBF0cvy.s:183    .text.HAL_PWR_EnableWakeUpPin:000000000000001c $d
     /tmp/ccBF0cvy.s:188    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccBF0cvy.s:195    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccBF0cvy.s:227    .text.HAL_PWR_DisableWakeUpPin:0000000000000020 $d
     /tmp/ccBF0cvy.s:232    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/ccBF0cvy.s:239    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccBF0cvy.s:326    .text.HAL_PWR_EnterSLEEPMode:0000000000000034 $d
     /tmp/ccBF0cvy.s:331    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccBF0cvy.s:338    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/ccBF0cvy.s:451    .text.HAL_PWR_EnterSTOPMode:0000000000000060 $d
     /tmp/ccBF0cvy.s:457    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccBF0cvy.s:464    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccBF0cvy.s:509    .text.HAL_PWR_EnterSTANDBYMode:0000000000000024 $d
     /tmp/ccBF0cvy.s:515    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/ccBF0cvy.s:522    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccBF0cvy.s:549    .text.HAL_PWR_EnableSleepOnExit:0000000000000018 $d
     /tmp/ccBF0cvy.s:554    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/ccBF0cvy.s:561    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccBF0cvy.s:588    .text.HAL_PWR_DisableSleepOnExit:0000000000000018 $d
     /tmp/ccBF0cvy.s:593    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/ccBF0cvy.s:600    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccBF0cvy.s:627    .text.HAL_PWR_EnableSEVOnPend:0000000000000018 $d
     /tmp/ccBF0cvy.s:632    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/ccBF0cvy.s:639    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccBF0cvy.s:666    .text.HAL_PWR_DisableSEVOnPend:0000000000000018 $d
                           .group:0000000000000000 wm4.0.b7c3d577b02d87ac381ee43eef398462
                           .group:0000000000000000 wm4.main.h.42.3939338cba6ab0a8b761d08be8206d51
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.b0c07d2233f75e3b04f03d95093d88ca
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
ARM GAS  /tmp/ccBF0cvy.s 			page 29


                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart.h.38.e5eada3cdf37ca88de33bd21ddd21a5e
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart_ex.h.38.9430c2ca5ec832677dbe7308c46115fd
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

NO UNDEFINED SYMBOLS
