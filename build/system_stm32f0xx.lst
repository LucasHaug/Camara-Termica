ARM GAS  /tmp/ccTxCY6n.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f0xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	SystemCoreClock
  16              		.section	.data.SystemCoreClock,"aw",%progbits
  17              		.align	2
  20              	SystemCoreClock:
  21 0000 00127A00 		.word	8000000
  22              		.global	AHBPrescTable
  23              		.section	.rodata.AHBPrescTable,"a",%progbits
  24              		.align	2
  27              	AHBPrescTable:
  28 0000 00       		.byte	0
  29 0001 00       		.byte	0
  30 0002 00       		.byte	0
  31 0003 00       		.byte	0
  32 0004 00       		.byte	0
  33 0005 00       		.byte	0
  34 0006 00       		.byte	0
  35 0007 00       		.byte	0
  36 0008 01       		.byte	1
  37 0009 02       		.byte	2
  38 000a 03       		.byte	3
  39 000b 04       		.byte	4
  40 000c 06       		.byte	6
  41 000d 07       		.byte	7
  42 000e 08       		.byte	8
  43 000f 09       		.byte	9
  44              		.global	APBPrescTable
  45              		.section	.rodata.APBPrescTable,"a",%progbits
  46              		.align	2
  49              	APBPrescTable:
  50 0000 00       		.byte	0
  51 0001 00       		.byte	0
  52 0002 00       		.byte	0
  53 0003 00       		.byte	0
  54 0004 01       		.byte	1
  55 0005 02       		.byte	2
  56 0006 03       		.byte	3
  57 0007 04       		.byte	4
  58              		.section	.text.SystemInit,"ax",%progbits
  59              		.align	1
  60              		.global	SystemInit
  61              		.syntax unified
  62              		.code	16
  63              		.thumb_func
ARM GAS  /tmp/ccTxCY6n.s 			page 2


  64              		.fpu softvfp
  66              	SystemInit:
  67              	.LFB37:
  68              		.file 1 "cube/Src/system_stm32f0xx.c"
   1:cube/Src/system_stm32f0xx.c **** /**
   2:cube/Src/system_stm32f0xx.c ****   ******************************************************************************
   3:cube/Src/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:cube/Src/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:cube/Src/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   6:cube/Src/system_stm32f0xx.c ****   *
   7:cube/Src/system_stm32f0xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:cube/Src/system_stm32f0xx.c ****   *    user application:
   9:cube/Src/system_stm32f0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:cube/Src/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  11:cube/Src/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  12:cube/Src/system_stm32f0xx.c ****   *
  13:cube/Src/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:cube/Src/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick
  15:cube/Src/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  16:cube/Src/system_stm32f0xx.c ****   *
  17:cube/Src/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:cube/Src/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  19:cube/Src/system_stm32f0xx.c ****   *                                 during program execution.
  20:cube/Src/system_stm32f0xx.c ****   *
  21:cube/Src/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:cube/Src/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  23:cube/Src/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  24:cube/Src/system_stm32f0xx.c ****   *
  25:cube/Src/system_stm32f0xx.c ****   * 3. This file configures the system clock as follows:
  26:cube/Src/system_stm32f0xx.c ****   *=============================================================================
  27:cube/Src/system_stm32f0xx.c ****   *                         Supported STM32F0xx device
  28:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  29:cube/Src/system_stm32f0xx.c ****   *        System Clock source                    | HSI
  30:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  31:cube/Src/system_stm32f0xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  33:cube/Src/system_stm32f0xx.c ****   *        HCLK(Hz)                               | 8000000
  34:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  35:cube/Src/system_stm32f0xx.c ****   *        AHB Prescaler                          | 1
  36:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  37:cube/Src/system_stm32f0xx.c ****   *        APB1 Prescaler                         | 1
  38:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  39:cube/Src/system_stm32f0xx.c ****   *=============================================================================
  40:cube/Src/system_stm32f0xx.c ****   ******************************************************************************
  41:cube/Src/system_stm32f0xx.c ****   * @attention
  42:cube/Src/system_stm32f0xx.c ****   *
  43:cube/Src/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:cube/Src/system_stm32f0xx.c ****   *
  45:cube/Src/system_stm32f0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:cube/Src/system_stm32f0xx.c ****   * are permitted provided that the following conditions are met:
  47:cube/Src/system_stm32f0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:cube/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer.
  49:cube/Src/system_stm32f0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:cube/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:cube/Src/system_stm32f0xx.c ****   *      and/or other materials provided with the distribution.
  52:cube/Src/system_stm32f0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:cube/Src/system_stm32f0xx.c ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /tmp/ccTxCY6n.s 			page 3


  54:cube/Src/system_stm32f0xx.c ****   *      without specific prior written permission.
  55:cube/Src/system_stm32f0xx.c ****   *
  56:cube/Src/system_stm32f0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:cube/Src/system_stm32f0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:cube/Src/system_stm32f0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:cube/Src/system_stm32f0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:cube/Src/system_stm32f0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:cube/Src/system_stm32f0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:cube/Src/system_stm32f0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:cube/Src/system_stm32f0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:cube/Src/system_stm32f0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:cube/Src/system_stm32f0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:cube/Src/system_stm32f0xx.c ****   *
  67:cube/Src/system_stm32f0xx.c ****   ******************************************************************************
  68:cube/Src/system_stm32f0xx.c ****   */
  69:cube/Src/system_stm32f0xx.c **** 
  70:cube/Src/system_stm32f0xx.c **** /** @addtogroup CMSIS
  71:cube/Src/system_stm32f0xx.c ****   * @{
  72:cube/Src/system_stm32f0xx.c ****   */
  73:cube/Src/system_stm32f0xx.c **** 
  74:cube/Src/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  75:cube/Src/system_stm32f0xx.c ****   * @{
  76:cube/Src/system_stm32f0xx.c ****   */
  77:cube/Src/system_stm32f0xx.c **** 
  78:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  79:cube/Src/system_stm32f0xx.c ****   * @{
  80:cube/Src/system_stm32f0xx.c ****   */
  81:cube/Src/system_stm32f0xx.c **** 
  82:cube/Src/system_stm32f0xx.c **** #include "stm32f0xx.h"
  83:cube/Src/system_stm32f0xx.c **** 
  84:cube/Src/system_stm32f0xx.c **** /**
  85:cube/Src/system_stm32f0xx.c ****   * @}
  86:cube/Src/system_stm32f0xx.c ****   */
  87:cube/Src/system_stm32f0xx.c **** 
  88:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
  89:cube/Src/system_stm32f0xx.c ****   * @{
  90:cube/Src/system_stm32f0xx.c ****   */
  91:cube/Src/system_stm32f0xx.c **** 
  92:cube/Src/system_stm32f0xx.c **** /**
  93:cube/Src/system_stm32f0xx.c ****   * @}
  94:cube/Src/system_stm32f0xx.c ****   */
  95:cube/Src/system_stm32f0xx.c **** 
  96:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
  97:cube/Src/system_stm32f0xx.c ****   * @{
  98:cube/Src/system_stm32f0xx.c ****   */
  99:cube/Src/system_stm32f0xx.c **** #if !defined  (HSE_VALUE) 
 100:cube/Src/system_stm32f0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 101:cube/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 102:cube/Src/system_stm32f0xx.c **** #endif /* HSE_VALUE */
 103:cube/Src/system_stm32f0xx.c **** 
 104:cube/Src/system_stm32f0xx.c **** #if !defined  (HSI_VALUE)
 105:cube/Src/system_stm32f0xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 106:cube/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 107:cube/Src/system_stm32f0xx.c **** #endif /* HSI_VALUE */
 108:cube/Src/system_stm32f0xx.c **** 
 109:cube/Src/system_stm32f0xx.c **** #if !defined (HSI48_VALUE)
 110:cube/Src/system_stm32f0xx.c **** #define HSI48_VALUE    ((uint32_t)48000000) /*!< Default value of the HSI48 Internal oscillator in 
ARM GAS  /tmp/ccTxCY6n.s 			page 4


 111:cube/Src/system_stm32f0xx.c ****                                                  This value can be provided and adapted by the user
 112:cube/Src/system_stm32f0xx.c **** #endif /* HSI48_VALUE */
 113:cube/Src/system_stm32f0xx.c **** /**
 114:cube/Src/system_stm32f0xx.c ****   * @}
 115:cube/Src/system_stm32f0xx.c ****   */
 116:cube/Src/system_stm32f0xx.c **** 
 117:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 118:cube/Src/system_stm32f0xx.c ****   * @{
 119:cube/Src/system_stm32f0xx.c ****   */
 120:cube/Src/system_stm32f0xx.c **** 
 121:cube/Src/system_stm32f0xx.c **** /**
 122:cube/Src/system_stm32f0xx.c ****   * @}
 123:cube/Src/system_stm32f0xx.c ****   */
 124:cube/Src/system_stm32f0xx.c **** 
 125:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 126:cube/Src/system_stm32f0xx.c ****   * @{
 127:cube/Src/system_stm32f0xx.c ****   */
 128:cube/Src/system_stm32f0xx.c ****   /* This variable is updated in three ways:
 129:cube/Src/system_stm32f0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 130:cube/Src/system_stm32f0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 131:cube/Src/system_stm32f0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 132:cube/Src/system_stm32f0xx.c ****          Note: If you use this function to configure the system clock there is no need to
 133:cube/Src/system_stm32f0xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 134:cube/Src/system_stm32f0xx.c ****                updated automatically.
 135:cube/Src/system_stm32f0xx.c ****   */
 136:cube/Src/system_stm32f0xx.c **** uint32_t SystemCoreClock = 8000000;
 137:cube/Src/system_stm32f0xx.c **** 
 138:cube/Src/system_stm32f0xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 139:cube/Src/system_stm32f0xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 140:cube/Src/system_stm32f0xx.c **** 
 141:cube/Src/system_stm32f0xx.c **** /**
 142:cube/Src/system_stm32f0xx.c ****   * @}
 143:cube/Src/system_stm32f0xx.c ****   */
 144:cube/Src/system_stm32f0xx.c **** 
 145:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
 146:cube/Src/system_stm32f0xx.c ****   * @{
 147:cube/Src/system_stm32f0xx.c ****   */
 148:cube/Src/system_stm32f0xx.c **** 
 149:cube/Src/system_stm32f0xx.c **** /**
 150:cube/Src/system_stm32f0xx.c ****   * @}
 151:cube/Src/system_stm32f0xx.c ****   */
 152:cube/Src/system_stm32f0xx.c **** 
 153:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 154:cube/Src/system_stm32f0xx.c ****   * @{
 155:cube/Src/system_stm32f0xx.c ****   */
 156:cube/Src/system_stm32f0xx.c **** 
 157:cube/Src/system_stm32f0xx.c **** /**
 158:cube/Src/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 159:cube/Src/system_stm32f0xx.c ****   *         Initialize the default HSI clock source, vector table location and the PLL configuratio
 160:cube/Src/system_stm32f0xx.c ****   * @param  None
 161:cube/Src/system_stm32f0xx.c ****   * @retval None
 162:cube/Src/system_stm32f0xx.c ****   */
 163:cube/Src/system_stm32f0xx.c **** void SystemInit(void)
 164:cube/Src/system_stm32f0xx.c **** {
  69              		.loc 1 164 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTxCY6n.s 			page 5


  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 00AF     		add	r7, sp, #0
  78              		.cfi_def_cfa_register 7
 165:cube/Src/system_stm32f0xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 166:cube/Src/system_stm32f0xx.c ****   /* Set HSION bit */
 167:cube/Src/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001U;
  79              		.loc 1 167 0
  80 0004 1A4B     		ldr	r3, .L2
  81 0006 1A68     		ldr	r2, [r3]
  82 0008 194B     		ldr	r3, .L2
  83 000a 0121     		movs	r1, #1
  84 000c 0A43     		orrs	r2, r1
  85 000e 1A60     		str	r2, [r3]
 168:cube/Src/system_stm32f0xx.c **** 
 169:cube/Src/system_stm32f0xx.c **** #if defined (STM32F051x8) || defined (STM32F058x8)
 170:cube/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 171:cube/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 172:cube/Src/system_stm32f0xx.c **** #else
 173:cube/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 174:cube/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80CU;
  86              		.loc 1 174 0
  87 0010 174B     		ldr	r3, .L2
  88 0012 5A68     		ldr	r2, [r3, #4]
  89 0014 164B     		ldr	r3, .L2
  90 0016 1749     		ldr	r1, .L2+4
  91 0018 0A40     		ands	r2, r1
  92 001a 5A60     		str	r2, [r3, #4]
 175:cube/Src/system_stm32f0xx.c **** #endif /* STM32F051x8 or STM32F058x8 */
 176:cube/Src/system_stm32f0xx.c ****   
 177:cube/Src/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 178:cube/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFFU;
  93              		.loc 1 178 0
  94 001c 144B     		ldr	r3, .L2
  95 001e 1A68     		ldr	r2, [r3]
  96 0020 134B     		ldr	r3, .L2
  97 0022 1549     		ldr	r1, .L2+8
  98 0024 0A40     		ands	r2, r1
  99 0026 1A60     		str	r2, [r3]
 179:cube/Src/system_stm32f0xx.c **** 
 180:cube/Src/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 181:cube/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
 100              		.loc 1 181 0
 101 0028 114B     		ldr	r3, .L2
 102 002a 1A68     		ldr	r2, [r3]
 103 002c 104B     		ldr	r3, .L2
 104 002e 1349     		ldr	r1, .L2+12
 105 0030 0A40     		ands	r2, r1
 106 0032 1A60     		str	r2, [r3]
 182:cube/Src/system_stm32f0xx.c **** 
 183:cube/Src/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 184:cube/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 107              		.loc 1 184 0
 108 0034 0E4B     		ldr	r3, .L2
ARM GAS  /tmp/ccTxCY6n.s 			page 6


 109 0036 5A68     		ldr	r2, [r3, #4]
 110 0038 0D4B     		ldr	r3, .L2
 111 003a 1149     		ldr	r1, .L2+16
 112 003c 0A40     		ands	r2, r1
 113 003e 5A60     		str	r2, [r3, #4]
 185:cube/Src/system_stm32f0xx.c **** 
 186:cube/Src/system_stm32f0xx.c ****   /* Reset PREDIV[3:0] bits */
 187:cube/Src/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 114              		.loc 1 187 0
 115 0040 0B4B     		ldr	r3, .L2
 116 0042 DA6A     		ldr	r2, [r3, #44]
 117 0044 0A4B     		ldr	r3, .L2
 118 0046 0F21     		movs	r1, #15
 119 0048 8A43     		bics	r2, r1
 120 004a DA62     		str	r2, [r3, #44]
 188:cube/Src/system_stm32f0xx.c **** 
 189:cube/Src/system_stm32f0xx.c **** #if defined (STM32F072xB) || defined (STM32F078xx)
 190:cube/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 191:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 121              		.loc 1 191 0
 122 004c 084B     		ldr	r3, .L2
 123 004e 1A6B     		ldr	r2, [r3, #48]
 124 0050 074B     		ldr	r3, .L2
 125 0052 0C49     		ldr	r1, .L2+20
 126 0054 0A40     		ands	r2, r1
 127 0056 1A63     		str	r2, [r3, #48]
 192:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F071xB)
 193:cube/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 194:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
 195:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F091xC) || defined (STM32F098xx)
 196:cube/Src/system_stm32f0xx.c ****   /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 197:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 198:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038
 199:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
 200:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 201:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F051x8) || defined (STM32F058xx)
 202:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 203:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 204:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F042x6) || defined (STM32F048xx)
 205:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 206:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 207:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F070x6) || defined (STM32F070xB)
 208:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
 209:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 210:cube/Src/system_stm32f0xx.c ****   /* Set default USB clock to PLLCLK, since there is no HSI48 */
 211:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 |= (uint32_t)0x00000080U;  
 212:cube/Src/system_stm32f0xx.c **** #else
 213:cube/Src/system_stm32f0xx.c ****  #warning "No target selected"
 214:cube/Src/system_stm32f0xx.c **** #endif
 215:cube/Src/system_stm32f0xx.c **** 
 216:cube/Src/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 217:cube/Src/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 128              		.loc 1 217 0
 129 0058 054B     		ldr	r3, .L2
 130 005a 5A6B     		ldr	r2, [r3, #52]
 131 005c 044B     		ldr	r3, .L2
 132 005e 0121     		movs	r1, #1
ARM GAS  /tmp/ccTxCY6n.s 			page 7


 133 0060 8A43     		bics	r2, r1
 134 0062 5A63     		str	r2, [r3, #52]
 218:cube/Src/system_stm32f0xx.c **** 
 219:cube/Src/system_stm32f0xx.c ****   /* Disable all interrupts */
 220:cube/Src/system_stm32f0xx.c ****   RCC->CIR = 0x00000000U;
 135              		.loc 1 220 0
 136 0064 024B     		ldr	r3, .L2
 137 0066 0022     		movs	r2, #0
 138 0068 9A60     		str	r2, [r3, #8]
 221:cube/Src/system_stm32f0xx.c **** 
 222:cube/Src/system_stm32f0xx.c **** }
 139              		.loc 1 222 0
 140 006a C046     		nop
 141 006c BD46     		mov	sp, r7
 142              		@ sp needed
 143 006e 80BD     		pop	{r7, pc}
 144              	.L3:
 145              		.align	2
 146              	.L2:
 147 0070 00100240 		.word	1073876992
 148 0074 0CB8FF08 		.word	150976524
 149 0078 FFFFF6FE 		.word	-17367041
 150 007c FFFFFBFF 		.word	-262145
 151 0080 FFFFC0FF 		.word	-4128769
 152 0084 2CFEFCFF 		.word	-197076
 153              		.cfi_endproc
 154              	.LFE37:
 156              		.global	__aeabi_uidiv
 157              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 158              		.align	1
 159              		.global	SystemCoreClockUpdate
 160              		.syntax unified
 161              		.code	16
 162              		.thumb_func
 163              		.fpu softvfp
 165              	SystemCoreClockUpdate:
 166              	.LFB38:
 223:cube/Src/system_stm32f0xx.c **** 
 224:cube/Src/system_stm32f0xx.c **** /**
 225:cube/Src/system_stm32f0xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 226:cube/Src/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 227:cube/Src/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 228:cube/Src/system_stm32f0xx.c ****   *         other parameters.
 229:cube/Src/system_stm32f0xx.c ****   *
 230:cube/Src/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 231:cube/Src/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 232:cube/Src/system_stm32f0xx.c ****   *         based on this variable will be incorrect.
 233:cube/Src/system_stm32f0xx.c ****   *
 234:cube/Src/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real
 235:cube/Src/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 236:cube/Src/system_stm32f0xx.c ****   *           constant and the selected clock source:
 237:cube/Src/system_stm32f0xx.c ****   *
 238:cube/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 239:cube/Src/system_stm32f0xx.c ****   *
 240:cube/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 241:cube/Src/system_stm32f0xx.c ****   *
 242:cube/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
ARM GAS  /tmp/ccTxCY6n.s 			page 8


 243:cube/Src/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 244:cube/Src/system_stm32f0xx.c ****   *
 245:cube/Src/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 246:cube/Src/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 247:cube/Src/system_stm32f0xx.c ****   *             in voltage and temperature.
 248:cube/Src/system_stm32f0xx.c ****   *
 249:cube/Src/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 250:cube/Src/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 251:cube/Src/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 252:cube/Src/system_stm32f0xx.c ****   *              have wrong result.
 253:cube/Src/system_stm32f0xx.c ****   *
 254:cube/Src/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 255:cube/Src/system_stm32f0xx.c ****   *           value for HSE crystal.
 256:cube/Src/system_stm32f0xx.c ****   *
 257:cube/Src/system_stm32f0xx.c ****   * @param  None
 258:cube/Src/system_stm32f0xx.c ****   * @retval None
 259:cube/Src/system_stm32f0xx.c ****   */
 260:cube/Src/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 261:cube/Src/system_stm32f0xx.c **** {
 167              		.loc 1 261 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 16
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171 0000 80B5     		push	{r7, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 7, -8
 174              		.cfi_offset 14, -4
 175 0002 84B0     		sub	sp, sp, #16
 176              		.cfi_def_cfa_offset 24
 177 0004 00AF     		add	r7, sp, #0
 178              		.cfi_def_cfa_register 7
 262:cube/Src/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 179              		.loc 1 262 0
 180 0006 0023     		movs	r3, #0
 181 0008 FB60     		str	r3, [r7, #12]
 182 000a 0023     		movs	r3, #0
 183 000c BB60     		str	r3, [r7, #8]
 184 000e 0023     		movs	r3, #0
 185 0010 7B60     		str	r3, [r7, #4]
 186 0012 0023     		movs	r3, #0
 187 0014 3B60     		str	r3, [r7]
 263:cube/Src/system_stm32f0xx.c **** 
 264:cube/Src/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 265:cube/Src/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 188              		.loc 1 265 0
 189 0016 354B     		ldr	r3, .L14
 190 0018 5B68     		ldr	r3, [r3, #4]
 191 001a 0C22     		movs	r2, #12
 192 001c 1340     		ands	r3, r2
 193 001e FB60     		str	r3, [r7, #12]
 266:cube/Src/system_stm32f0xx.c **** 
 267:cube/Src/system_stm32f0xx.c ****   switch (tmp)
 194              		.loc 1 267 0
 195 0020 FB68     		ldr	r3, [r7, #12]
 196 0022 042B     		cmp	r3, #4
 197 0024 07D0     		beq	.L6
 198 0026 082B     		cmp	r3, #8
ARM GAS  /tmp/ccTxCY6n.s 			page 9


 199 0028 09D0     		beq	.L7
 200 002a 002B     		cmp	r3, #0
 201 002c 48D1     		bne	.L13
 268:cube/Src/system_stm32f0xx.c ****   {
 269:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 270:cube/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 202              		.loc 1 270 0
 203 002e 304B     		ldr	r3, .L14+4
 204 0030 304A     		ldr	r2, .L14+8
 205 0032 1A60     		str	r2, [r3]
 271:cube/Src/system_stm32f0xx.c ****       break;
 206              		.loc 1 271 0
 207 0034 48E0     		b	.L9
 208              	.L6:
 272:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 273:cube/Src/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 209              		.loc 1 273 0
 210 0036 2E4B     		ldr	r3, .L14+4
 211 0038 2E4A     		ldr	r2, .L14+8
 212 003a 1A60     		str	r2, [r3]
 274:cube/Src/system_stm32f0xx.c ****       break;
 213              		.loc 1 274 0
 214 003c 44E0     		b	.L9
 215              	.L7:
 275:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 276:cube/Src/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 277:cube/Src/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 216              		.loc 1 277 0
 217 003e 2B4B     		ldr	r3, .L14
 218 0040 5A68     		ldr	r2, [r3, #4]
 219 0042 F023     		movs	r3, #240
 220 0044 9B03     		lsls	r3, r3, #14
 221 0046 1340     		ands	r3, r2
 222 0048 BB60     		str	r3, [r7, #8]
 278:cube/Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 223              		.loc 1 278 0
 224 004a 284B     		ldr	r3, .L14
 225 004c 5A68     		ldr	r2, [r3, #4]
 226 004e C023     		movs	r3, #192
 227 0050 5B02     		lsls	r3, r3, #9
 228 0052 1340     		ands	r3, r2
 229 0054 7B60     		str	r3, [r7, #4]
 279:cube/Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 230              		.loc 1 279 0
 231 0056 BB68     		ldr	r3, [r7, #8]
 232 0058 9B0C     		lsrs	r3, r3, #18
 233 005a 0233     		adds	r3, r3, #2
 234 005c BB60     		str	r3, [r7, #8]
 280:cube/Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 235              		.loc 1 280 0
 236 005e 234B     		ldr	r3, .L14
 237 0060 DB6A     		ldr	r3, [r3, #44]
 238 0062 0F22     		movs	r2, #15
 239 0064 1340     		ands	r3, r2
 240 0066 0133     		adds	r3, r3, #1
 241 0068 3B60     		str	r3, [r7]
 281:cube/Src/system_stm32f0xx.c **** 
ARM GAS  /tmp/ccTxCY6n.s 			page 10


 282:cube/Src/system_stm32f0xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 242              		.loc 1 282 0
 243 006a 7A68     		ldr	r2, [r7, #4]
 244 006c 8023     		movs	r3, #128
 245 006e 5B02     		lsls	r3, r3, #9
 246 0070 9A42     		cmp	r2, r3
 247 0072 0AD1     		bne	.L10
 283:cube/Src/system_stm32f0xx.c ****       {
 284:cube/Src/system_stm32f0xx.c ****         /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
 285:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 248              		.loc 1 285 0
 249 0074 3968     		ldr	r1, [r7]
 250 0076 1F48     		ldr	r0, .L14+8
 251 0078 FFF7FEFF 		bl	__aeabi_uidiv
 252              	.LVL0:
 253 007c 0300     		movs	r3, r0
 254 007e 1A00     		movs	r2, r3
 255 0080 BB68     		ldr	r3, [r7, #8]
 256 0082 5A43     		muls	r2, r3
 257 0084 1A4B     		ldr	r3, .L14+4
 258 0086 1A60     		str	r2, [r3]
 286:cube/Src/system_stm32f0xx.c ****       }
 287:cube/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) ||
 288:cube/Src/system_stm32f0xx.c ****       else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 289:cube/Src/system_stm32f0xx.c ****       {
 290:cube/Src/system_stm32f0xx.c ****         /* HSI48 used as PLL clock source : SystemCoreClock = HSI48/PREDIV * PLLMUL */
 291:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 292:cube/Src/system_stm32f0xx.c ****       }
 293:cube/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx */
 294:cube/Src/system_stm32f0xx.c ****       else
 295:cube/Src/system_stm32f0xx.c ****       {
 296:cube/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx)  || defined(STM32F070x6) \
 297:cube/Src/system_stm32f0xx.c ****  || defined(STM32F078xx) || defined(STM32F071xB)  || defined(STM32F072xB) \
 298:cube/Src/system_stm32f0xx.c ****  || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx)  || defined(STM32F030xC)
 299:cube/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/PREDIV * PLLMUL */
 300:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 301:cube/Src/system_stm32f0xx.c **** #else
 302:cube/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/2 * PLLMUL */
 303:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 304:cube/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
 305:cube/Src/system_stm32f0xx.c ****           STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
 306:cube/Src/system_stm32f0xx.c ****           STM32F091xC || STM32F098xx || STM32F030xC */
 307:cube/Src/system_stm32f0xx.c ****       }
 308:cube/Src/system_stm32f0xx.c ****       break;
 259              		.loc 1 308 0
 260 0088 1EE0     		b	.L9
 261              	.L10:
 288:cube/Src/system_stm32f0xx.c ****       {
 262              		.loc 1 288 0
 263 008a 7A68     		ldr	r2, [r7, #4]
 264 008c C023     		movs	r3, #192
 265 008e 5B02     		lsls	r3, r3, #9
 266 0090 9A42     		cmp	r2, r3
 267 0092 0AD1     		bne	.L12
 291:cube/Src/system_stm32f0xx.c ****       }
 268              		.loc 1 291 0
 269 0094 3968     		ldr	r1, [r7]
ARM GAS  /tmp/ccTxCY6n.s 			page 11


 270 0096 1848     		ldr	r0, .L14+12
 271 0098 FFF7FEFF 		bl	__aeabi_uidiv
 272              	.LVL1:
 273 009c 0300     		movs	r3, r0
 274 009e 1A00     		movs	r2, r3
 275 00a0 BB68     		ldr	r3, [r7, #8]
 276 00a2 5A43     		muls	r2, r3
 277 00a4 124B     		ldr	r3, .L14+4
 278 00a6 1A60     		str	r2, [r3]
 279              		.loc 1 308 0
 280 00a8 0EE0     		b	.L9
 281              	.L12:
 300:cube/Src/system_stm32f0xx.c **** #else
 282              		.loc 1 300 0
 283 00aa 3968     		ldr	r1, [r7]
 284 00ac 1148     		ldr	r0, .L14+8
 285 00ae FFF7FEFF 		bl	__aeabi_uidiv
 286              	.LVL2:
 287 00b2 0300     		movs	r3, r0
 288 00b4 1A00     		movs	r2, r3
 289 00b6 BB68     		ldr	r3, [r7, #8]
 290 00b8 5A43     		muls	r2, r3
 291 00ba 0D4B     		ldr	r3, .L14+4
 292 00bc 1A60     		str	r2, [r3]
 293              		.loc 1 308 0
 294 00be 03E0     		b	.L9
 295              	.L13:
 309:cube/Src/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 310:cube/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 296              		.loc 1 310 0
 297 00c0 0B4B     		ldr	r3, .L14+4
 298 00c2 0C4A     		ldr	r2, .L14+8
 299 00c4 1A60     		str	r2, [r3]
 311:cube/Src/system_stm32f0xx.c ****       break;
 300              		.loc 1 311 0
 301 00c6 C046     		nop
 302              	.L9:
 312:cube/Src/system_stm32f0xx.c ****   }
 313:cube/Src/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 314:cube/Src/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 315:cube/Src/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 303              		.loc 1 315 0
 304 00c8 084B     		ldr	r3, .L14
 305 00ca 5B68     		ldr	r3, [r3, #4]
 306 00cc 1B09     		lsrs	r3, r3, #4
 307 00ce 0F22     		movs	r2, #15
 308 00d0 1340     		ands	r3, r2
 309 00d2 0A4A     		ldr	r2, .L14+16
 310 00d4 D35C     		ldrb	r3, [r2, r3]
 311 00d6 FB60     		str	r3, [r7, #12]
 316:cube/Src/system_stm32f0xx.c ****   /* HCLK clock frequency */
 317:cube/Src/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;
 312              		.loc 1 317 0
 313 00d8 054B     		ldr	r3, .L14+4
 314 00da 1A68     		ldr	r2, [r3]
 315 00dc FB68     		ldr	r3, [r7, #12]
 316 00de DA40     		lsrs	r2, r2, r3
ARM GAS  /tmp/ccTxCY6n.s 			page 12


 317 00e0 034B     		ldr	r3, .L14+4
 318 00e2 1A60     		str	r2, [r3]
 318:cube/Src/system_stm32f0xx.c **** }
 319              		.loc 1 318 0
 320 00e4 C046     		nop
 321 00e6 BD46     		mov	sp, r7
 322 00e8 04B0     		add	sp, sp, #16
 323              		@ sp needed
 324 00ea 80BD     		pop	{r7, pc}
 325              	.L15:
 326              		.align	2
 327              	.L14:
 328 00ec 00100240 		.word	1073876992
 329 00f0 00000000 		.word	SystemCoreClock
 330 00f4 00127A00 		.word	8000000
 331 00f8 006CDC02 		.word	48000000
 332 00fc 00000000 		.word	AHBPrescTable
 333              		.cfi_endproc
 334              	.LFE38:
 336              		.text
 337              	.Letext0:
 338              		.file 2 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine
 339              		.file 3 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_st
 340              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 341              		.file 5 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 342              		.file 6 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/loc
 343              		.file 7 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_ty
 344              		.file 8 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/i
 345              		.file 9 "/home/lhaug/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/ree
ARM GAS  /tmp/ccTxCY6n.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f0xx.c
     /tmp/ccTxCY6n.s:20     .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccTxCY6n.s:17     .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccTxCY6n.s:27     .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccTxCY6n.s:24     .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccTxCY6n.s:49     .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccTxCY6n.s:46     .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccTxCY6n.s:59     .text.SystemInit:0000000000000000 $t
     /tmp/ccTxCY6n.s:66     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccTxCY6n.s:147    .text.SystemInit:0000000000000070 $d
     /tmp/ccTxCY6n.s:158    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccTxCY6n.s:165    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccTxCY6n.s:328    .text.SystemCoreClockUpdate:00000000000000ec $d
                           .group:0000000000000000 wm4.0.b7c3d577b02d87ac381ee43eef398462
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.main.h.42.3939338cba6ab0a8b761d08be8206d51
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.b0c07d2233f75e3b04f03d95093d88ca
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
ARM GAS  /tmp/ccTxCY6n.s 			page 14


                           .group:0000000000000000 wm4.stm32f0xx_hal_adc.h.38.e3e4bca0d8b91dc0f73ca672bc0e5aca
                           .group:0000000000000000 wm4.stm32f0xx_hal_adc_ex.h.38.79c684f1976d63630feab98f4d82be4a
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim.h.38.42f3ee0b54a54fc44c665553058edb38
                           .group:0000000000000000 wm4.stm32f0xx_hal_tim_ex.h.38.12cd16a4e412877272e70689edb6b518
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart.h.38.e5eada3cdf37ca88de33bd21ddd21a5e
                           .group:0000000000000000 wm4.stm32f0xx_hal_uart_ex.h.38.9430c2ca5ec832677dbe7308c46115fd
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

UNDEFINED SYMBOLS
__aeabi_uidiv
