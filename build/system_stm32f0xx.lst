ARM GAS  /tmp/ccsPfFYu.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f0xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemInit,"ax",%progbits
  16              		.align	1
  17              		.global	SystemInit
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SystemInit:
  24              	.LFB37:
  25              		.file 1 "cube/Src/system_stm32f0xx.c"
   1:cube/Src/system_stm32f0xx.c **** /**
   2:cube/Src/system_stm32f0xx.c ****   ******************************************************************************
   3:cube/Src/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:cube/Src/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:cube/Src/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   6:cube/Src/system_stm32f0xx.c ****   *
   7:cube/Src/system_stm32f0xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:cube/Src/system_stm32f0xx.c ****   *    user application:
   9:cube/Src/system_stm32f0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:cube/Src/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  11:cube/Src/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  12:cube/Src/system_stm32f0xx.c ****   *
  13:cube/Src/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:cube/Src/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick
  15:cube/Src/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  16:cube/Src/system_stm32f0xx.c ****   *
  17:cube/Src/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:cube/Src/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  19:cube/Src/system_stm32f0xx.c ****   *                                 during program execution.
  20:cube/Src/system_stm32f0xx.c ****   *
  21:cube/Src/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:cube/Src/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  23:cube/Src/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  24:cube/Src/system_stm32f0xx.c ****   *
  25:cube/Src/system_stm32f0xx.c ****   * 3. This file configures the system clock as follows:
  26:cube/Src/system_stm32f0xx.c ****   *=============================================================================
  27:cube/Src/system_stm32f0xx.c ****   *                         Supported STM32F0xx device
  28:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  29:cube/Src/system_stm32f0xx.c ****   *        System Clock source                    | HSI
  30:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  31:cube/Src/system_stm32f0xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  33:cube/Src/system_stm32f0xx.c ****   *        HCLK(Hz)                               | 8000000
ARM GAS  /tmp/ccsPfFYu.s 			page 2


  34:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  35:cube/Src/system_stm32f0xx.c ****   *        AHB Prescaler                          | 1
  36:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  37:cube/Src/system_stm32f0xx.c ****   *        APB1 Prescaler                         | 1
  38:cube/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  39:cube/Src/system_stm32f0xx.c ****   *=============================================================================
  40:cube/Src/system_stm32f0xx.c ****   ******************************************************************************
  41:cube/Src/system_stm32f0xx.c ****   * @attention
  42:cube/Src/system_stm32f0xx.c ****   *
  43:cube/Src/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:cube/Src/system_stm32f0xx.c ****   *
  45:cube/Src/system_stm32f0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:cube/Src/system_stm32f0xx.c ****   * are permitted provided that the following conditions are met:
  47:cube/Src/system_stm32f0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:cube/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer.
  49:cube/Src/system_stm32f0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:cube/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:cube/Src/system_stm32f0xx.c ****   *      and/or other materials provided with the distribution.
  52:cube/Src/system_stm32f0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:cube/Src/system_stm32f0xx.c ****   *      may be used to endorse or promote products derived from this software
  54:cube/Src/system_stm32f0xx.c ****   *      without specific prior written permission.
  55:cube/Src/system_stm32f0xx.c ****   *
  56:cube/Src/system_stm32f0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:cube/Src/system_stm32f0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:cube/Src/system_stm32f0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:cube/Src/system_stm32f0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:cube/Src/system_stm32f0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:cube/Src/system_stm32f0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:cube/Src/system_stm32f0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:cube/Src/system_stm32f0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:cube/Src/system_stm32f0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:cube/Src/system_stm32f0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:cube/Src/system_stm32f0xx.c ****   *
  67:cube/Src/system_stm32f0xx.c ****   ******************************************************************************
  68:cube/Src/system_stm32f0xx.c ****   */
  69:cube/Src/system_stm32f0xx.c **** 
  70:cube/Src/system_stm32f0xx.c **** /** @addtogroup CMSIS
  71:cube/Src/system_stm32f0xx.c ****   * @{
  72:cube/Src/system_stm32f0xx.c ****   */
  73:cube/Src/system_stm32f0xx.c **** 
  74:cube/Src/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  75:cube/Src/system_stm32f0xx.c ****   * @{
  76:cube/Src/system_stm32f0xx.c ****   */
  77:cube/Src/system_stm32f0xx.c **** 
  78:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  79:cube/Src/system_stm32f0xx.c ****   * @{
  80:cube/Src/system_stm32f0xx.c ****   */
  81:cube/Src/system_stm32f0xx.c **** 
  82:cube/Src/system_stm32f0xx.c **** #include "stm32f0xx.h"
  83:cube/Src/system_stm32f0xx.c **** 
  84:cube/Src/system_stm32f0xx.c **** /**
  85:cube/Src/system_stm32f0xx.c ****   * @}
  86:cube/Src/system_stm32f0xx.c ****   */
  87:cube/Src/system_stm32f0xx.c **** 
  88:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
  89:cube/Src/system_stm32f0xx.c ****   * @{
  90:cube/Src/system_stm32f0xx.c ****   */
ARM GAS  /tmp/ccsPfFYu.s 			page 3


  91:cube/Src/system_stm32f0xx.c **** 
  92:cube/Src/system_stm32f0xx.c **** /**
  93:cube/Src/system_stm32f0xx.c ****   * @}
  94:cube/Src/system_stm32f0xx.c ****   */
  95:cube/Src/system_stm32f0xx.c **** 
  96:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
  97:cube/Src/system_stm32f0xx.c ****   * @{
  98:cube/Src/system_stm32f0xx.c ****   */
  99:cube/Src/system_stm32f0xx.c **** #if !defined  (HSE_VALUE) 
 100:cube/Src/system_stm32f0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 101:cube/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 102:cube/Src/system_stm32f0xx.c **** #endif /* HSE_VALUE */
 103:cube/Src/system_stm32f0xx.c **** 
 104:cube/Src/system_stm32f0xx.c **** #if !defined  (HSI_VALUE)
 105:cube/Src/system_stm32f0xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 106:cube/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 107:cube/Src/system_stm32f0xx.c **** #endif /* HSI_VALUE */
 108:cube/Src/system_stm32f0xx.c **** 
 109:cube/Src/system_stm32f0xx.c **** #if !defined (HSI48_VALUE)
 110:cube/Src/system_stm32f0xx.c **** #define HSI48_VALUE    ((uint32_t)48000000) /*!< Default value of the HSI48 Internal oscillator in 
 111:cube/Src/system_stm32f0xx.c ****                                                  This value can be provided and adapted by the user
 112:cube/Src/system_stm32f0xx.c **** #endif /* HSI48_VALUE */
 113:cube/Src/system_stm32f0xx.c **** /**
 114:cube/Src/system_stm32f0xx.c ****   * @}
 115:cube/Src/system_stm32f0xx.c ****   */
 116:cube/Src/system_stm32f0xx.c **** 
 117:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 118:cube/Src/system_stm32f0xx.c ****   * @{
 119:cube/Src/system_stm32f0xx.c ****   */
 120:cube/Src/system_stm32f0xx.c **** 
 121:cube/Src/system_stm32f0xx.c **** /**
 122:cube/Src/system_stm32f0xx.c ****   * @}
 123:cube/Src/system_stm32f0xx.c ****   */
 124:cube/Src/system_stm32f0xx.c **** 
 125:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 126:cube/Src/system_stm32f0xx.c ****   * @{
 127:cube/Src/system_stm32f0xx.c ****   */
 128:cube/Src/system_stm32f0xx.c ****   /* This variable is updated in three ways:
 129:cube/Src/system_stm32f0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 130:cube/Src/system_stm32f0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 131:cube/Src/system_stm32f0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 132:cube/Src/system_stm32f0xx.c ****          Note: If you use this function to configure the system clock there is no need to
 133:cube/Src/system_stm32f0xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 134:cube/Src/system_stm32f0xx.c ****                updated automatically.
 135:cube/Src/system_stm32f0xx.c ****   */
 136:cube/Src/system_stm32f0xx.c **** uint32_t SystemCoreClock = 8000000;
 137:cube/Src/system_stm32f0xx.c **** 
 138:cube/Src/system_stm32f0xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 139:cube/Src/system_stm32f0xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 140:cube/Src/system_stm32f0xx.c **** 
 141:cube/Src/system_stm32f0xx.c **** /**
 142:cube/Src/system_stm32f0xx.c ****   * @}
 143:cube/Src/system_stm32f0xx.c ****   */
 144:cube/Src/system_stm32f0xx.c **** 
 145:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
 146:cube/Src/system_stm32f0xx.c ****   * @{
 147:cube/Src/system_stm32f0xx.c ****   */
ARM GAS  /tmp/ccsPfFYu.s 			page 4


 148:cube/Src/system_stm32f0xx.c **** 
 149:cube/Src/system_stm32f0xx.c **** /**
 150:cube/Src/system_stm32f0xx.c ****   * @}
 151:cube/Src/system_stm32f0xx.c ****   */
 152:cube/Src/system_stm32f0xx.c **** 
 153:cube/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 154:cube/Src/system_stm32f0xx.c ****   * @{
 155:cube/Src/system_stm32f0xx.c ****   */
 156:cube/Src/system_stm32f0xx.c **** 
 157:cube/Src/system_stm32f0xx.c **** /**
 158:cube/Src/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 159:cube/Src/system_stm32f0xx.c ****   *         Initialize the default HSI clock source, vector table location and the PLL configuratio
 160:cube/Src/system_stm32f0xx.c ****   * @param  None
 161:cube/Src/system_stm32f0xx.c ****   * @retval None
 162:cube/Src/system_stm32f0xx.c ****   */
 163:cube/Src/system_stm32f0xx.c **** void SystemInit(void)
 164:cube/Src/system_stm32f0xx.c **** {
  26              		.loc 1 164 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 165:cube/Src/system_stm32f0xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 166:cube/Src/system_stm32f0xx.c ****   /* Set HSION bit */
 167:cube/Src/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001U;
  31              		.loc 1 167 0
  32 0000 114B     		ldr	r3, .L2
  33 0002 1A68     		ldr	r2, [r3]
  34 0004 0121     		movs	r1, #1
  35 0006 0A43     		orrs	r2, r1
  36 0008 1A60     		str	r2, [r3]
 168:cube/Src/system_stm32f0xx.c **** 
 169:cube/Src/system_stm32f0xx.c **** #if defined (STM32F051x8) || defined (STM32F058x8)
 170:cube/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 171:cube/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 172:cube/Src/system_stm32f0xx.c **** #else
 173:cube/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 174:cube/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80CU;
  37              		.loc 1 174 0
  38 000a 5A68     		ldr	r2, [r3, #4]
  39 000c 0F48     		ldr	r0, .L2+4
  40 000e 0240     		ands	r2, r0
  41 0010 5A60     		str	r2, [r3, #4]
 175:cube/Src/system_stm32f0xx.c **** #endif /* STM32F051x8 or STM32F058x8 */
 176:cube/Src/system_stm32f0xx.c ****   
 177:cube/Src/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 178:cube/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFFU;
  42              		.loc 1 178 0
  43 0012 1A68     		ldr	r2, [r3]
  44 0014 0E48     		ldr	r0, .L2+8
  45 0016 0240     		ands	r2, r0
  46 0018 1A60     		str	r2, [r3]
 179:cube/Src/system_stm32f0xx.c **** 
 180:cube/Src/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 181:cube/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
  47              		.loc 1 181 0
  48 001a 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccsPfFYu.s 			page 5


  49 001c 0D48     		ldr	r0, .L2+12
  50 001e 0240     		ands	r2, r0
  51 0020 1A60     		str	r2, [r3]
 182:cube/Src/system_stm32f0xx.c **** 
 183:cube/Src/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 184:cube/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
  52              		.loc 1 184 0
  53 0022 5A68     		ldr	r2, [r3, #4]
  54 0024 0C48     		ldr	r0, .L2+16
  55 0026 0240     		ands	r2, r0
  56 0028 5A60     		str	r2, [r3, #4]
 185:cube/Src/system_stm32f0xx.c **** 
 186:cube/Src/system_stm32f0xx.c ****   /* Reset PREDIV[3:0] bits */
 187:cube/Src/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
  57              		.loc 1 187 0
  58 002a DA6A     		ldr	r2, [r3, #44]
  59 002c 0F20     		movs	r0, #15
  60 002e 8243     		bics	r2, r0
  61 0030 DA62     		str	r2, [r3, #44]
 188:cube/Src/system_stm32f0xx.c **** 
 189:cube/Src/system_stm32f0xx.c **** #if defined (STM32F072xB) || defined (STM32F078xx)
 190:cube/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 191:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
  62              		.loc 1 191 0
  63 0032 1A6B     		ldr	r2, [r3, #48]
  64 0034 0948     		ldr	r0, .L2+20
  65 0036 0240     		ands	r2, r0
  66 0038 1A63     		str	r2, [r3, #48]
 192:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F071xB)
 193:cube/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 194:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
 195:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F091xC) || defined (STM32F098xx)
 196:cube/Src/system_stm32f0xx.c ****   /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 197:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 198:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038
 199:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
 200:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 201:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F051x8) || defined (STM32F058xx)
 202:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 203:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 204:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F042x6) || defined (STM32F048xx)
 205:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 206:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 207:cube/Src/system_stm32f0xx.c **** #elif defined (STM32F070x6) || defined (STM32F070xB)
 208:cube/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
 209:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 210:cube/Src/system_stm32f0xx.c ****   /* Set default USB clock to PLLCLK, since there is no HSI48 */
 211:cube/Src/system_stm32f0xx.c ****   RCC->CFGR3 |= (uint32_t)0x00000080U;  
 212:cube/Src/system_stm32f0xx.c **** #else
 213:cube/Src/system_stm32f0xx.c ****  #warning "No target selected"
 214:cube/Src/system_stm32f0xx.c **** #endif
 215:cube/Src/system_stm32f0xx.c **** 
 216:cube/Src/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 217:cube/Src/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
  67              		.loc 1 217 0
  68 003a 5A6B     		ldr	r2, [r3, #52]
  69 003c 8A43     		bics	r2, r1
ARM GAS  /tmp/ccsPfFYu.s 			page 6


  70 003e 5A63     		str	r2, [r3, #52]
 218:cube/Src/system_stm32f0xx.c **** 
 219:cube/Src/system_stm32f0xx.c ****   /* Disable all interrupts */
 220:cube/Src/system_stm32f0xx.c ****   RCC->CIR = 0x00000000U;
  71              		.loc 1 220 0
  72 0040 0022     		movs	r2, #0
  73 0042 9A60     		str	r2, [r3, #8]
 221:cube/Src/system_stm32f0xx.c **** 
 222:cube/Src/system_stm32f0xx.c **** }
  74              		.loc 1 222 0
  75              		@ sp needed
  76 0044 7047     		bx	lr
  77              	.L3:
  78 0046 C046     		.align	2
  79              	.L2:
  80 0048 00100240 		.word	1073876992
  81 004c 0CB8FF08 		.word	150976524
  82 0050 FFFFF6FE 		.word	-17367041
  83 0054 FFFFFBFF 		.word	-262145
  84 0058 FFFFC0FF 		.word	-4128769
  85 005c 2CFEFCFF 		.word	-197076
  86              		.cfi_endproc
  87              	.LFE37:
  89              		.global	__aeabi_uidiv
  90              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  91              		.align	1
  92              		.global	SystemCoreClockUpdate
  93              		.syntax unified
  94              		.code	16
  95              		.thumb_func
  96              		.fpu softvfp
  98              	SystemCoreClockUpdate:
  99              	.LFB38:
 223:cube/Src/system_stm32f0xx.c **** 
 224:cube/Src/system_stm32f0xx.c **** /**
 225:cube/Src/system_stm32f0xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 226:cube/Src/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 227:cube/Src/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 228:cube/Src/system_stm32f0xx.c ****   *         other parameters.
 229:cube/Src/system_stm32f0xx.c ****   *
 230:cube/Src/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 231:cube/Src/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 232:cube/Src/system_stm32f0xx.c ****   *         based on this variable will be incorrect.
 233:cube/Src/system_stm32f0xx.c ****   *
 234:cube/Src/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real
 235:cube/Src/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 236:cube/Src/system_stm32f0xx.c ****   *           constant and the selected clock source:
 237:cube/Src/system_stm32f0xx.c ****   *
 238:cube/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 239:cube/Src/system_stm32f0xx.c ****   *
 240:cube/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 241:cube/Src/system_stm32f0xx.c ****   *
 242:cube/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 243:cube/Src/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 244:cube/Src/system_stm32f0xx.c ****   *
 245:cube/Src/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 246:cube/Src/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
ARM GAS  /tmp/ccsPfFYu.s 			page 7


 247:cube/Src/system_stm32f0xx.c ****   *             in voltage and temperature.
 248:cube/Src/system_stm32f0xx.c ****   *
 249:cube/Src/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 250:cube/Src/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 251:cube/Src/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 252:cube/Src/system_stm32f0xx.c ****   *              have wrong result.
 253:cube/Src/system_stm32f0xx.c ****   *
 254:cube/Src/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 255:cube/Src/system_stm32f0xx.c ****   *           value for HSE crystal.
 256:cube/Src/system_stm32f0xx.c ****   *
 257:cube/Src/system_stm32f0xx.c ****   * @param  None
 258:cube/Src/system_stm32f0xx.c ****   * @retval None
 259:cube/Src/system_stm32f0xx.c ****   */
 260:cube/Src/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 261:cube/Src/system_stm32f0xx.c **** {
 100              		.loc 1 261 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104 0000 10B5     		push	{r4, lr}
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 4, -8
 107              		.cfi_offset 14, -4
 108              	.LVL0:
 262:cube/Src/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 263:cube/Src/system_stm32f0xx.c **** 
 264:cube/Src/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 265:cube/Src/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 109              		.loc 1 265 0
 110 0002 254B     		ldr	r3, .L16
 111 0004 5A68     		ldr	r2, [r3, #4]
 112 0006 0C23     		movs	r3, #12
 113 0008 1340     		ands	r3, r2
 114              	.LVL1:
 266:cube/Src/system_stm32f0xx.c **** 
 267:cube/Src/system_stm32f0xx.c ****   switch (tmp)
 115              		.loc 1 267 0
 116 000a 042B     		cmp	r3, #4
 117 000c 16D0     		beq	.L6
 118 000e 082B     		cmp	r3, #8
 119 0010 18D0     		beq	.L7
 120 0012 002B     		cmp	r3, #0
 121 0014 03D0     		beq	.L13
 268:cube/Src/system_stm32f0xx.c ****   {
 269:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 270:cube/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 271:cube/Src/system_stm32f0xx.c ****       break;
 272:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 273:cube/Src/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 274:cube/Src/system_stm32f0xx.c ****       break;
 275:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 276:cube/Src/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 277:cube/Src/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 278:cube/Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 279:cube/Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 280:cube/Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 281:cube/Src/system_stm32f0xx.c **** 
ARM GAS  /tmp/ccsPfFYu.s 			page 8


 282:cube/Src/system_stm32f0xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 283:cube/Src/system_stm32f0xx.c ****       {
 284:cube/Src/system_stm32f0xx.c ****         /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
 285:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 286:cube/Src/system_stm32f0xx.c ****       }
 287:cube/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) ||
 288:cube/Src/system_stm32f0xx.c ****       else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 289:cube/Src/system_stm32f0xx.c ****       {
 290:cube/Src/system_stm32f0xx.c ****         /* HSI48 used as PLL clock source : SystemCoreClock = HSI48/PREDIV * PLLMUL */
 291:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 292:cube/Src/system_stm32f0xx.c ****       }
 293:cube/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx */
 294:cube/Src/system_stm32f0xx.c ****       else
 295:cube/Src/system_stm32f0xx.c ****       {
 296:cube/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx)  || defined(STM32F070x6) \
 297:cube/Src/system_stm32f0xx.c ****  || defined(STM32F078xx) || defined(STM32F071xB)  || defined(STM32F072xB) \
 298:cube/Src/system_stm32f0xx.c ****  || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx)  || defined(STM32F030xC)
 299:cube/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/PREDIV * PLLMUL */
 300:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 301:cube/Src/system_stm32f0xx.c **** #else
 302:cube/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/2 * PLLMUL */
 303:cube/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 304:cube/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
 305:cube/Src/system_stm32f0xx.c ****           STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
 306:cube/Src/system_stm32f0xx.c ****           STM32F091xC || STM32F098xx || STM32F030xC */
 307:cube/Src/system_stm32f0xx.c ****       }
 308:cube/Src/system_stm32f0xx.c ****       break;
 309:cube/Src/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 310:cube/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 122              		.loc 1 310 0
 123 0016 214B     		ldr	r3, .L16+4
 124              	.LVL2:
 125 0018 214A     		ldr	r2, .L16+8
 126              	.LVL3:
 127 001a 1A60     		str	r2, [r3]
 311:cube/Src/system_stm32f0xx.c ****       break;
 128              		.loc 1 311 0
 129 001c 02E0     		b	.L9
 130              	.LVL4:
 131              	.L13:
 270:cube/Src/system_stm32f0xx.c ****       break;
 132              		.loc 1 270 0
 133 001e 1F4B     		ldr	r3, .L16+4
 134              	.LVL5:
 135 0020 1F4A     		ldr	r2, .L16+8
 136              	.LVL6:
 137 0022 1A60     		str	r2, [r3]
 138              	.LVL7:
 139              	.L9:
 312:cube/Src/system_stm32f0xx.c ****   }
 313:cube/Src/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 314:cube/Src/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 315:cube/Src/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 140              		.loc 1 315 0
 141 0024 1C4B     		ldr	r3, .L16
 142 0026 5A68     		ldr	r2, [r3, #4]
 143 0028 1209     		lsrs	r2, r2, #4
ARM GAS  /tmp/ccsPfFYu.s 			page 9


 144 002a 0F23     		movs	r3, #15
 145 002c 1340     		ands	r3, r2
 146 002e 1D4A     		ldr	r2, .L16+12
 147 0030 D35C     		ldrb	r3, [r2, r3]
 148              	.LVL8:
 316:cube/Src/system_stm32f0xx.c ****   /* HCLK clock frequency */
 317:cube/Src/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;
 149              		.loc 1 317 0
 150 0032 1A4A     		ldr	r2, .L16+4
 151 0034 1168     		ldr	r1, [r2]
 152 0036 D940     		lsrs	r1, r1, r3
 153 0038 1160     		str	r1, [r2]
 318:cube/Src/system_stm32f0xx.c **** }
 154              		.loc 1 318 0
 155              		@ sp needed
 156 003a 10BD     		pop	{r4, pc}
 157              	.LVL9:
 158              	.L6:
 273:cube/Src/system_stm32f0xx.c ****       break;
 159              		.loc 1 273 0
 160 003c 174B     		ldr	r3, .L16+4
 161              	.LVL10:
 162 003e 184A     		ldr	r2, .L16+8
 163              	.LVL11:
 164 0040 1A60     		str	r2, [r3]
 274:cube/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 165              		.loc 1 274 0
 166 0042 EFE7     		b	.L9
 167              	.LVL12:
 168              	.L7:
 277:cube/Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 169              		.loc 1 277 0
 170 0044 144A     		ldr	r2, .L16
 171 0046 5068     		ldr	r0, [r2, #4]
 172              	.LVL13:
 278:cube/Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 173              		.loc 1 278 0
 174 0048 5368     		ldr	r3, [r2, #4]
 175              	.LVL14:
 176 004a C021     		movs	r1, #192
 177 004c 4902     		lsls	r1, r1, #9
 178 004e 0B40     		ands	r3, r1
 179              	.LVL15:
 279:cube/Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 180              		.loc 1 279 0
 181 0050 800C     		lsrs	r0, r0, #18
 182              	.LVL16:
 183 0052 0F21     		movs	r1, #15
 184 0054 0840     		ands	r0, r1
 185 0056 841C     		adds	r4, r0, #2
 186              	.LVL17:
 280:cube/Src/system_stm32f0xx.c **** 
 187              		.loc 1 280 0
 188 0058 D26A     		ldr	r2, [r2, #44]
 189 005a 1140     		ands	r1, r2
 190 005c 0131     		adds	r1, r1, #1
 191              	.LVL18:
ARM GAS  /tmp/ccsPfFYu.s 			page 10


 282:cube/Src/system_stm32f0xx.c ****       {
 192              		.loc 1 282 0
 193 005e 8022     		movs	r2, #128
 194 0060 5202     		lsls	r2, r2, #9
 195 0062 9342     		cmp	r3, r2
 196 0064 0AD0     		beq	.L14
 288:cube/Src/system_stm32f0xx.c ****       {
 197              		.loc 1 288 0
 198 0066 C022     		movs	r2, #192
 199 0068 5202     		lsls	r2, r2, #9
 200 006a 9342     		cmp	r3, r2
 201 006c 0DD0     		beq	.L15
 300:cube/Src/system_stm32f0xx.c **** #else
 202              		.loc 1 300 0
 203 006e 0C48     		ldr	r0, .L16+8
 204 0070 FFF7FEFF 		bl	__aeabi_uidiv
 205              	.LVL19:
 206 0074 6043     		muls	r0, r4
 207 0076 094B     		ldr	r3, .L16+4
 208 0078 1860     		str	r0, [r3]
 209 007a D3E7     		b	.L9
 210              	.LVL20:
 211              	.L14:
 285:cube/Src/system_stm32f0xx.c ****       }
 212              		.loc 1 285 0
 213 007c 0848     		ldr	r0, .L16+8
 214 007e FFF7FEFF 		bl	__aeabi_uidiv
 215              	.LVL21:
 216 0082 6043     		muls	r0, r4
 217 0084 054B     		ldr	r3, .L16+4
 218 0086 1860     		str	r0, [r3]
 219 0088 CCE7     		b	.L9
 220              	.LVL22:
 221              	.L15:
 291:cube/Src/system_stm32f0xx.c ****       }
 222              		.loc 1 291 0
 223 008a 0748     		ldr	r0, .L16+16
 224 008c FFF7FEFF 		bl	__aeabi_uidiv
 225              	.LVL23:
 226 0090 6043     		muls	r0, r4
 227 0092 024B     		ldr	r3, .L16+4
 228 0094 1860     		str	r0, [r3]
 229 0096 C5E7     		b	.L9
 230              	.L17:
 231              		.align	2
 232              	.L16:
 233 0098 00100240 		.word	1073876992
 234 009c 00000000 		.word	.LANCHOR0
 235 00a0 00127A00 		.word	8000000
 236 00a4 00000000 		.word	.LANCHOR1
 237 00a8 006CDC02 		.word	48000000
 238              		.cfi_endproc
 239              	.LFE38:
 241              		.global	APBPrescTable
 242              		.global	AHBPrescTable
 243              		.global	SystemCoreClock
 244              		.section	.data.SystemCoreClock,"aw",%progbits
ARM GAS  /tmp/ccsPfFYu.s 			page 11


 245              		.align	2
 246              		.set	.LANCHOR0,. + 0
 249              	SystemCoreClock:
 250 0000 00127A00 		.word	8000000
 251              		.section	.rodata.AHBPrescTable,"a",%progbits
 252              		.align	2
 253              		.set	.LANCHOR1,. + 0
 256              	AHBPrescTable:
 257 0000 00       		.byte	0
 258 0001 00       		.byte	0
 259 0002 00       		.byte	0
 260 0003 00       		.byte	0
 261 0004 00       		.byte	0
 262 0005 00       		.byte	0
 263 0006 00       		.byte	0
 264 0007 00       		.byte	0
 265 0008 01       		.byte	1
 266 0009 02       		.byte	2
 267 000a 03       		.byte	3
 268 000b 04       		.byte	4
 269 000c 06       		.byte	6
 270 000d 07       		.byte	7
 271 000e 08       		.byte	8
 272 000f 09       		.byte	9
 273              		.section	.rodata.APBPrescTable,"a",%progbits
 274              		.align	2
 277              	APBPrescTable:
 278 0000 00       		.byte	0
 279 0001 00       		.byte	0
 280 0002 00       		.byte	0
 281 0003 00       		.byte	0
 282 0004 01       		.byte	1
 283 0005 02       		.byte	2
 284 0006 03       		.byte	3
 285 0007 04       		.byte	4
 286              		.text
 287              	.Letext0:
 288              		.file 2 "/home/lhaug/Documents/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_d
 289              		.file 3 "/home/lhaug/Documents/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 290              		.file 4 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 291              		.file 5 "cube/Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 292              		.file 6 "/home/lhaug/Documents/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h
 293              		.file 7 "/home/lhaug/Documents/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types
 294              		.file 8 "/home/lhaug/Documents/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/incl
 295              		.file 9 "/home/lhaug/Documents/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.
ARM GAS  /tmp/ccsPfFYu.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f0xx.c
     /tmp/ccsPfFYu.s:16     .text.SystemInit:0000000000000000 $t
     /tmp/ccsPfFYu.s:23     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccsPfFYu.s:80     .text.SystemInit:0000000000000048 $d
     /tmp/ccsPfFYu.s:91     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccsPfFYu.s:98     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccsPfFYu.s:233    .text.SystemCoreClockUpdate:0000000000000098 $d
     /tmp/ccsPfFYu.s:277    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccsPfFYu.s:256    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccsPfFYu.s:249    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccsPfFYu.s:245    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccsPfFYu.s:252    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccsPfFYu.s:274    .rodata.APBPrescTable:0000000000000000 $d
                           .group:0000000000000000 wm4.0.f4162676b8f623651f7a1199aa7e48f7
                           .group:0000000000000000 wm4.stm32f0xx.h.55.6dda558900ae83b4ddf41af91bcbf2f5
                           .group:0000000000000000 wm4.stm32f072xb.h.53.c99f4c72149ed98740992cfc418a4d39
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.core_cm0.h.74.a7f5ed9ff199b3163f5ed99892efe60d
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.5bb14fd68ce7855540fcfe2d9305ae16
                           .group:0000000000000000 wm4.core_cm0.h.175.2353140684a11cc8267b4125ac92735e
                           .group:0000000000000000 wm4.stm32f072xb.h.653.664388dc5ef2a697008be7ff13986fc5
                           .group:0000000000000000 wm4.stm32f0xx.h.186.8a2f1abf0fccd74c76b01fef06350694
                           .group:0000000000000000 wm4.main.h.42.3e9602f258f21c216c24749e16771da2
                           .group:0000000000000000 wm4.stm32f0xx_hal_conf.h.51.106428aa4afcad6bf79baa0a3e608f3f
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.types.h.114.fb65732f4f5f288a036a25898de2c91f
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:0000000000000000 wm4.stm32f0xx_hal_def.h.76.81362c22f1bfa407bb20bdc5ef2fe817
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc.h.64.1680b96367ed05251327e73e2ef7e0a0
                           .group:0000000000000000 wm4.stm32f0xx_hal_rcc_ex.h.38.fed157297eb0e49fa475a8f4d962b1a1
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio.h.38.5de46a121e30d1d136216266f57becb9
                           .group:0000000000000000 wm4.stm32f0xx_hal_gpio_ex.h.38.4ae096506dfd35e4cd1e2bfdbf19c71f
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.38.9bc992aa465d2468bc055502b51063f3
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma_ex.h.38.c2269542e0bcc97944af39289a0a60b8
                           .group:0000000000000000 wm4.stm32f0xx_hal_dma.h.500.3b36a5be41f3e2ac138f4041ccf5cecb
                           .group:0000000000000000 wm4.stm32f0xx_hal_cortex.h.38.61b1088b7495d338bc65ee2571a0bb95
ARM GAS  /tmp/ccsPfFYu.s 			page 13


                           .group:0000000000000000 wm4.stm32f0xx_hal_flash.h.38.752a2d52b6ea91b900355f4ecd0538c0
                           .group:0000000000000000 wm4.stm32f0xx_hal_flash_ex.h.38.8097982a0077322c9b7a892e64a756d8
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.38.387f38a4bc9cbea958e7081da9f60815
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c_ex.h.38.9a4523b2ddbaaa2727287ccab47d88d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_i2c.h.625.1e7eff54876bba211f769007bbafd5f1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr.h.38.2c4d8c2e90fc76cec57b78b078d485d1
                           .group:0000000000000000 wm4.stm32f0xx_hal_pwr_ex.h.38.e18331c4036598a45f5d1fd3922b2997
                           .group:0000000000000000 wm4.stm32f0xx_hal.h.70.818459bc3b31dd9e51543930b5b3b8df

UNDEFINED SYMBOLS
__aeabi_uidiv
